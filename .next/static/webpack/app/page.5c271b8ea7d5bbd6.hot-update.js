"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./contexts/ContactContext.tsx":
/*!*************************************!*\
  !*** ./contexts/ContactContext.tsx ***!
  \*************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ContactProvider: function() { return /* binding */ ContactProvider; },\n/* harmony export */   useContacts: function() { return /* binding */ useContacts; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _data_sampleData__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../data/sampleData */ \"(app-pages-browser)/./data/sampleData.ts\");\n/* harmony import */ var _data_dataService__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../data/dataService */ \"(app-pages-browser)/./data/dataService.ts\");\n/* __next_internal_client_entry_do_not_use__ ContactProvider,useContacts auto */ \nvar _s = $RefreshSig$(), _s1 = $RefreshSig$();\n\n\n\n// Helper functions for normalization\nconst normalizeArray = (array)=>{\n    return array.reduce((acc, item)=>{\n        acc[item.id] = item;\n        return acc;\n    }, {});\n};\nconst denormalizeRecord = (record)=>{\n    return Object.values(record);\n};\nconst initialState = {\n    entities: {\n        contacts: {},\n        subjects: {},\n        organizations: {},\n        occupations: {},\n        relationships: {},\n        sentiments: {},\n        notes: {}\n    },\n    contacts: [],\n    subjects: [],\n    organizations: [],\n    occupations: [],\n    relationships: [],\n    sentiments: [],\n    notes: [],\n    isLoading: true,\n    error: null,\n    optimisticUpdates: {\n        contacts: new Set(),\n        subjects: new Set(),\n        organizations: new Set(),\n        occupations: new Set(),\n        relationships: new Set(),\n        sentiments: new Set(),\n        notes: new Set()\n    }\n};\nfunction contactReducer(state, action) {\n    console.log(\"ContactContext: Reducer action:\", action.type);\n    switch(action.type){\n        case \"SET_CONTACTS\":\n            console.log(\"ContactContext: Setting contacts:\", action.payload);\n            return {\n                ...state,\n                contacts: action.payload,\n                isLoading: false\n            };\n        case \"SET_SUBJECTS\":\n            console.log(\"ContactContext: Setting subjects:\", action.payload);\n            return {\n                ...state,\n                subjects: action.payload\n            };\n        case \"SET_ORGANIZATIONS\":\n            console.log(\"ContactContext: Setting organizations:\", action.payload);\n            return {\n                ...state,\n                organizations: action.payload\n            };\n        case \"SET_OCCUPATIONS\":\n            console.log(\"ContactContext: Setting occupations:\", action.payload);\n            return {\n                ...state,\n                occupations: action.payload\n            };\n        case \"SET_RELATIONSHIPS\":\n            console.log(\"ContactContext: Setting relationships:\", action.payload);\n            return {\n                ...state,\n                relationships: action.payload\n            };\n        case \"SET_SENTIMENTS\":\n            console.log(\"ContactContext: Setting sentiments:\", action.payload);\n            return {\n                ...state,\n                sentiments: action.payload\n            };\n        case \"SET_NOTES\":\n            console.log(\"ContactContext: Setting notes:\", action.payload);\n            return {\n                ...state,\n                notes: action.payload\n            };\n        case \"SET_ALL_DATA\":\n            return {\n                ...state,\n                entities: {\n                    contacts: normalizeArray(action.payload.contacts),\n                    subjects: normalizeArray(action.payload.subjects),\n                    organizations: normalizeArray(action.payload.organizations),\n                    occupations: normalizeArray(action.payload.occupations),\n                    relationships: normalizeArray(action.payload.relationships),\n                    sentiments: normalizeArray(action.payload.sentiments),\n                    notes: normalizeArray(action.payload.notes)\n                },\n                contacts: action.payload.contacts,\n                subjects: action.payload.subjects,\n                organizations: action.payload.organizations,\n                occupations: action.payload.occupations,\n                relationships: action.payload.relationships,\n                sentiments: action.payload.sentiments,\n                notes: action.payload.notes,\n                isLoading: false,\n                error: null\n            };\n        case \"UPDATE_CONTACT_SELECTIVE\":\n            return {\n                ...state,\n                entities: {\n                    ...state.entities,\n                    contacts: {\n                        ...state.entities.contacts,\n                        [action.payload.id]: {\n                            ...state.entities.contacts[action.payload.id],\n                            ...action.payload.updates\n                        }\n                    }\n                },\n                optimisticUpdates: {\n                    ...state.optimisticUpdates,\n                    contacts: new Set(state.optimisticUpdates.contacts).add(action.payload.id)\n                }\n            };\n        case \"UPDATE_SUBJECT_SELECTIVE\":\n            return {\n                ...state,\n                entities: {\n                    ...state.entities,\n                    subjects: {\n                        ...state.entities.subjects,\n                        [action.payload.id]: {\n                            ...state.entities.subjects[action.payload.id],\n                            ...action.payload.updates\n                        }\n                    }\n                },\n                optimisticUpdates: {\n                    ...state.optimisticUpdates,\n                    subjects: new Set(state.optimisticUpdates.subjects).add(action.payload.id)\n                }\n            };\n        case \"UPDATE_ORGANIZATION_SELECTIVE\":\n            return {\n                ...state,\n                entities: {\n                    ...state.entities,\n                    organizations: {\n                        ...state.entities.organizations,\n                        [action.payload.id]: {\n                            ...state.entities.organizations[action.payload.id],\n                            ...action.payload.updates\n                        }\n                    }\n                },\n                optimisticUpdates: {\n                    ...state.optimisticUpdates,\n                    organizations: new Set(state.optimisticUpdates.organizations).add(action.payload.id)\n                }\n            };\n        case \"UPDATE_OCCUPATION_SELECTIVE\":\n            return {\n                ...state,\n                entities: {\n                    ...state.entities,\n                    occupations: {\n                        ...state.entities.occupations,\n                        [action.payload.id]: {\n                            ...state.entities.occupations[action.payload.id],\n                            ...action.payload.updates\n                        }\n                    }\n                },\n                optimisticUpdates: {\n                    ...state.optimisticUpdates,\n                    occupations: new Set(state.optimisticUpdates.occupations).add(action.payload.id)\n                }\n            };\n        case \"UPDATE_RELATIONSHIP_SELECTIVE\":\n            return {\n                ...state,\n                entities: {\n                    ...state.entities,\n                    relationships: {\n                        ...state.entities.relationships,\n                        [action.payload.id]: {\n                            ...state.entities.relationships[action.payload.id],\n                            ...action.payload.updates\n                        }\n                    }\n                },\n                optimisticUpdates: {\n                    ...state.optimisticUpdates,\n                    relationships: new Set(state.optimisticUpdates.relationships).add(action.payload.id)\n                }\n            };\n        case \"UPDATE_SENTIMENT_SELECTIVE\":\n            return {\n                ...state,\n                entities: {\n                    ...state.entities,\n                    sentiments: {\n                        ...state.entities.sentiments,\n                        [action.payload.id]: {\n                            ...state.entities.sentiments[action.payload.id],\n                            ...action.payload.updates\n                        }\n                    }\n                },\n                optimisticUpdates: {\n                    ...state.optimisticUpdates,\n                    sentiments: new Set(state.optimisticUpdates.sentiments).add(action.payload.id)\n                }\n            };\n        case \"UPDATE_NOTE_SELECTIVE\":\n            return {\n                ...state,\n                entities: {\n                    ...state.entities,\n                    notes: {\n                        ...state.entities.notes,\n                        [action.payload.id]: {\n                            ...state.entities.notes[action.payload.id],\n                            ...action.payload.updates\n                        }\n                    }\n                },\n                optimisticUpdates: {\n                    ...state.optimisticUpdates,\n                    notes: new Set(state.optimisticUpdates.notes).add(action.payload.id)\n                }\n            };\n        case \"ADD_CONTACT\":\n            return {\n                ...state,\n                entities: {\n                    ...state.entities,\n                    contacts: {\n                        ...state.entities.contacts,\n                        [action.payload.id]: action.payload\n                    }\n                },\n                contacts: [\n                    ...state.contacts,\n                    action.payload\n                ],\n                optimisticUpdates: {\n                    ...state.optimisticUpdates,\n                    contacts: new Set(state.optimisticUpdates.contacts).add(action.payload.id)\n                }\n            };\n        case \"ADD_SUBJECT\":\n            return {\n                ...state,\n                entities: {\n                    ...state.entities,\n                    subjects: {\n                        ...state.entities.subjects,\n                        [action.payload.id]: action.payload\n                    }\n                },\n                subjects: [\n                    ...state.subjects,\n                    action.payload\n                ],\n                optimisticUpdates: {\n                    ...state.optimisticUpdates,\n                    subjects: new Set(state.optimisticUpdates.subjects).add(action.payload.id)\n                }\n            };\n        case \"ADD_ORGANIZATION\":\n            return {\n                ...state,\n                entities: {\n                    ...state.entities,\n                    organizations: {\n                        ...state.entities.organizations,\n                        [action.payload.id]: action.payload\n                    }\n                },\n                organizations: [\n                    ...state.organizations,\n                    action.payload\n                ],\n                optimisticUpdates: {\n                    ...state.optimisticUpdates,\n                    organizations: new Set(state.optimisticUpdates.organizations).add(action.payload.id)\n                }\n            };\n        case \"ADD_OCCUPATION\":\n            return {\n                ...state,\n                entities: {\n                    ...state.entities,\n                    occupations: {\n                        ...state.entities.occupations,\n                        [action.payload.id]: action.payload\n                    }\n                },\n                occupations: [\n                    ...state.occupations,\n                    action.payload\n                ],\n                optimisticUpdates: {\n                    ...state.optimisticUpdates,\n                    occupations: new Set(state.optimisticUpdates.occupations).add(action.payload.id)\n                }\n            };\n        case \"ADD_RELATIONSHIP\":\n            return {\n                ...state,\n                entities: {\n                    ...state.entities,\n                    relationships: {\n                        ...state.entities.relationships,\n                        [action.payload.id]: action.payload\n                    }\n                },\n                relationships: [\n                    ...state.relationships,\n                    action.payload\n                ],\n                optimisticUpdates: {\n                    ...state.optimisticUpdates,\n                    relationships: new Set(state.optimisticUpdates.relationships).add(action.payload.id)\n                }\n            };\n        case \"ADD_SENTIMENT\":\n            return {\n                ...state,\n                entities: {\n                    ...state.entities,\n                    sentiments: {\n                        ...state.entities.sentiments,\n                        [action.payload.id]: action.payload\n                    }\n                },\n                sentiments: [\n                    ...state.sentiments,\n                    action.payload\n                ],\n                optimisticUpdates: {\n                    ...state.optimisticUpdates,\n                    sentiments: new Set(state.optimisticUpdates.sentiments).add(action.payload.id)\n                }\n            };\n        case \"ADD_NOTE\":\n            return {\n                ...state,\n                entities: {\n                    ...state.entities,\n                    notes: {\n                        ...state.entities.notes,\n                        [action.payload.id]: action.payload\n                    }\n                },\n                notes: [\n                    ...state.notes,\n                    action.payload\n                ],\n                optimisticUpdates: {\n                    ...state.optimisticUpdates,\n                    notes: new Set(state.optimisticUpdates.notes).add(action.payload.id)\n                }\n            };\n        case \"DELETE_CONTACT\":\n            const { [action.payload]: deletedContact, ...remainingContacts } = state.entities.contacts;\n            return {\n                ...state,\n                entities: {\n                    ...state.entities,\n                    contacts: remainingContacts\n                },\n                contacts: state.contacts.filter((contact)=>contact.id !== action.payload),\n                optimisticUpdates: {\n                    ...state.optimisticUpdates,\n                    contacts: new Set(state.optimisticUpdates.contacts).add(action.payload)\n                }\n            };\n        case \"DELETE_SUBJECT\":\n            const { [action.payload]: deletedSubject, ...remainingSubjects } = state.entities.subjects;\n            return {\n                ...state,\n                entities: {\n                    ...state.entities,\n                    subjects: remainingSubjects\n                },\n                subjects: state.subjects.filter((subject)=>subject.id !== action.payload),\n                optimisticUpdates: {\n                    ...state.optimisticUpdates,\n                    subjects: new Set(state.optimisticUpdates.subjects).add(action.payload)\n                }\n            };\n        case \"DELETE_ORGANIZATION\":\n            const { [action.payload]: deletedOrg, ...remainingOrgs } = state.entities.organizations;\n            return {\n                ...state,\n                entities: {\n                    ...state.entities,\n                    organizations: remainingOrgs\n                },\n                organizations: state.organizations.filter((org)=>org.id !== action.payload),\n                optimisticUpdates: {\n                    ...state.optimisticUpdates,\n                    organizations: new Set(state.optimisticUpdates.organizations).add(action.payload)\n                }\n            };\n        case \"DELETE_OCCUPATION\":\n            const { [action.payload]: deletedOcc, ...remainingOccs } = state.entities.occupations;\n            return {\n                ...state,\n                entities: {\n                    ...state.entities,\n                    occupations: remainingOccs\n                },\n                occupations: state.occupations.filter((occ)=>occ.id !== action.payload),\n                optimisticUpdates: {\n                    ...state.optimisticUpdates,\n                    occupations: new Set(state.optimisticUpdates.occupations).add(action.payload)\n                }\n            };\n        case \"DELETE_RELATIONSHIP\":\n            const { [action.payload]: deletedRel, ...remainingRels } = state.entities.relationships;\n            return {\n                ...state,\n                entities: {\n                    ...state.entities,\n                    relationships: remainingRels\n                },\n                relationships: state.relationships.filter((rel)=>rel.id !== action.payload),\n                optimisticUpdates: {\n                    ...state.optimisticUpdates,\n                    relationships: new Set(state.optimisticUpdates.relationships).add(action.payload)\n                }\n            };\n        case \"DELETE_SENTIMENT\":\n            const { [action.payload]: deletedSent, ...remainingSents } = state.entities.sentiments;\n            return {\n                ...state,\n                entities: {\n                    ...state.entities,\n                    sentiments: remainingSents\n                },\n                sentiments: state.sentiments.filter((sent)=>sent.id !== action.payload),\n                optimisticUpdates: {\n                    ...state.optimisticUpdates,\n                    sentiments: new Set(state.optimisticUpdates.sentiments).add(action.payload)\n                }\n            };\n        case \"DELETE_NOTE\":\n            const { [action.payload]: deletedNote, ...remainingNotes } = state.entities.notes;\n            return {\n                ...state,\n                entities: {\n                    ...state.entities,\n                    notes: remainingNotes\n                },\n                notes: state.notes.filter((note)=>note.id !== action.payload),\n                optimisticUpdates: {\n                    ...state.optimisticUpdates,\n                    notes: new Set(state.optimisticUpdates.notes).add(action.payload)\n                }\n            };\n        case \"OPTIMISTIC_UPDATE_CONTACT\":\n            return {\n                ...state,\n                entities: {\n                    ...state.entities,\n                    contacts: {\n                        ...state.entities.contacts,\n                        [action.payload.id]: {\n                            ...state.entities.contacts[action.payload.id],\n                            ...action.payload.updates\n                        }\n                    }\n                },\n                optimisticUpdates: {\n                    ...state.optimisticUpdates,\n                    contacts: new Set(state.optimisticUpdates.contacts).add(action.payload.id)\n                }\n            };\n        case \"OPTIMISTIC_ADD_CONTACT\":\n            return {\n                ...state,\n                entities: {\n                    ...state.entities,\n                    contacts: {\n                        ...state.entities.contacts,\n                        [action.payload.id]: action.payload\n                    }\n                },\n                contacts: [\n                    ...state.contacts,\n                    action.payload\n                ],\n                optimisticUpdates: {\n                    ...state.optimisticUpdates,\n                    contacts: new Set(state.optimisticUpdates.contacts).add(action.payload.id)\n                }\n            };\n        case \"OPTIMISTIC_DELETE_CONTACT\":\n            const { [action.payload]: deletedContactOpt, ...remainingContactsOpt } = state.entities.contacts;\n            return {\n                ...state,\n                entities: {\n                    ...state.entities,\n                    contacts: remainingContactsOpt\n                },\n                contacts: state.contacts.filter((contact)=>contact.id !== action.payload),\n                optimisticUpdates: {\n                    ...state.optimisticUpdates,\n                    contacts: new Set(state.optimisticUpdates.contacts).add(action.payload)\n                }\n            };\n        case \"OPTIMISTIC_UPDATE_NOTE\":\n            return {\n                ...state,\n                entities: {\n                    ...state.entities,\n                    notes: {\n                        ...state.entities.notes,\n                        [action.payload.id]: {\n                            ...state.entities.notes[action.payload.id],\n                            ...action.payload.updates\n                        }\n                    }\n                },\n                optimisticUpdates: {\n                    ...state.optimisticUpdates,\n                    notes: new Set(state.optimisticUpdates.notes).add(action.payload.id)\n                }\n            };\n        case \"OPTIMISTIC_ADD_NOTE\":\n            return {\n                ...state,\n                entities: {\n                    ...state.entities,\n                    notes: {\n                        ...state.entities.notes,\n                        [action.payload.id]: action.payload\n                    }\n                },\n                notes: [\n                    ...state.notes,\n                    action.payload\n                ],\n                optimisticUpdates: {\n                    ...state.optimisticUpdates,\n                    notes: new Set(state.optimisticUpdates.notes).add(action.payload.id)\n                }\n            };\n        case \"OPTIMISTIC_DELETE_NOTE\":\n            return {\n                ...state,\n                entities: {\n                    ...state.entities,\n                    notes: {\n                        ...state.entities.notes,\n                        [action.payload]: undefined\n                    }\n                },\n                notes: state.notes.filter((note)=>note.id !== action.payload),\n                optimisticUpdates: {\n                    ...state.optimisticUpdates,\n                    notes: new Set(state.optimisticUpdates.notes).add(action.payload)\n                }\n            };\n        case \"ROLLBACK_OPTIMISTIC_UPDATE\":\n            return {\n                ...state,\n                entities: {\n                    ...state.entities,\n                    [action.payload.entityType]: {\n                        ...state.entities[action.payload.entityType],\n                        [action.payload.id]: state.entities[action.payload.entityType][action.payload.id]\n                    }\n                },\n                optimisticUpdates: {\n                    ...state.optimisticUpdates,\n                    [action.payload.entityType]: new Set(state.optimisticUpdates[action.payload.entityType]).delete(action.payload.id)\n                }\n            };\n        case \"ROLLBACK_ALL_OPTIMISTIC_UPDATES\":\n            return {\n                ...state,\n                optimisticUpdates: {\n                    contacts: new Set(),\n                    subjects: new Set(),\n                    organizations: new Set(),\n                    occupations: new Set(),\n                    relationships: new Set(),\n                    sentiments: new Set(),\n                    notes: new Set()\n                }\n            };\n        case \"SET_LOADING\":\n            return {\n                ...state,\n                isLoading: action.payload\n            };\n        case \"SET_ERROR\":\n            return {\n                ...state,\n                error: action.payload\n            };\n        case \"RESET_TO_SAMPLE\":\n            const sampleData = (0,_data_sampleData__WEBPACK_IMPORTED_MODULE_2__.getSampleData)();\n            console.log(\"ContactContext: Resetting to sample data:\", sampleData);\n            return {\n                ...state,\n                entities: {\n                    contacts: normalizeArray(sampleData.contacts),\n                    subjects: normalizeArray(sampleData.subjects),\n                    organizations: normalizeArray(sampleData.organizations),\n                    occupations: normalizeArray(sampleData.occupations),\n                    relationships: normalizeArray(sampleData.relationships),\n                    sentiments: normalizeArray(sampleData.sentiments),\n                    notes: normalizeArray(sampleData.notes)\n                },\n                contacts: sampleData.contacts,\n                subjects: sampleData.subjects,\n                organizations: sampleData.organizations,\n                occupations: sampleData.occupations,\n                relationships: sampleData.relationships,\n                sentiments: sampleData.sentiments,\n                notes: sampleData.notes,\n                isLoading: false\n            };\n        case \"RELOAD_FROM_STORAGE\":\n            const savedData = localStorage.getItem(\"circle-data\");\n            if (savedData) {\n                try {\n                    const data = JSON.parse(savedData);\n                    console.log(\"ContactContext: Reloading from localStorage:\", data);\n                    // Check if the data format is valid (has proper subjects/relationships arrays)\n                    const isValidData = data.subjects && Array.isArray(data.subjects) && data.relationships && Array.isArray(data.relationships) && data.contacts && Array.isArray(data.contacts);\n                    if (!isValidData) {\n                        console.warn(\"ContactContext: Invalid data format detected, clearing localStorage\");\n                        localStorage.removeItem(\"circle-data\");\n                        throw new Error(\"Invalid data format\");\n                    }\n                    // Return new state with reloaded data\n                    const reconstructedContacts = data.contacts.map((contact)=>({\n                            ...contact,\n                            subjects: (contact.subjects || []).map((subjectId)=>data.subjects.find((s)=>s.id === subjectId)).filter(Boolean),\n                            relationships: (contact.relationships || []).map((relationshipId)=>data.relationships.find((r)=>r.id === relationshipId)).filter(Boolean)\n                        }));\n                    return {\n                        ...state,\n                        entities: {\n                            contacts: normalizeArray(reconstructedContacts),\n                            subjects: normalizeArray(data.subjects),\n                            organizations: normalizeArray(data.organizations || []),\n                            occupations: normalizeArray(data.occupations || []),\n                            relationships: normalizeArray(data.relationships),\n                            notes: normalizeArray(data.notes || [])\n                        },\n                        contacts: reconstructedContacts,\n                        subjects: data.subjects,\n                        organizations: data.organizations || [],\n                        occupations: data.occupations || [],\n                        relationships: data.relationships,\n                        notes: data.notes || [],\n                        isLoading: false\n                    };\n                } catch (error) {\n                    console.error(\"Failed to parse saved data:\", error);\n                    // Clear corrupted data and use fresh sample data\n                    localStorage.removeItem(\"circle-data\");\n                    const sampleData = (0,_data_sampleData__WEBPACK_IMPORTED_MODULE_2__.getSampleData)();\n                    return {\n                        ...state,\n                        entities: {\n                            contacts: normalizeArray(sampleData.contacts),\n                            subjects: normalizeArray(sampleData.subjects),\n                            organizations: normalizeArray(sampleData.organizations),\n                            occupations: normalizeArray(sampleData.occupations),\n                            relationships: normalizeArray(sampleData.relationships),\n                            notes: normalizeArray(sampleData.notes)\n                        },\n                        contacts: sampleData.contacts,\n                        subjects: sampleData.subjects,\n                        organizations: sampleData.organizations,\n                        occupations: sampleData.occupations,\n                        relationships: sampleData.relationships,\n                        notes: sampleData.notes,\n                        isLoading: false\n                    };\n                }\n            } else {\n                const sampleData = (0,_data_sampleData__WEBPACK_IMPORTED_MODULE_2__.getSampleData)();\n                return {\n                    ...state,\n                    entities: {\n                        contacts: normalizeArray(sampleData.contacts),\n                        subjects: normalizeArray(sampleData.subjects),\n                        organizations: normalizeArray(sampleData.organizations),\n                        occupations: normalizeArray(sampleData.occupations),\n                        relationships: normalizeArray(sampleData.relationships),\n                        notes: normalizeArray(sampleData.notes)\n                    },\n                    contacts: sampleData.contacts,\n                    subjects: sampleData.subjects,\n                    organizations: sampleData.organizations,\n                    occupations: sampleData.occupations,\n                    relationships: sampleData.relationships,\n                    notes: sampleData.notes,\n                    isLoading: false\n                };\n            }\n        default:\n            return state;\n    }\n}\nconst ContactContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(null);\nfunction ContactProvider(param) {\n    let { children } = param;\n    _s();\n    const [state, dispatch] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useReducer)(contactReducer, initialState);\n    // Load data using DataService on mount\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        console.log(\"ContactContext: Starting data load using DataService...\");\n        const loadData = async ()=>{\n            try {\n                dispatch({\n                    type: \"SET_LOADING\",\n                    payload: true\n                });\n                dispatch({\n                    type: \"SET_ERROR\",\n                    payload: null\n                });\n                const data = await _data_dataService__WEBPACK_IMPORTED_MODULE_3__.dataService.getAllData();\n                console.log(\"ContactContext: Loaded data from DataService:\", data);\n                dispatch({\n                    type: \"SET_ALL_DATA\",\n                    payload: data\n                });\n            } catch (error) {\n                console.error(\"ContactContext: Failed to load data:\", error);\n                dispatch({\n                    type: \"SET_ERROR\",\n                    payload: \"Failed to load data\"\n                });\n                dispatch({\n                    type: \"SET_LOADING\",\n                    payload: false\n                });\n                // Fallback to sample data\n                try {\n                    const sampleData = (0,_data_sampleData__WEBPACK_IMPORTED_MODULE_2__.getSampleData)();\n                    console.log(\"ContactContext: Using fallback sample data:\", sampleData);\n                    dispatch({\n                        type: \"SET_ALL_DATA\",\n                        payload: sampleData\n                    });\n                } catch (fallbackError) {\n                    console.error(\"ContactContext: Even sample data failed:\", fallbackError);\n                    dispatch({\n                        type: \"SET_ERROR\",\n                        payload: \"Failed to load any data\"\n                    });\n                    dispatch({\n                        type: \"SET_LOADING\",\n                        payload: false\n                    });\n                }\n            }\n        };\n        loadData();\n    }, []);\n    // Save data to localStorage whenever state changes\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!state.isLoading) {\n            // Convert contacts to save format with subject/relationship IDs instead of full objects\n            const contactsForSave = state.contacts.map((contact)=>({\n                    ...contact,\n                    occupation: contact.occupationId || null,\n                    organization: contact.organizationId || null,\n                    subjects: contact.subjectIds || [],\n                    relationships: contact.relationshipIds || []\n                }));\n            localStorage.setItem(\"circle-data\", JSON.stringify({\n                contacts: contactsForSave,\n                subjects: state.subjects,\n                organizations: state.organizations,\n                occupations: state.occupations,\n                relationships: state.relationships,\n                sentiments: state.sentiments,\n                notes: state.notes\n            }));\n        }\n    }, [\n        state.contacts,\n        state.subjects,\n        state.organizations,\n        state.occupations,\n        state.relationships,\n        state.sentiments,\n        state.notes,\n        state.isLoading\n    ]);\n    // Legacy synchronous methods (for backward compatibility)\n    const addContact = (contact)=>{\n        const newContact = {\n            ...contact,\n            id: Date.now()\n        };\n        dispatch({\n            type: \"ADD_CONTACT\",\n            payload: newContact\n        });\n    };\n    const updateContact = (id, updates)=>{\n        dispatch({\n            type: \"UPDATE_CONTACT_SELECTIVE\",\n            payload: {\n                id,\n                updates\n            }\n        });\n    };\n    const deleteContact = (id)=>{\n        dispatch({\n            type: \"DELETE_CONTACT\",\n            payload: id\n        });\n    };\n    const addSubject = (subject)=>{\n        const newSubject = {\n            ...subject,\n            id: Date.now()\n        };\n        dispatch({\n            type: \"ADD_SUBJECT\",\n            payload: newSubject\n        });\n    };\n    const addOrganization = (organization)=>{\n        const newOrganization = {\n            ...organization,\n            id: Date.now()\n        };\n        dispatch({\n            type: \"ADD_ORGANIZATION\",\n            payload: newOrganization\n        });\n    };\n    const addOccupation = (occupation)=>{\n        const newOccupation = {\n            ...occupation,\n            id: Date.now()\n        };\n        dispatch({\n            type: \"ADD_OCCUPATION\",\n            payload: newOccupation\n        });\n    };\n    const addRelationship = (relationship)=>{\n        const newRelationship = {\n            ...relationship,\n            id: Date.now()\n        };\n        dispatch({\n            type: \"ADD_RELATIONSHIP\",\n            payload: newRelationship\n        });\n    };\n    const addNote = (note)=>{\n        const newNote = {\n            ...note,\n            id: Date.now(),\n            createdAt: new Date().toISOString()\n        };\n        dispatch({\n            type: \"ADD_NOTE\",\n            payload: newNote\n        });\n    };\n    // New async methods for unidirectional data flow\n    const updateContactAsync = async (id, updates)=>{\n        try {\n            dispatch({\n                type: \"SET_LOADING\",\n                payload: true\n            });\n            dispatch({\n                type: \"SET_ERROR\",\n                payload: null\n            });\n            // Update via DataService\n            await _data_dataService__WEBPACK_IMPORTED_MODULE_3__.dataService.updateContact(id, updates);\n            // Reload all data to ensure consistency\n            const data = await _data_dataService__WEBPACK_IMPORTED_MODULE_3__.dataService.getAllData();\n            dispatch({\n                type: \"SET_ALL_DATA\",\n                payload: data\n            });\n        } catch (error) {\n            console.error(\"Failed to update contact:\", error);\n            const errorMessage = error instanceof Error ? error.message : \"Unknown error\";\n            dispatch({\n                type: \"SET_ERROR\",\n                payload: \"Failed to update contact: \".concat(errorMessage)\n            });\n            dispatch({\n                type: \"SET_LOADING\",\n                payload: false\n            });\n            throw error;\n        }\n    };\n    const addContactAsync = async (contact)=>{\n        try {\n            dispatch({\n                type: \"SET_LOADING\",\n                payload: true\n            });\n            dispatch({\n                type: \"SET_ERROR\",\n                payload: null\n            });\n            await _data_dataService__WEBPACK_IMPORTED_MODULE_3__.dataService.addContact(contact);\n            // Reload all data to ensure consistency\n            const data = await _data_dataService__WEBPACK_IMPORTED_MODULE_3__.dataService.getAllData();\n            dispatch({\n                type: \"SET_ALL_DATA\",\n                payload: data\n            });\n        } catch (error) {\n            console.error(\"Failed to add contact:\", error);\n            const errorMessage = error instanceof Error ? error.message : \"Unknown error\";\n            dispatch({\n                type: \"SET_ERROR\",\n                payload: \"Failed to add contact: \".concat(errorMessage)\n            });\n            dispatch({\n                type: \"SET_LOADING\",\n                payload: false\n            });\n            throw error;\n        }\n    };\n    const deleteContactAsync = async (id)=>{\n        try {\n            dispatch({\n                type: \"SET_LOADING\",\n                payload: true\n            });\n            dispatch({\n                type: \"SET_ERROR\",\n                payload: null\n            });\n            await _data_dataService__WEBPACK_IMPORTED_MODULE_3__.dataService.deleteContact(id);\n            // Reload all data to ensure consistency\n            const data = await _data_dataService__WEBPACK_IMPORTED_MODULE_3__.dataService.getAllData();\n            dispatch({\n                type: \"SET_ALL_DATA\",\n                payload: data\n            });\n        } catch (error) {\n            console.error(\"Failed to delete contact:\", error);\n            const errorMessage = error instanceof Error ? error.message : \"Unknown error\";\n            dispatch({\n                type: \"SET_ERROR\",\n                payload: \"Failed to delete contact: \".concat(errorMessage)\n            });\n            dispatch({\n                type: \"SET_LOADING\",\n                payload: false\n            });\n            throw error;\n        }\n    };\n    const addSubjectAsync = async (subject)=>{\n        try {\n            dispatch({\n                type: \"SET_LOADING\",\n                payload: true\n            });\n            dispatch({\n                type: \"SET_ERROR\",\n                payload: null\n            });\n            await _data_dataService__WEBPACK_IMPORTED_MODULE_3__.dataService.addSubject(subject);\n            const data = await _data_dataService__WEBPACK_IMPORTED_MODULE_3__.dataService.getAllData();\n            dispatch({\n                type: \"SET_ALL_DATA\",\n                payload: data\n            });\n        } catch (error) {\n            console.error(\"Failed to add subject:\", error);\n            const errorMessage = error instanceof Error ? error.message : \"Unknown error\";\n            dispatch({\n                type: \"SET_ERROR\",\n                payload: \"Failed to add subject: \".concat(errorMessage)\n            });\n            dispatch({\n                type: \"SET_LOADING\",\n                payload: false\n            });\n            throw error;\n        }\n    };\n    const addOrganizationAsync = async (organization)=>{\n        try {\n            dispatch({\n                type: \"SET_LOADING\",\n                payload: true\n            });\n            dispatch({\n                type: \"SET_ERROR\",\n                payload: null\n            });\n            await _data_dataService__WEBPACK_IMPORTED_MODULE_3__.dataService.addOrganization(organization);\n            const data = await _data_dataService__WEBPACK_IMPORTED_MODULE_3__.dataService.getAllData();\n            dispatch({\n                type: \"SET_ALL_DATA\",\n                payload: data\n            });\n        } catch (error) {\n            console.error(\"Failed to add organization:\", error);\n            const errorMessage = error instanceof Error ? error.message : \"Unknown error\";\n            dispatch({\n                type: \"SET_ERROR\",\n                payload: \"Failed to add organization: \".concat(errorMessage)\n            });\n            dispatch({\n                type: \"SET_LOADING\",\n                payload: false\n            });\n            throw error;\n        }\n    };\n    const addOccupationAsync = async (occupation)=>{\n        try {\n            dispatch({\n                type: \"SET_LOADING\",\n                payload: true\n            });\n            dispatch({\n                type: \"SET_ERROR\",\n                payload: null\n            });\n            await _data_dataService__WEBPACK_IMPORTED_MODULE_3__.dataService.addOccupation(occupation);\n            const data = await _data_dataService__WEBPACK_IMPORTED_MODULE_3__.dataService.getAllData();\n            dispatch({\n                type: \"SET_ALL_DATA\",\n                payload: data\n            });\n        } catch (error) {\n            console.error(\"Failed to add occupation:\", error);\n            const errorMessage = error instanceof Error ? error.message : \"Unknown error\";\n            dispatch({\n                type: \"SET_ERROR\",\n                payload: \"Failed to add occupation: \".concat(errorMessage)\n            });\n            dispatch({\n                type: \"SET_LOADING\",\n                payload: false\n            });\n            throw error;\n        }\n    };\n    const addRelationshipAsync = async (relationship)=>{\n        try {\n            dispatch({\n                type: \"SET_LOADING\",\n                payload: true\n            });\n            dispatch({\n                type: \"SET_ERROR\",\n                payload: null\n            });\n            await _data_dataService__WEBPACK_IMPORTED_MODULE_3__.dataService.addRelationship(relationship);\n            const data = await _data_dataService__WEBPACK_IMPORTED_MODULE_3__.dataService.getAllData();\n            dispatch({\n                type: \"SET_ALL_DATA\",\n                payload: data\n            });\n        } catch (error) {\n            console.error(\"Failed to add relationship:\", error);\n            const errorMessage = error instanceof Error ? error.message : \"Unknown error\";\n            dispatch({\n                type: \"SET_ERROR\",\n                payload: \"Failed to add relationship: \".concat(errorMessage)\n            });\n            dispatch({\n                type: \"SET_LOADING\",\n                payload: false\n            });\n            throw error;\n        }\n    };\n    const addSentimentAsync = async (sentiment)=>{\n        try {\n            dispatch({\n                type: \"SET_LOADING\",\n                payload: true\n            });\n            dispatch({\n                type: \"SET_ERROR\",\n                payload: null\n            });\n            await _data_dataService__WEBPACK_IMPORTED_MODULE_3__.dataService.addSentiment(sentiment);\n            const data = await _data_dataService__WEBPACK_IMPORTED_MODULE_3__.dataService.getAllData();\n            dispatch({\n                type: \"SET_ALL_DATA\",\n                payload: data\n            });\n        } catch (error) {\n            console.error(\"Failed to add sentiment:\", error);\n            const errorMessage = error instanceof Error ? error.message : \"Unknown error\";\n            dispatch({\n                type: \"SET_ERROR\",\n                payload: \"Failed to add sentiment: \".concat(errorMessage)\n            });\n            dispatch({\n                type: \"SET_LOADING\",\n                payload: false\n            });\n            throw error;\n        }\n    };\n    const addNoteAsync = async (note)=>{\n        try {\n            dispatch({\n                type: \"SET_LOADING\",\n                payload: true\n            });\n            dispatch({\n                type: \"SET_ERROR\",\n                payload: null\n            });\n            await _data_dataService__WEBPACK_IMPORTED_MODULE_3__.dataService.addNote(note);\n            const data = await _data_dataService__WEBPACK_IMPORTED_MODULE_3__.dataService.getAllData();\n            dispatch({\n                type: \"SET_ALL_DATA\",\n                payload: data\n            });\n        } catch (error) {\n            console.error(\"Failed to add note:\", error);\n            const errorMessage = error instanceof Error ? error.message : \"Unknown error\";\n            dispatch({\n                type: \"SET_ERROR\",\n                payload: \"Failed to add note: \".concat(errorMessage)\n            });\n            dispatch({\n                type: \"SET_LOADING\",\n                payload: false\n            });\n            throw error;\n        }\n    };\n    const resetToSample = async ()=>{\n        try {\n            // Clear localStorage to force fresh sample data\n            localStorage.removeItem(\"circle-data\");\n            dispatch({\n                type: \"SET_LOADING\",\n                payload: true\n            });\n            // Get fresh sample data\n            const sampleData = (0,_data_sampleData__WEBPACK_IMPORTED_MODULE_2__.getSampleData)();\n            dispatch({\n                type: \"SET_ALL_DATA\",\n                payload: sampleData\n            });\n        } catch (error) {\n            console.error(\"Failed to reset to sample data:\", error);\n            dispatch({\n                type: \"SET_ERROR\",\n                payload: \"Failed to reset to sample data\"\n            });\n            dispatch({\n                type: \"SET_LOADING\",\n                payload: false\n            });\n        }\n    };\n    const reloadFromStorage = async ()=>{\n        try {\n            dispatch({\n                type: \"SET_LOADING\",\n                payload: true\n            });\n            const data = await _data_dataService__WEBPACK_IMPORTED_MODULE_3__.dataService.getAllData();\n            dispatch({\n                type: \"SET_ALL_DATA\",\n                payload: data\n            });\n        } catch (error) {\n            console.error(\"Failed to reload from storage:\", error);\n            dispatch({\n                type: \"SET_ERROR\",\n                payload: \"Failed to reload data\"\n            });\n            dispatch({\n                type: \"SET_LOADING\",\n                payload: false\n            });\n        }\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(ContactContext.Provider, {\n        value: {\n            state,\n            addContact,\n            updateContact,\n            deleteContact,\n            addSubject,\n            addOrganization,\n            addOccupation,\n            addRelationship,\n            addNote,\n            resetToSample,\n            reloadFromStorage,\n            // New async methods\n            updateContactAsync,\n            addContactAsync,\n            deleteContactAsync,\n            addSubjectAsync,\n            addOrganizationAsync,\n            addOccupationAsync,\n            addRelationshipAsync,\n            addSentimentAsync,\n            addNoteAsync\n        },\n        children: children\n    }, void 0, false, {\n        fileName: \"C:\\\\Users\\\\silen\\\\OneDrive\\\\Documents\\\\App Development\\\\Circle\\\\contexts\\\\ContactContext.tsx\",\n        lineNumber: 1152,\n        columnNumber: 5\n    }, this);\n}\n_s(ContactProvider, \"GUSXxL/WUElrtHc/X73NyHNRMdw=\");\n_c = ContactProvider;\nfunction useContacts() {\n    _s1();\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(ContactContext);\n    if (!context) {\n        throw new Error(\"useContacts must be used within a ContactProvider\");\n    }\n    return context;\n}\n_s1(useContacts, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"ContactProvider\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./contexts/ContactContext.tsx\n"));

/***/ })

});