/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["app/layout"],{

/***/ "(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Csilen%5C%5COneDrive%5C%5CDocuments%5C%5CApp%20Development%5C%5CCircle%5C%5Capp%5C%5Cglobals.css%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Csilen%5C%5COneDrive%5C%5CDocuments%5C%5CApp%20Development%5C%5CCircle%5C%5Ccontexts%5C%5CContactContext.tsx%22%2C%22ids%22%3A%5B%22ContactProvider%22%5D%7D&server=false!":
/*!****************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Csilen%5C%5COneDrive%5C%5CDocuments%5C%5CApp%20Development%5C%5CCircle%5C%5Capp%5C%5Cglobals.css%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Csilen%5C%5COneDrive%5C%5CDocuments%5C%5CApp%20Development%5C%5CCircle%5C%5Ccontexts%5C%5CContactContext.tsx%22%2C%22ids%22%3A%5B%22ContactProvider%22%5D%7D&server=false! ***!
  \****************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("Promise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./app/globals.css */ \"(app-pages-browser)/./app/globals.css\"));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./contexts/ContactContext.tsx */ \"(app-pages-browser)/./contexts/ContactContext.tsx\"));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL25leHQtZmxpZ2h0LWNsaWVudC1lbnRyeS1sb2FkZXIuanM/bW9kdWxlcz0lN0IlMjJyZXF1ZXN0JTIyJTNBJTIyQyUzQSU1QyU1Q1VzZXJzJTVDJTVDc2lsZW4lNUMlNUNPbmVEcml2ZSU1QyU1Q0RvY3VtZW50cyU1QyU1Q0FwcCUyMERldmVsb3BtZW50JTVDJTVDQ2lyY2xlJTVDJTVDYXBwJTVDJTVDZ2xvYmFscy5jc3MlMjIlMkMlMjJpZHMlMjIlM0ElNUIlNUQlN0QmbW9kdWxlcz0lN0IlMjJyZXF1ZXN0JTIyJTNBJTIyQyUzQSU1QyU1Q1VzZXJzJTVDJTVDc2lsZW4lNUMlNUNPbmVEcml2ZSU1QyU1Q0RvY3VtZW50cyU1QyU1Q0FwcCUyMERldmVsb3BtZW50JTVDJTVDQ2lyY2xlJTVDJTVDY29udGV4dHMlNUMlNUNDb250YWN0Q29udGV4dC50c3glMjIlMkMlMjJpZHMlMjIlM0ElNUIlMjJDb250YWN0UHJvdmlkZXIlMjIlNUQlN0Qmc2VydmVyPWZhbHNlISIsIm1hcHBpbmdzIjoiQUFBQSw0SkFBcUg7QUFDckg7QUFDQSxvTEFBc0siLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLz9jYzIwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCgvKiB3ZWJwYWNrTW9kZTogXCJlYWdlclwiICovIFwiQzpcXFxcVXNlcnNcXFxcc2lsZW5cXFxcT25lRHJpdmVcXFxcRG9jdW1lbnRzXFxcXEFwcCBEZXZlbG9wbWVudFxcXFxDaXJjbGVcXFxcYXBwXFxcXGdsb2JhbHMuY3NzXCIpO1xuO1xuaW1wb3J0KC8qIHdlYnBhY2tNb2RlOiBcImVhZ2VyXCIsIHdlYnBhY2tFeHBvcnRzOiBbXCJDb250YWN0UHJvdmlkZXJcIl0gKi8gXCJDOlxcXFxVc2Vyc1xcXFxzaWxlblxcXFxPbmVEcml2ZVxcXFxEb2N1bWVudHNcXFxcQXBwIERldmVsb3BtZW50XFxcXENpcmNsZVxcXFxjb250ZXh0c1xcXFxDb250YWN0Q29udGV4dC50c3hcIik7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Csilen%5C%5COneDrive%5C%5CDocuments%5C%5CApp%20Development%5C%5CCircle%5C%5Capp%5C%5Cglobals.css%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Csilen%5C%5COneDrive%5C%5CDocuments%5C%5CApp%20Development%5C%5CCircle%5C%5Ccontexts%5C%5CContactContext.tsx%22%2C%22ids%22%3A%5B%22ContactProvider%22%5D%7D&server=false!\n"));

/***/ }),

/***/ "(app-pages-browser)/./app/globals.css":
/*!*************************!*\
  !*** ./app/globals.css ***!
  \*************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (\"f2d465a36f36\");\nif (true) { module.hot.accept() }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2FwcC9nbG9iYWxzLmNzcyIsIm1hcHBpbmdzIjoiO0FBQUEsK0RBQWUsY0FBYztBQUM3QixJQUFJLElBQVUsSUFBSSxpQkFBaUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vYXBwL2dsb2JhbHMuY3NzPzg0ZjAiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgXCJmMmQ0NjVhMzZmMzZcIlxuaWYgKG1vZHVsZS5ob3QpIHsgbW9kdWxlLmhvdC5hY2NlcHQoKSB9XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/globals.css\n"));

/***/ }),

/***/ "(app-pages-browser)/./contexts/ContactContext.tsx":
/*!*************************************!*\
  !*** ./contexts/ContactContext.tsx ***!
  \*************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ContactProvider: function() { return /* binding */ ContactProvider; },\n/* harmony export */   useContacts: function() { return /* binding */ useContacts; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _data_sampleData__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../data/sampleData */ \"(app-pages-browser)/./data/sampleData.ts\");\n/* harmony import */ var _data_dataService__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../data/dataService */ \"(app-pages-browser)/./data/dataService.ts\");\n/* __next_internal_client_entry_do_not_use__ ContactProvider,useContacts auto */ \nvar _s = $RefreshSig$(), _s1 = $RefreshSig$();\n\n\n\n// Helper functions for normalization\nconst normalizeArray = (array)=>{\n    return array.reduce((acc, item)=>{\n        acc[item.id] = item;\n        return acc;\n    }, {});\n};\nconst denormalizeRecord = (record)=>{\n    return Object.values(record);\n};\nconst initialState = {\n    entities: {\n        contacts: {},\n        subjects: {},\n        organizations: {},\n        occupations: {},\n        relationships: {},\n        sentiments: {},\n        notes: {}\n    },\n    contacts: [],\n    subjects: [],\n    organizations: [],\n    occupations: [],\n    relationships: [],\n    sentiments: [],\n    notes: [],\n    isLoading: true,\n    error: null,\n    optimisticUpdates: {\n        contacts: new Set(),\n        subjects: new Set(),\n        organizations: new Set(),\n        occupations: new Set(),\n        relationships: new Set(),\n        sentiments: new Set(),\n        notes: new Set()\n    }\n};\nfunction contactReducer(state, action) {\n    console.log(\"ContactContext: Reducer action:\", action.type);\n    switch(action.type){\n        case \"SET_CONTACTS\":\n            console.log(\"ContactContext: Setting contacts:\", action.payload);\n            return {\n                ...state,\n                contacts: action.payload,\n                isLoading: false\n            };\n        case \"SET_SUBJECTS\":\n            console.log(\"ContactContext: Setting subjects:\", action.payload);\n            return {\n                ...state,\n                subjects: action.payload\n            };\n        case \"SET_ORGANIZATIONS\":\n            console.log(\"ContactContext: Setting organizations:\", action.payload);\n            return {\n                ...state,\n                organizations: action.payload\n            };\n        case \"SET_OCCUPATIONS\":\n            console.log(\"ContactContext: Setting occupations:\", action.payload);\n            return {\n                ...state,\n                occupations: action.payload\n            };\n        case \"SET_RELATIONSHIPS\":\n            console.log(\"ContactContext: Setting relationships:\", action.payload);\n            return {\n                ...state,\n                relationships: action.payload\n            };\n        case \"SET_SENTIMENTS\":\n            console.log(\"ContactContext: Setting sentiments:\", action.payload);\n            return {\n                ...state,\n                sentiments: action.payload\n            };\n        case \"SET_NOTES\":\n            console.log(\"ContactContext: Setting notes:\", action.payload);\n            return {\n                ...state,\n                notes: action.payload\n            };\n        case \"SET_ALL_DATA\":\n            return {\n                ...state,\n                entities: {\n                    contacts: normalizeArray(action.payload.contacts),\n                    subjects: normalizeArray(action.payload.subjects),\n                    organizations: normalizeArray(action.payload.organizations),\n                    occupations: normalizeArray(action.payload.occupations),\n                    relationships: normalizeArray(action.payload.relationships),\n                    sentiments: normalizeArray(action.payload.sentiments),\n                    notes: normalizeArray(action.payload.notes)\n                },\n                contacts: action.payload.contacts,\n                subjects: action.payload.subjects,\n                organizations: action.payload.organizations,\n                occupations: action.payload.occupations,\n                relationships: action.payload.relationships,\n                sentiments: action.payload.sentiments,\n                notes: action.payload.notes,\n                isLoading: false,\n                error: null\n            };\n        case \"UPDATE_CONTACT_SELECTIVE\":\n            return {\n                ...state,\n                entities: {\n                    ...state.entities,\n                    contacts: {\n                        ...state.entities.contacts,\n                        [action.payload.id]: {\n                            ...state.entities.contacts[action.payload.id],\n                            ...action.payload.updates\n                        }\n                    }\n                },\n                optimisticUpdates: {\n                    ...state.optimisticUpdates,\n                    contacts: new Set(state.optimisticUpdates.contacts).add(action.payload.id)\n                }\n            };\n        case \"UPDATE_SUBJECT_SELECTIVE\":\n            return {\n                ...state,\n                entities: {\n                    ...state.entities,\n                    subjects: {\n                        ...state.entities.subjects,\n                        [action.payload.id]: {\n                            ...state.entities.subjects[action.payload.id],\n                            ...action.payload.updates\n                        }\n                    }\n                },\n                optimisticUpdates: {\n                    ...state.optimisticUpdates,\n                    subjects: new Set(state.optimisticUpdates.subjects).add(action.payload.id)\n                }\n            };\n        case \"UPDATE_ORGANIZATION_SELECTIVE\":\n            return {\n                ...state,\n                entities: {\n                    ...state.entities,\n                    organizations: {\n                        ...state.entities.organizations,\n                        [action.payload.id]: {\n                            ...state.entities.organizations[action.payload.id],\n                            ...action.payload.updates\n                        }\n                    }\n                },\n                optimisticUpdates: {\n                    ...state.optimisticUpdates,\n                    organizations: new Set(state.optimisticUpdates.organizations).add(action.payload.id)\n                }\n            };\n        case \"UPDATE_OCCUPATION_SELECTIVE\":\n            return {\n                ...state,\n                entities: {\n                    ...state.entities,\n                    occupations: {\n                        ...state.entities.occupations,\n                        [action.payload.id]: {\n                            ...state.entities.occupations[action.payload.id],\n                            ...action.payload.updates\n                        }\n                    }\n                },\n                optimisticUpdates: {\n                    ...state.optimisticUpdates,\n                    occupations: new Set(state.optimisticUpdates.occupations).add(action.payload.id)\n                }\n            };\n        case \"UPDATE_RELATIONSHIP_SELECTIVE\":\n            return {\n                ...state,\n                entities: {\n                    ...state.entities,\n                    relationships: {\n                        ...state.entities.relationships,\n                        [action.payload.id]: {\n                            ...state.entities.relationships[action.payload.id],\n                            ...action.payload.updates\n                        }\n                    }\n                },\n                optimisticUpdates: {\n                    ...state.optimisticUpdates,\n                    relationships: new Set(state.optimisticUpdates.relationships).add(action.payload.id)\n                }\n            };\n        case \"UPDATE_SENTIMENT_SELECTIVE\":\n            return {\n                ...state,\n                entities: {\n                    ...state.entities,\n                    sentiments: {\n                        ...state.entities.sentiments,\n                        [action.payload.id]: {\n                            ...state.entities.sentiments[action.payload.id],\n                            ...action.payload.updates\n                        }\n                    }\n                },\n                optimisticUpdates: {\n                    ...state.optimisticUpdates,\n                    sentiments: new Set(state.optimisticUpdates.sentiments).add(action.payload.id)\n                }\n            };\n        case \"UPDATE_NOTE_SELECTIVE\":\n            return {\n                ...state,\n                entities: {\n                    ...state.entities,\n                    notes: {\n                        ...state.entities.notes,\n                        [action.payload.id]: {\n                            ...state.entities.notes[action.payload.id],\n                            ...action.payload.updates\n                        }\n                    }\n                },\n                optimisticUpdates: {\n                    ...state.optimisticUpdates,\n                    notes: new Set(state.optimisticUpdates.notes).add(action.payload.id)\n                }\n            };\n        case \"ADD_CONTACT\":\n            return {\n                ...state,\n                entities: {\n                    ...state.entities,\n                    contacts: {\n                        ...state.entities.contacts,\n                        [action.payload.id]: action.payload\n                    }\n                },\n                contacts: [\n                    ...state.contacts,\n                    action.payload\n                ],\n                optimisticUpdates: {\n                    ...state.optimisticUpdates,\n                    contacts: new Set(state.optimisticUpdates.contacts).add(action.payload.id)\n                }\n            };\n        case \"ADD_SUBJECT\":\n            return {\n                ...state,\n                entities: {\n                    ...state.entities,\n                    subjects: {\n                        ...state.entities.subjects,\n                        [action.payload.id]: action.payload\n                    }\n                },\n                subjects: [\n                    ...state.subjects,\n                    action.payload\n                ],\n                optimisticUpdates: {\n                    ...state.optimisticUpdates,\n                    subjects: new Set(state.optimisticUpdates.subjects).add(action.payload.id)\n                }\n            };\n        case \"ADD_ORGANIZATION\":\n            return {\n                ...state,\n                entities: {\n                    ...state.entities,\n                    organizations: {\n                        ...state.entities.organizations,\n                        [action.payload.id]: action.payload\n                    }\n                },\n                organizations: [\n                    ...state.organizations,\n                    action.payload\n                ],\n                optimisticUpdates: {\n                    ...state.optimisticUpdates,\n                    organizations: new Set(state.optimisticUpdates.organizations).add(action.payload.id)\n                }\n            };\n        case \"ADD_OCCUPATION\":\n            return {\n                ...state,\n                entities: {\n                    ...state.entities,\n                    occupations: {\n                        ...state.entities.occupations,\n                        [action.payload.id]: action.payload\n                    }\n                },\n                occupations: [\n                    ...state.occupations,\n                    action.payload\n                ],\n                optimisticUpdates: {\n                    ...state.optimisticUpdates,\n                    occupations: new Set(state.optimisticUpdates.occupations).add(action.payload.id)\n                }\n            };\n        case \"ADD_RELATIONSHIP\":\n            return {\n                ...state,\n                entities: {\n                    ...state.entities,\n                    relationships: {\n                        ...state.entities.relationships,\n                        [action.payload.id]: action.payload\n                    }\n                },\n                relationships: [\n                    ...state.relationships,\n                    action.payload\n                ],\n                optimisticUpdates: {\n                    ...state.optimisticUpdates,\n                    relationships: new Set(state.optimisticUpdates.relationships).add(action.payload.id)\n                }\n            };\n        case \"ADD_SENTIMENT\":\n            return {\n                ...state,\n                entities: {\n                    ...state.entities,\n                    sentiments: {\n                        ...state.entities.sentiments,\n                        [action.payload.id]: action.payload\n                    }\n                },\n                sentiments: [\n                    ...state.sentiments,\n                    action.payload\n                ],\n                optimisticUpdates: {\n                    ...state.optimisticUpdates,\n                    sentiments: new Set(state.optimisticUpdates.sentiments).add(action.payload.id)\n                }\n            };\n        case \"ADD_NOTE\":\n            return {\n                ...state,\n                entities: {\n                    ...state.entities,\n                    notes: {\n                        ...state.entities.notes,\n                        [action.payload.id]: action.payload\n                    }\n                },\n                notes: [\n                    ...state.notes,\n                    action.payload\n                ],\n                optimisticUpdates: {\n                    ...state.optimisticUpdates,\n                    notes: new Set(state.optimisticUpdates.notes).add(action.payload.id)\n                }\n            };\n        case \"DELETE_CONTACT\":\n            const { [action.payload]: deletedContact, ...remainingContacts } = state.entities.contacts;\n            return {\n                ...state,\n                entities: {\n                    ...state.entities,\n                    contacts: remainingContacts\n                },\n                contacts: state.contacts.filter((contact)=>contact.id !== action.payload),\n                optimisticUpdates: {\n                    ...state.optimisticUpdates,\n                    contacts: new Set(state.optimisticUpdates.contacts).add(action.payload)\n                }\n            };\n        case \"DELETE_SUBJECT\":\n            const { [action.payload]: deletedSubject, ...remainingSubjects } = state.entities.subjects;\n            return {\n                ...state,\n                entities: {\n                    ...state.entities,\n                    subjects: remainingSubjects\n                },\n                subjects: state.subjects.filter((subject)=>subject.id !== action.payload),\n                optimisticUpdates: {\n                    ...state.optimisticUpdates,\n                    subjects: new Set(state.optimisticUpdates.subjects).add(action.payload)\n                }\n            };\n        case \"DELETE_ORGANIZATION\":\n            const { [action.payload]: deletedOrg, ...remainingOrgs } = state.entities.organizations;\n            return {\n                ...state,\n                entities: {\n                    ...state.entities,\n                    organizations: remainingOrgs\n                },\n                organizations: state.organizations.filter((org)=>org.id !== action.payload),\n                optimisticUpdates: {\n                    ...state.optimisticUpdates,\n                    organizations: new Set(state.optimisticUpdates.organizations).add(action.payload)\n                }\n            };\n        case \"DELETE_OCCUPATION\":\n            const { [action.payload]: deletedOcc, ...remainingOccs } = state.entities.occupations;\n            return {\n                ...state,\n                entities: {\n                    ...state.entities,\n                    occupations: remainingOccs\n                },\n                occupations: state.occupations.filter((occ)=>occ.id !== action.payload),\n                optimisticUpdates: {\n                    ...state.optimisticUpdates,\n                    occupations: new Set(state.optimisticUpdates.occupations).add(action.payload)\n                }\n            };\n        case \"DELETE_RELATIONSHIP\":\n            const { [action.payload]: deletedRel, ...remainingRels } = state.entities.relationships;\n            return {\n                ...state,\n                entities: {\n                    ...state.entities,\n                    relationships: remainingRels\n                },\n                relationships: state.relationships.filter((rel)=>rel.id !== action.payload),\n                optimisticUpdates: {\n                    ...state.optimisticUpdates,\n                    relationships: new Set(state.optimisticUpdates.relationships).add(action.payload)\n                }\n            };\n        case \"DELETE_SENTIMENT\":\n            const { [action.payload]: deletedSent, ...remainingSents } = state.entities.sentiments;\n            return {\n                ...state,\n                entities: {\n                    ...state.entities,\n                    sentiments: remainingSents\n                },\n                sentiments: state.sentiments.filter((sent)=>sent.id !== action.payload),\n                optimisticUpdates: {\n                    ...state.optimisticUpdates,\n                    sentiments: new Set(state.optimisticUpdates.sentiments).add(action.payload)\n                }\n            };\n        case \"DELETE_NOTE\":\n            const { [action.payload]: deletedNote, ...remainingNotes } = state.entities.notes;\n            return {\n                ...state,\n                entities: {\n                    ...state.entities,\n                    notes: remainingNotes\n                },\n                notes: state.notes.filter((note)=>note.id !== action.payload),\n                optimisticUpdates: {\n                    ...state.optimisticUpdates,\n                    notes: new Set(state.optimisticUpdates.notes).add(action.payload)\n                }\n            };\n        case \"OPTIMISTIC_UPDATE_CONTACT\":\n            return {\n                ...state,\n                entities: {\n                    ...state.entities,\n                    contacts: {\n                        ...state.entities.contacts,\n                        [action.payload.id]: {\n                            ...state.entities.contacts[action.payload.id],\n                            ...action.payload.updates\n                        }\n                    }\n                },\n                optimisticUpdates: {\n                    ...state.optimisticUpdates,\n                    contacts: new Set(state.optimisticUpdates.contacts).add(action.payload.id)\n                }\n            };\n        case \"OPTIMISTIC_ADD_CONTACT\":\n            return {\n                ...state,\n                entities: {\n                    ...state.entities,\n                    contacts: {\n                        ...state.entities.contacts,\n                        [action.payload.id]: action.payload\n                    }\n                },\n                contacts: [\n                    ...state.contacts,\n                    action.payload\n                ],\n                optimisticUpdates: {\n                    ...state.optimisticUpdates,\n                    contacts: new Set(state.optimisticUpdates.contacts).add(action.payload.id)\n                }\n            };\n        case \"OPTIMISTIC_DELETE_CONTACT\":\n            const { [action.payload]: deletedContactOpt, ...remainingContactsOpt } = state.entities.contacts;\n            return {\n                ...state,\n                entities: {\n                    ...state.entities,\n                    contacts: remainingContactsOpt\n                },\n                contacts: state.contacts.filter((contact)=>contact.id !== action.payload),\n                optimisticUpdates: {\n                    ...state.optimisticUpdates,\n                    contacts: new Set(state.optimisticUpdates.contacts).add(action.payload)\n                }\n            };\n        case \"OPTIMISTIC_UPDATE_NOTE\":\n            return {\n                ...state,\n                entities: {\n                    ...state.entities,\n                    notes: {\n                        ...state.entities.notes,\n                        [action.payload.id]: {\n                            ...state.entities.notes[action.payload.id],\n                            ...action.payload.updates\n                        }\n                    }\n                },\n                optimisticUpdates: {\n                    ...state.optimisticUpdates,\n                    notes: new Set(state.optimisticUpdates.notes).add(action.payload.id)\n                }\n            };\n        case \"OPTIMISTIC_ADD_NOTE\":\n            return {\n                ...state,\n                entities: {\n                    ...state.entities,\n                    notes: {\n                        ...state.entities.notes,\n                        [action.payload.id]: action.payload\n                    }\n                },\n                notes: [\n                    ...state.notes,\n                    action.payload\n                ],\n                optimisticUpdates: {\n                    ...state.optimisticUpdates,\n                    notes: new Set(state.optimisticUpdates.notes).add(action.payload.id)\n                }\n            };\n        case \"OPTIMISTIC_DELETE_NOTE\":\n            const { [action.payload]: deletedNoteOpt, ...remainingNotesOpt } = state.entities.notes;\n            return {\n                ...state,\n                entities: {\n                    ...state.entities,\n                    notes: remainingNotesOpt\n                },\n                notes: state.notes.filter((note)=>note.id !== action.payload),\n                optimisticUpdates: {\n                    ...state.optimisticUpdates,\n                    notes: new Set(state.optimisticUpdates.notes).add(action.payload)\n                }\n            };\n        case \"ROLLBACK_OPTIMISTIC_UPDATE\":\n            return {\n                ...state,\n                entities: {\n                    ...state.entities,\n                    [action.payload.entityType]: {\n                        ...state.entities[action.payload.entityType],\n                        [action.payload.id]: state.entities[action.payload.entityType][action.payload.id]\n                    }\n                },\n                optimisticUpdates: {\n                    ...state.optimisticUpdates,\n                    [action.payload.entityType]: new Set(state.optimisticUpdates[action.payload.entityType]).delete(action.payload.id)\n                }\n            };\n        case \"ROLLBACK_ALL_OPTIMISTIC_UPDATES\":\n            return {\n                ...state,\n                optimisticUpdates: {\n                    contacts: new Set(),\n                    subjects: new Set(),\n                    organizations: new Set(),\n                    occupations: new Set(),\n                    relationships: new Set(),\n                    sentiments: new Set(),\n                    notes: new Set()\n                }\n            };\n        case \"SET_LOADING\":\n            return {\n                ...state,\n                isLoading: action.payload\n            };\n        case \"SET_ERROR\":\n            return {\n                ...state,\n                error: action.payload\n            };\n        case \"RESET_TO_SAMPLE\":\n            const sampleData = (0,_data_sampleData__WEBPACK_IMPORTED_MODULE_2__.getSampleData)();\n            console.log(\"ContactContext: Resetting to sample data:\", sampleData);\n            return {\n                ...state,\n                entities: {\n                    contacts: normalizeArray(sampleData.contacts),\n                    subjects: normalizeArray(sampleData.subjects),\n                    organizations: normalizeArray(sampleData.organizations),\n                    occupations: normalizeArray(sampleData.occupations),\n                    relationships: normalizeArray(sampleData.relationships),\n                    sentiments: normalizeArray(sampleData.sentiments),\n                    notes: normalizeArray(sampleData.notes)\n                },\n                contacts: sampleData.contacts,\n                subjects: sampleData.subjects,\n                organizations: sampleData.organizations,\n                occupations: sampleData.occupations,\n                relationships: sampleData.relationships,\n                sentiments: sampleData.sentiments,\n                notes: sampleData.notes,\n                isLoading: false\n            };\n        case \"RELOAD_FROM_STORAGE\":\n            const savedData = localStorage.getItem(\"circle-data\");\n            if (savedData) {\n                try {\n                    const data = JSON.parse(savedData);\n                    console.log(\"ContactContext: Reloading from localStorage:\", data);\n                    // Check if the data format is valid (has proper subjects/relationships arrays)\n                    const isValidData = data.subjects && Array.isArray(data.subjects) && data.relationships && Array.isArray(data.relationships) && data.contacts && Array.isArray(data.contacts);\n                    if (!isValidData) {\n                        console.warn(\"ContactContext: Invalid data format detected, clearing localStorage\");\n                        localStorage.removeItem(\"circle-data\");\n                        throw new Error(\"Invalid data format\");\n                    }\n                    // Return new state with reloaded data\n                    const reconstructedContacts = data.contacts.map((contact)=>({\n                            ...contact,\n                            subjects: (contact.subjects || []).map((subjectId)=>data.subjects.find((s)=>s.id === subjectId)).filter(Boolean),\n                            relationships: (contact.relationships || []).map((relationshipId)=>data.relationships.find((r)=>r.id === relationshipId)).filter(Boolean)\n                        }));\n                    return {\n                        ...state,\n                        entities: {\n                            contacts: normalizeArray(reconstructedContacts),\n                            subjects: normalizeArray(data.subjects),\n                            organizations: normalizeArray(data.organizations || []),\n                            occupations: normalizeArray(data.occupations || []),\n                            relationships: normalizeArray(data.relationships),\n                            sentiments: normalizeArray(data.sentiments || []),\n                            notes: normalizeArray(data.notes || [])\n                        },\n                        contacts: reconstructedContacts,\n                        subjects: data.subjects,\n                        organizations: data.organizations || [],\n                        occupations: data.occupations || [],\n                        relationships: data.relationships,\n                        notes: data.notes || [],\n                        isLoading: false\n                    };\n                } catch (error) {\n                    console.error(\"Failed to parse saved data:\", error);\n                    // Clear corrupted data and use fresh sample data\n                    localStorage.removeItem(\"circle-data\");\n                    const sampleData = (0,_data_sampleData__WEBPACK_IMPORTED_MODULE_2__.getSampleData)();\n                    return {\n                        ...state,\n                        entities: {\n                            contacts: normalizeArray(sampleData.contacts),\n                            subjects: normalizeArray(sampleData.subjects),\n                            organizations: normalizeArray(sampleData.organizations),\n                            occupations: normalizeArray(sampleData.occupations),\n                            relationships: normalizeArray(sampleData.relationships),\n                            sentiments: normalizeArray(sampleData.sentiments),\n                            notes: normalizeArray(sampleData.notes)\n                        },\n                        contacts: sampleData.contacts,\n                        subjects: sampleData.subjects,\n                        organizations: sampleData.organizations,\n                        occupations: sampleData.occupations,\n                        relationships: sampleData.relationships,\n                        notes: sampleData.notes,\n                        isLoading: false\n                    };\n                }\n            } else {\n                const sampleData = (0,_data_sampleData__WEBPACK_IMPORTED_MODULE_2__.getSampleData)();\n                return {\n                    ...state,\n                    entities: {\n                        contacts: normalizeArray(sampleData.contacts),\n                        subjects: normalizeArray(sampleData.subjects),\n                        organizations: normalizeArray(sampleData.organizations),\n                        occupations: normalizeArray(sampleData.occupations),\n                        relationships: normalizeArray(sampleData.relationships),\n                        sentiments: normalizeArray(sampleData.sentiments),\n                        notes: normalizeArray(sampleData.notes)\n                    },\n                    contacts: sampleData.contacts,\n                    subjects: sampleData.subjects,\n                    organizations: sampleData.organizations,\n                    occupations: sampleData.occupations,\n                    relationships: sampleData.relationships,\n                    notes: sampleData.notes,\n                    isLoading: false\n                };\n            }\n        default:\n            return state;\n    }\n}\nconst ContactContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(null);\nfunction ContactProvider(param) {\n    let { children } = param;\n    _s();\n    const [state, dispatch] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useReducer)(contactReducer, initialState);\n    // Load data using DataService on mount\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        console.log(\"ContactContext: Starting data load using DataService...\");\n        const loadData = async ()=>{\n            try {\n                dispatch({\n                    type: \"SET_LOADING\",\n                    payload: true\n                });\n                dispatch({\n                    type: \"SET_ERROR\",\n                    payload: null\n                });\n                const data = await _data_dataService__WEBPACK_IMPORTED_MODULE_3__.dataService.getAllData();\n                console.log(\"ContactContext: Loaded data from DataService:\", data);\n                dispatch({\n                    type: \"SET_ALL_DATA\",\n                    payload: data\n                });\n            } catch (error) {\n                console.error(\"ContactContext: Failed to load data:\", error);\n                dispatch({\n                    type: \"SET_ERROR\",\n                    payload: \"Failed to load data\"\n                });\n                dispatch({\n                    type: \"SET_LOADING\",\n                    payload: false\n                });\n                // Fallback to sample data\n                try {\n                    const sampleData = (0,_data_sampleData__WEBPACK_IMPORTED_MODULE_2__.getSampleData)();\n                    console.log(\"ContactContext: Using fallback sample data:\", sampleData);\n                    dispatch({\n                        type: \"SET_ALL_DATA\",\n                        payload: sampleData\n                    });\n                } catch (fallbackError) {\n                    console.error(\"ContactContext: Even sample data failed:\", fallbackError);\n                    dispatch({\n                        type: \"SET_ERROR\",\n                        payload: \"Failed to load any data\"\n                    });\n                    dispatch({\n                        type: \"SET_LOADING\",\n                        payload: false\n                    });\n                }\n            }\n        };\n        loadData();\n    }, []);\n    // Save data to localStorage whenever state changes\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!state.isLoading) {\n            // Convert contacts to save format with subject/relationship IDs instead of full objects\n            const contactsForSave = state.contacts.map((contact)=>({\n                    ...contact,\n                    occupation: contact.occupationId || null,\n                    organization: contact.organizationId || null,\n                    subjects: contact.subjectIds || [],\n                    relationships: contact.relationshipIds || []\n                }));\n            localStorage.setItem(\"circle-data\", JSON.stringify({\n                contacts: contactsForSave,\n                subjects: state.subjects,\n                organizations: state.organizations,\n                occupations: state.occupations,\n                relationships: state.relationships,\n                sentiments: state.sentiments,\n                notes: state.notes\n            }));\n        }\n    }, [\n        state.contacts,\n        state.subjects,\n        state.organizations,\n        state.occupations,\n        state.relationships,\n        state.sentiments,\n        state.notes,\n        state.isLoading\n    ]);\n    // Legacy synchronous methods (for backward compatibility)\n    const addContact = (contact)=>{\n        const newContact = {\n            ...contact,\n            id: Date.now()\n        };\n        dispatch({\n            type: \"ADD_CONTACT\",\n            payload: newContact\n        });\n    };\n    const updateContact = (id, updates)=>{\n        dispatch({\n            type: \"UPDATE_CONTACT_SELECTIVE\",\n            payload: {\n                id,\n                updates\n            }\n        });\n    };\n    const deleteContact = (id)=>{\n        dispatch({\n            type: \"DELETE_CONTACT\",\n            payload: id\n        });\n    };\n    const addSubject = (subject)=>{\n        const newSubject = {\n            ...subject,\n            id: Date.now()\n        };\n        dispatch({\n            type: \"ADD_SUBJECT\",\n            payload: newSubject\n        });\n    };\n    const addOrganization = (organization)=>{\n        const newOrganization = {\n            ...organization,\n            id: Date.now()\n        };\n        dispatch({\n            type: \"ADD_ORGANIZATION\",\n            payload: newOrganization\n        });\n    };\n    const addOccupation = (occupation)=>{\n        const newOccupation = {\n            ...occupation,\n            id: Date.now()\n        };\n        dispatch({\n            type: \"ADD_OCCUPATION\",\n            payload: newOccupation\n        });\n    };\n    const addRelationship = (relationship)=>{\n        const newRelationship = {\n            ...relationship,\n            id: Date.now()\n        };\n        dispatch({\n            type: \"ADD_RELATIONSHIP\",\n            payload: newRelationship\n        });\n    };\n    const addNote = (note)=>{\n        const newNote = {\n            ...note,\n            id: Date.now(),\n            createdAt: new Date().toISOString()\n        };\n        dispatch({\n            type: \"ADD_NOTE\",\n            payload: newNote\n        });\n    };\n    // Enhanced async methods with optimistic updates and selective updates\n    const updateContactAsync = async (id, updates)=>{\n        try {\n            // Optimistic update\n            dispatch({\n                type: \"OPTIMISTIC_UPDATE_CONTACT\",\n                payload: {\n                    id,\n                    updates\n                }\n            });\n            // Update via DataService\n            await _data_dataService__WEBPACK_IMPORTED_MODULE_3__.dataService.updateContact(id, updates);\n            // Confirm the update (remove from optimistic updates)\n            dispatch({\n                type: \"ROLLBACK_OPTIMISTIC_UPDATE\",\n                payload: {\n                    entityType: \"contacts\",\n                    id\n                }\n            });\n        } catch (error) {\n            console.error(\"Failed to update contact:\", error);\n            // Rollback optimistic update on error\n            dispatch({\n                type: \"ROLLBACK_OPTIMISTIC_UPDATE\",\n                payload: {\n                    entityType: \"contacts\",\n                    id\n                }\n            });\n            const errorMessage = error instanceof Error ? error.message : \"Unknown error\";\n            dispatch({\n                type: \"SET_ERROR\",\n                payload: \"Failed to update contact: \".concat(errorMessage)\n            });\n            throw error;\n        }\n    };\n    const addContactAsync = async (contact)=>{\n        try {\n            // Optimistic add\n            const tempId = Date.now();\n            const optimisticContact = {\n                ...contact,\n                id: tempId\n            };\n            dispatch({\n                type: \"OPTIMISTIC_ADD_CONTACT\",\n                payload: optimisticContact\n            });\n            // Add via DataService\n            const newContact = await _data_dataService__WEBPACK_IMPORTED_MODULE_3__.dataService.addContact(contact);\n            // Replace optimistic contact with real one\n            dispatch({\n                type: \"ROLLBACK_OPTIMISTIC_UPDATE\",\n                payload: {\n                    entityType: \"contacts\",\n                    id: tempId\n                }\n            });\n            dispatch({\n                type: \"ADD_CONTACT\",\n                payload: newContact\n            });\n        } catch (error) {\n            console.error(\"Failed to add contact:\", error);\n            // Rollback optimistic add on error\n            dispatch({\n                type: \"ROLLBACK_OPTIMISTIC_UPDATE\",\n                payload: {\n                    entityType: \"contacts\",\n                    id: Date.now()\n                }\n            });\n            const errorMessage = error instanceof Error ? error.message : \"Unknown error\";\n            dispatch({\n                type: \"SET_ERROR\",\n                payload: \"Failed to add contact: \".concat(errorMessage)\n            });\n            throw error;\n        }\n    };\n    const deleteContactAsync = async (id)=>{\n        // Store the contact for potential rollback\n        const contactToDelete = state.entities.contacts[id];\n        try {\n            // Optimistic delete\n            dispatch({\n                type: \"OPTIMISTIC_DELETE_CONTACT\",\n                payload: id\n            });\n            // Delete via DataService\n            await _data_dataService__WEBPACK_IMPORTED_MODULE_3__.dataService.deleteContact(id);\n            // Confirm the delete (remove from optimistic updates)\n            dispatch({\n                type: \"ROLLBACK_OPTIMISTIC_UPDATE\",\n                payload: {\n                    entityType: \"contacts\",\n                    id\n                }\n            });\n        } catch (error) {\n            console.error(\"Failed to delete contact:\", error);\n            // Rollback optimistic delete on error\n            if (contactToDelete) {\n                dispatch({\n                    type: \"ADD_CONTACT\",\n                    payload: contactToDelete\n                });\n            }\n            dispatch({\n                type: \"ROLLBACK_OPTIMISTIC_UPDATE\",\n                payload: {\n                    entityType: \"contacts\",\n                    id\n                }\n            });\n            const errorMessage = error instanceof Error ? error.message : \"Unknown error\";\n            dispatch({\n                type: \"SET_ERROR\",\n                payload: \"Failed to delete contact: \".concat(errorMessage)\n            });\n            throw error;\n        }\n    };\n    const addSubjectAsync = async (subject)=>{\n        try {\n            dispatch({\n                type: \"SET_LOADING\",\n                payload: true\n            });\n            dispatch({\n                type: \"SET_ERROR\",\n                payload: null\n            });\n            await _data_dataService__WEBPACK_IMPORTED_MODULE_3__.dataService.addSubject(subject);\n            const data = await _data_dataService__WEBPACK_IMPORTED_MODULE_3__.dataService.getAllData();\n            dispatch({\n                type: \"SET_ALL_DATA\",\n                payload: data\n            });\n        } catch (error) {\n            console.error(\"Failed to add subject:\", error);\n            const errorMessage = error instanceof Error ? error.message : \"Unknown error\";\n            dispatch({\n                type: \"SET_ERROR\",\n                payload: \"Failed to add subject: \".concat(errorMessage)\n            });\n            dispatch({\n                type: \"SET_LOADING\",\n                payload: false\n            });\n            throw error;\n        }\n    };\n    const addOrganizationAsync = async (organization)=>{\n        try {\n            dispatch({\n                type: \"SET_LOADING\",\n                payload: true\n            });\n            dispatch({\n                type: \"SET_ERROR\",\n                payload: null\n            });\n            await _data_dataService__WEBPACK_IMPORTED_MODULE_3__.dataService.addOrganization(organization);\n            const data = await _data_dataService__WEBPACK_IMPORTED_MODULE_3__.dataService.getAllData();\n            dispatch({\n                type: \"SET_ALL_DATA\",\n                payload: data\n            });\n        } catch (error) {\n            console.error(\"Failed to add organization:\", error);\n            const errorMessage = error instanceof Error ? error.message : \"Unknown error\";\n            dispatch({\n                type: \"SET_ERROR\",\n                payload: \"Failed to add organization: \".concat(errorMessage)\n            });\n            dispatch({\n                type: \"SET_LOADING\",\n                payload: false\n            });\n            throw error;\n        }\n    };\n    const addOccupationAsync = async (occupation)=>{\n        try {\n            dispatch({\n                type: \"SET_LOADING\",\n                payload: true\n            });\n            dispatch({\n                type: \"SET_ERROR\",\n                payload: null\n            });\n            await _data_dataService__WEBPACK_IMPORTED_MODULE_3__.dataService.addOccupation(occupation);\n            const data = await _data_dataService__WEBPACK_IMPORTED_MODULE_3__.dataService.getAllData();\n            dispatch({\n                type: \"SET_ALL_DATA\",\n                payload: data\n            });\n        } catch (error) {\n            console.error(\"Failed to add occupation:\", error);\n            const errorMessage = error instanceof Error ? error.message : \"Unknown error\";\n            dispatch({\n                type: \"SET_ERROR\",\n                payload: \"Failed to add occupation: \".concat(errorMessage)\n            });\n            dispatch({\n                type: \"SET_LOADING\",\n                payload: false\n            });\n            throw error;\n        }\n    };\n    const addRelationshipAsync = async (relationship)=>{\n        try {\n            dispatch({\n                type: \"SET_LOADING\",\n                payload: true\n            });\n            dispatch({\n                type: \"SET_ERROR\",\n                payload: null\n            });\n            await _data_dataService__WEBPACK_IMPORTED_MODULE_3__.dataService.addRelationship(relationship);\n            const data = await _data_dataService__WEBPACK_IMPORTED_MODULE_3__.dataService.getAllData();\n            dispatch({\n                type: \"SET_ALL_DATA\",\n                payload: data\n            });\n        } catch (error) {\n            console.error(\"Failed to add relationship:\", error);\n            const errorMessage = error instanceof Error ? error.message : \"Unknown error\";\n            dispatch({\n                type: \"SET_ERROR\",\n                payload: \"Failed to add relationship: \".concat(errorMessage)\n            });\n            dispatch({\n                type: \"SET_LOADING\",\n                payload: false\n            });\n            throw error;\n        }\n    };\n    const addSentimentAsync = async (sentiment)=>{\n        try {\n            dispatch({\n                type: \"SET_LOADING\",\n                payload: true\n            });\n            dispatch({\n                type: \"SET_ERROR\",\n                payload: null\n            });\n            await _data_dataService__WEBPACK_IMPORTED_MODULE_3__.dataService.addSentiment(sentiment);\n            const data = await _data_dataService__WEBPACK_IMPORTED_MODULE_3__.dataService.getAllData();\n            dispatch({\n                type: \"SET_ALL_DATA\",\n                payload: data\n            });\n        } catch (error) {\n            console.error(\"Failed to add sentiment:\", error);\n            const errorMessage = error instanceof Error ? error.message : \"Unknown error\";\n            dispatch({\n                type: \"SET_ERROR\",\n                payload: \"Failed to add sentiment: \".concat(errorMessage)\n            });\n            dispatch({\n                type: \"SET_LOADING\",\n                payload: false\n            });\n            throw error;\n        }\n    };\n    const addNoteAsync = async (note)=>{\n        try {\n            // Optimistic add\n            const tempId = Date.now();\n            const optimisticNote = {\n                ...note,\n                id: tempId,\n                createdAt: new Date().toISOString()\n            };\n            dispatch({\n                type: \"OPTIMISTIC_ADD_NOTE\",\n                payload: optimisticNote\n            });\n            // Add via DataService\n            const newNote = await _data_dataService__WEBPACK_IMPORTED_MODULE_3__.dataService.addNote(note);\n            // Replace optimistic note with real one\n            dispatch({\n                type: \"ROLLBACK_OPTIMISTIC_UPDATE\",\n                payload: {\n                    entityType: \"notes\",\n                    id: tempId\n                }\n            });\n            dispatch({\n                type: \"ADD_NOTE\",\n                payload: newNote\n            });\n        } catch (error) {\n            console.error(\"Failed to add note:\", error);\n            // Rollback optimistic add on error\n            dispatch({\n                type: \"ROLLBACK_OPTIMISTIC_UPDATE\",\n                payload: {\n                    entityType: \"notes\",\n                    id: Date.now()\n                }\n            });\n            const errorMessage = error instanceof Error ? error.message : \"Unknown error\";\n            dispatch({\n                type: \"SET_ERROR\",\n                payload: \"Failed to add note: \".concat(errorMessage)\n            });\n            throw error;\n        }\n    };\n    const resetToSample = async ()=>{\n        try {\n            // Clear localStorage to force fresh sample data\n            localStorage.removeItem(\"circle-data\");\n            dispatch({\n                type: \"SET_LOADING\",\n                payload: true\n            });\n            // Get fresh sample data\n            const sampleData = (0,_data_sampleData__WEBPACK_IMPORTED_MODULE_2__.getSampleData)();\n            dispatch({\n                type: \"SET_ALL_DATA\",\n                payload: sampleData\n            });\n        } catch (error) {\n            console.error(\"Failed to reset to sample data:\", error);\n            dispatch({\n                type: \"SET_ERROR\",\n                payload: \"Failed to reset to sample data\"\n            });\n            dispatch({\n                type: \"SET_LOADING\",\n                payload: false\n            });\n        }\n    };\n    const reloadFromStorage = async ()=>{\n        try {\n            dispatch({\n                type: \"SET_LOADING\",\n                payload: true\n            });\n            const data = await _data_dataService__WEBPACK_IMPORTED_MODULE_3__.dataService.getAllData();\n            dispatch({\n                type: \"SET_ALL_DATA\",\n                payload: data\n            });\n        } catch (error) {\n            console.error(\"Failed to reload from storage:\", error);\n            dispatch({\n                type: \"SET_ERROR\",\n                payload: \"Failed to reload data\"\n            });\n            dispatch({\n                type: \"SET_LOADING\",\n                payload: false\n            });\n        }\n    };\n    // Utility functions for working with normalized state\n    const getContactById = (id)=>{\n        return state.entities.contacts[id];\n    };\n    const getSubjectById = (id)=>{\n        return state.entities.subjects[id];\n    };\n    const getOrganizationById = (id)=>{\n        return state.entities.organizations[id];\n    };\n    const getOccupationById = (id)=>{\n        return state.entities.occupations[id];\n    };\n    const getRelationshipById = (id)=>{\n        return state.entities.relationships[id];\n    };\n    const getSentimentById = (id)=>{\n        return state.entities.sentiments[id];\n    };\n    const getNoteById = (id)=>{\n        return state.entities.notes[id];\n    };\n    const getContactsBySubject = (subjectId)=>{\n        return state.contacts.filter((contact)=>contact.subjectIds.includes(subjectId));\n    };\n    const getContactsByRelationship = (relationshipId)=>{\n        return state.contacts.filter((contact)=>contact.relationshipIds.includes(relationshipId));\n    };\n    const getNotesByContact = (contactId)=>{\n        return state.notes.filter((note)=>note.contactIds.includes(contactId));\n    };\n    const isOptimisticallyUpdated = (entityType, id)=>{\n        return state.optimisticUpdates[entityType].has(id);\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(ContactContext.Provider, {\n        value: {\n            state,\n            addContact,\n            updateContact,\n            deleteContact,\n            addSubject,\n            addOrganization,\n            addOccupation,\n            addRelationship,\n            addNote,\n            resetToSample,\n            reloadFromStorage,\n            // Enhanced async methods with optimistic updates\n            updateContactAsync,\n            addContactAsync,\n            deleteContactAsync,\n            addSubjectAsync,\n            addOrganizationAsync,\n            addOccupationAsync,\n            addRelationshipAsync,\n            addSentimentAsync,\n            addNoteAsync,\n            // Utility functions for normalized state\n            getContactById,\n            getSubjectById,\n            getOrganizationById,\n            getOccupationById,\n            getRelationshipById,\n            getSentimentById,\n            getNoteById,\n            getContactsBySubject,\n            getContactsByRelationship,\n            getNotesByContact,\n            isOptimisticallyUpdated\n        },\n        children: children\n    }, void 0, false, {\n        fileName: \"C:\\\\Users\\\\silen\\\\OneDrive\\\\Documents\\\\App Development\\\\Circle\\\\contexts\\\\ContactContext.tsx\",\n        lineNumber: 1226,\n        columnNumber: 5\n    }, this);\n}\n_s(ContactProvider, \"GUSXxL/WUElrtHc/X73NyHNRMdw=\");\n_c = ContactProvider;\nfunction useContacts() {\n    _s1();\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(ContactContext);\n    if (!context) {\n        throw new Error(\"useContacts must be used within a ContactProvider\");\n    }\n    return context;\n}\n_s1(useContacts, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"ContactProvider\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./contexts/ContactContext.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./data/dataService.ts":
/*!*****************************!*\
  !*** ./data/dataService.ts ***!
  \*****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MockDataService: function() { return /* binding */ MockDataService; },\n/* harmony export */   dataService: function() { return /* binding */ dataService; }\n/* harmony export */ });\n/* harmony import */ var _sampleData__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sampleData */ \"(app-pages-browser)/./data/sampleData.ts\");\n\n// Mock implementation that simulates database operations\nclass MockDataService {\n    loadData() {\n        const savedData = localStorage.getItem(\"circle-data\");\n        if (savedData) {\n            try {\n                const parsed = JSON.parse(savedData);\n                // Validate data structure\n                if (this.isValidData(parsed)) {\n                    return parsed;\n                } else {\n                    console.warn(\"MockDataService: Invalid data format, using sample data\");\n                    localStorage.removeItem(\"circle-data\");\n                }\n            } catch (error) {\n                console.error(\"MockDataService: Failed to parse saved data, using sample data\");\n                localStorage.removeItem(\"circle-data\");\n            }\n        }\n        return (0,_sampleData__WEBPACK_IMPORTED_MODULE_0__.getSampleData)();\n    }\n    isValidData(data) {\n        return data.subjects && Array.isArray(data.subjects) && data.relationships && Array.isArray(data.relationships) && data.contacts && Array.isArray(data.contacts) && data.organizations && Array.isArray(data.organizations) && data.occupations && Array.isArray(data.occupations) && data.sentiments && Array.isArray(data.sentiments) && data.notes && Array.isArray(data.notes);\n    }\n    saveData() {\n        localStorage.setItem(\"circle-data\", JSON.stringify(this.data));\n    }\n    simulateDelay() {\n        // Simulate network delay (50-200ms)\n        const delay = Math.random() * 150 + 50;\n        return new Promise((resolve)=>setTimeout(resolve, delay));\n    }\n    async updateContact(id, updates) {\n        await this.simulateDelay();\n        const contactIndex = this.data.contacts.findIndex((c)=>c.id === id);\n        if (contactIndex === -1) {\n            throw new Error(\"Contact with id \".concat(id, \" not found\"));\n        }\n        // Update the contact\n        this.data.contacts[contactIndex] = {\n            ...this.data.contacts[contactIndex],\n            ...updates\n        };\n        this.saveData();\n        return this.data.contacts[contactIndex];\n    }\n    async addContact(contact) {\n        await this.simulateDelay();\n        const newContact = {\n            ...contact,\n            id: Date.now() // Simple ID generation for mock\n        };\n        this.data.contacts.push(newContact);\n        this.saveData();\n        return newContact;\n    }\n    async deleteContact(id) {\n        await this.simulateDelay();\n        const initialLength = this.data.contacts.length;\n        this.data.contacts = this.data.contacts.filter((c)=>c.id !== id);\n        if (this.data.contacts.length === initialLength) {\n            throw new Error(\"Contact with id \".concat(id, \" not found\"));\n        }\n        this.saveData();\n    }\n    async addSubject(subject) {\n        await this.simulateDelay();\n        const newSubject = {\n            ...subject,\n            id: Date.now()\n        };\n        this.data.subjects.push(newSubject);\n        this.saveData();\n        return newSubject;\n    }\n    async addOrganization(organization) {\n        await this.simulateDelay();\n        const newOrganization = {\n            ...organization,\n            id: Date.now()\n        };\n        this.data.organizations.push(newOrganization);\n        this.saveData();\n        return newOrganization;\n    }\n    async addOccupation(occupation) {\n        await this.simulateDelay();\n        const newOccupation = {\n            ...occupation,\n            id: Date.now()\n        };\n        this.data.occupations.push(newOccupation);\n        this.saveData();\n        return newOccupation;\n    }\n    async addRelationship(relationship) {\n        await this.simulateDelay();\n        const newRelationship = {\n            ...relationship,\n            id: Date.now()\n        };\n        this.data.relationships.push(newRelationship);\n        this.saveData();\n        return newRelationship;\n    }\n    async addSentiment(sentiment) {\n        await this.simulateDelay();\n        const newSentiment = {\n            ...sentiment,\n            id: Date.now()\n        };\n        this.data.sentiments.push(newSentiment);\n        this.saveData();\n        return newSentiment;\n    }\n    async addNote(note) {\n        await this.simulateDelay();\n        const newNote = {\n            ...note,\n            id: Date.now(),\n            createdAt: new Date().toISOString()\n        };\n        this.data.notes.push(newNote);\n        this.saveData();\n        return newNote;\n    }\n    async getAllData() {\n        await this.simulateDelay();\n        // Reload from localStorage to get latest data\n        this.data = this.loadData();\n        // Return a copy to prevent direct mutations\n        return {\n            contacts: [\n                ...this.data.contacts\n            ],\n            subjects: [\n                ...this.data.subjects\n            ],\n            organizations: [\n                ...this.data.organizations\n            ],\n            occupations: [\n                ...this.data.occupations\n            ],\n            relationships: [\n                ...this.data.relationships\n            ],\n            sentiments: [\n                ...this.data.sentiments\n            ],\n            notes: [\n                ...this.data.notes\n            ]\n        };\n    }\n    constructor(){\n        this.data = this.loadData();\n    }\n}\n// Export singleton instance\nconst dataService = new MockDataService();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./data/dataService.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./data/sampleData.ts":
/*!****************************!*\
  !*** ./data/sampleData.ts ***!
  \****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getSampleData: function() { return /* binding */ getSampleData; },\n/* harmony export */   sampleContacts: function() { return /* binding */ sampleContacts; },\n/* harmony export */   sampleNotes: function() { return /* binding */ sampleNotes; },\n/* harmony export */   sampleOccupations: function() { return /* binding */ sampleOccupations; },\n/* harmony export */   sampleOrganizations: function() { return /* binding */ sampleOrganizations; },\n/* harmony export */   sampleRelationships: function() { return /* binding */ sampleRelationships; },\n/* harmony export */   sampleSentiments: function() { return /* binding */ sampleSentiments; },\n/* harmony export */   sampleSubjects: function() { return /* binding */ sampleSubjects; }\n/* harmony export */ });\nconst sampleOrganizations = [\n    {\n        id: 1,\n        name: \"TechCorp Inc.\"\n    },\n    {\n        id: 2,\n        name: \"Global Marketing Solutions\"\n    },\n    {\n        id: 3,\n        name: \"Creative Studio Pro\"\n    },\n    {\n        id: 4,\n        name: \"InnovateTech\"\n    },\n    {\n        id: 5,\n        name: \"DataFlow Analytics\"\n    },\n    {\n        id: 6,\n        name: \"Strategic Partners LLC\"\n    },\n    {\n        id: 7,\n        name: \"First National Bank\"\n    },\n    {\n        id: 8,\n        name: \"UserFirst Design\"\n    },\n    {\n        id: 9,\n        name: \"SalesForce Pro\"\n    },\n    {\n        id: 10,\n        name: \"Content Creators Co.\"\n    },\n    {\n        id: 11,\n        name: \"Efficient Operations Ltd.\"\n    },\n    {\n        id: 12,\n        name: \"Business Insights Group\"\n    }\n];\nconst sampleOccupations = [\n    {\n        id: 1,\n        title: \"Software Engineer\"\n    },\n    {\n        id: 2,\n        title: \"Marketing Manager\"\n    },\n    {\n        id: 3,\n        title: \"Designer\"\n    },\n    {\n        id: 4,\n        title: \"Product Manager\"\n    },\n    {\n        id: 5,\n        title: \"Data Scientist\"\n    },\n    {\n        id: 6,\n        title: \"Consultant\"\n    },\n    {\n        id: 7,\n        title: \"Financial Analyst\"\n    },\n    {\n        id: 8,\n        title: \"UX Researcher\"\n    },\n    {\n        id: 9,\n        title: \"Sales Director\"\n    },\n    {\n        id: 10,\n        title: \"Content Strategist\"\n    },\n    {\n        id: 11,\n        title: \"Operations Manager\"\n    },\n    {\n        id: 12,\n        title: \"Business Analyst\"\n    }\n];\nconst sampleSubjects = [\n    {\n        id: 1,\n        label: \"coffee\",\n        category: \"activity\"\n    },\n    {\n        id: 2,\n        label: \"tech\",\n        category: \"interest\"\n    },\n    {\n        id: 3,\n        label: \"music\",\n        category: \"hobby\"\n    },\n    {\n        id: 4,\n        label: \"travel\",\n        category: \"hobby\"\n    },\n    {\n        id: 5,\n        label: \"family\",\n        category: \"organization\"\n    },\n    {\n        id: 6,\n        label: \"food\",\n        category: \"interest\"\n    },\n    {\n        id: 7,\n        label: \"art\",\n        category: \"hobby\"\n    },\n    {\n        id: 8,\n        label: \"sports\",\n        category: \"activity\"\n    },\n    {\n        id: 9,\n        label: \"reading\",\n        category: \"hobby\"\n    },\n    {\n        id: 10,\n        label: \"photography\",\n        category: \"hobby\"\n    },\n    {\n        id: 11,\n        label: \"cooking\",\n        category: \"hobby\"\n    },\n    {\n        id: 12,\n        label: \"gaming\",\n        category: \"hobby\"\n    },\n    {\n        id: 13,\n        label: \"yoga\",\n        category: \"activity\"\n    },\n    {\n        id: 14,\n        label: \"dancing\",\n        category: \"activity\"\n    },\n    {\n        id: 15,\n        label: \"hiking\",\n        category: \"activity\"\n    },\n    {\n        id: 16,\n        label: \"swimming\",\n        category: \"activity\"\n    },\n    {\n        id: 17,\n        label: \"cycling\",\n        category: \"activity\"\n    },\n    {\n        id: 18,\n        label: \"running\",\n        category: \"activity\"\n    },\n    {\n        id: 19,\n        label: \"gardening\",\n        category: \"hobby\"\n    },\n    {\n        id: 20,\n        label: \"painting\",\n        category: \"hobby\"\n    },\n    {\n        id: 21,\n        label: \"writing\",\n        category: \"hobby\"\n    },\n    {\n        id: 22,\n        label: \"languages\",\n        category: \"interest\"\n    },\n    {\n        id: 23,\n        label: \"science\",\n        category: \"interest\"\n    },\n    {\n        id: 24,\n        label: \"history\",\n        category: \"interest\"\n    },\n    {\n        id: 25,\n        label: \"politics\",\n        category: \"interest\"\n    },\n    {\n        id: 26,\n        label: \"fashion\",\n        category: \"interest\"\n    },\n    {\n        id: 27,\n        label: \"cars\",\n        category: \"interest\"\n    },\n    {\n        id: 28,\n        label: \"pets\",\n        category: \"interest\"\n    },\n    {\n        id: 29,\n        label: \"volunteering\",\n        category: \"activity\"\n    },\n    {\n        id: 30,\n        label: \"meditation\",\n        category: \"activity\"\n    },\n    {\n        id: 31,\n        label: \"startup\",\n        category: \"organization\"\n    },\n    {\n        id: 32,\n        label: \"corporate\",\n        category: \"organization\"\n    },\n    {\n        id: 33,\n        label: \"nonprofit\",\n        category: \"organization\"\n    },\n    {\n        id: 34,\n        label: \"freelance\",\n        category: \"organization\"\n    },\n    {\n        id: 35,\n        label: \"academia\",\n        category: \"organization\"\n    }\n];\nconst sampleRelationships = [\n    {\n        id: 1,\n        label: \"friend\",\n        category: \"personal\"\n    },\n    {\n        id: 2,\n        label: \"colleague\",\n        category: \"professional\"\n    },\n    {\n        id: 3,\n        label: \"mentor\",\n        category: \"professional\"\n    },\n    {\n        id: 4,\n        label: \"supervisor\",\n        category: \"professional\"\n    },\n    {\n        id: 5,\n        label: \"close friend\",\n        category: \"personal\"\n    },\n    {\n        id: 6,\n        label: \"acquaintance\",\n        category: \"personal\"\n    },\n    {\n        id: 7,\n        label: \"partner\",\n        category: \"romantic\"\n    },\n    {\n        id: 8,\n        label: \"date\",\n        category: \"romantic\"\n    }\n];\nconst sampleSentiments = [\n    {\n        id: 1,\n        label: \"positive\",\n        category: \"positive\"\n    },\n    {\n        id: 2,\n        label: \"neutral\",\n        category: \"neutral\"\n    },\n    {\n        id: 3,\n        label: \"negative\",\n        category: \"negative\"\n    },\n    {\n        id: 4,\n        label: \"excited\",\n        category: \"positive\"\n    },\n    {\n        id: 5,\n        label: \"happy\",\n        category: \"positive\"\n    },\n    {\n        id: 6,\n        label: \"satisfied\",\n        category: \"positive\"\n    },\n    {\n        id: 7,\n        label: \"calm\",\n        category: \"neutral\"\n    },\n    {\n        id: 8,\n        label: \"indifferent\",\n        category: \"neutral\"\n    },\n    {\n        id: 9,\n        label: \"frustrated\",\n        category: \"negative\"\n    },\n    {\n        id: 10,\n        label: \"disappointed\",\n        category: \"negative\"\n    }\n];\nconst sampleNotes = [\n    // Alex Johnson (Contact 1) - 5 notes\n    {\n        id: 1,\n        text: \"Had coffee and discussed new project ideas. We talked about potential collaboration opportunities and shared insights about the current market trends. The conversation was very productive and we agreed to follow up next week.\",\n        person: \"Alex Johnson\",\n        time: \"Dec 15, 2024 2:00 PM\",\n        location: \"Starbucks Downtown\",\n        event: \"Coffee meeting\",\n        sentiment: \"positive\",\n        contactIds: [\n            1\n        ],\n        createdAt: \"2024-12-15T14:00:00Z\"\n    },\n    {\n        id: 2,\n        text: \"Met at the tech conference and discussed AI trends. Alex shared interesting insights about machine learning applications in their current project. Great networking opportunity.\",\n        person: \"Alex Johnson\",\n        time: \"Dec 10, 2024 4:30 PM\",\n        location: \"Tech Conference Center\",\n        event: \"Tech conference\",\n        sentiment: \"positive\",\n        contactIds: [\n            1\n        ],\n        createdAt: \"2024-12-10T16:30:00Z\"\n    },\n    {\n        id: 3,\n        text: \"Quick lunch meeting to discuss potential partnership. Alex mentioned they're looking for developers with React experience. Promised to connect them with our team.\",\n        person: \"Alex Johnson\",\n        time: \"Dec 5, 2024 12:00 PM\",\n        location: \"Local Deli\",\n        event: \"Lunch meeting\",\n        sentiment: \"neutral\",\n        contactIds: [\n            1\n        ],\n        createdAt: \"2024-12-05T12:00:00Z\"\n    },\n    {\n        id: 4,\n        text: \"Phone call about project timeline. Alex expressed concerns about meeting the deadline. Offered to help review the code and provide suggestions.\",\n        person: \"Alex Johnson\",\n        time: \"Nov 28, 2024 3:00 PM\",\n        location: \"Phone call\",\n        event: \"Project review call\",\n        sentiment: \"neutral\",\n        contactIds: [\n            1\n        ],\n        createdAt: \"2024-11-28T15:00:00Z\"\n    },\n    {\n        id: 5,\n        text: \"Met at the gym and chatted about work-life balance. Alex mentioned they've been working long hours and feeling stressed. Suggested some time management techniques.\",\n        person: \"Alex Johnson\",\n        time: \"Nov 20, 2024 6:00 PM\",\n        location: \"Fitness Center\",\n        event: \"Gym session\",\n        sentiment: \"positive\",\n        contactIds: [\n            1\n        ],\n        createdAt: \"2024-11-20T18:00:00Z\"\n    },\n    // Sarah Chen (Contact 2) - 5 notes\n    {\n        id: 6,\n        text: \"Team lunch meeting about Q1 strategy. Discussed upcoming projects and resource allocation. Some concerns were raised about timeline feasibility.\",\n        person: \"Sarah Chen\",\n        time: \"Dec 12, 2024 12:00 PM\",\n        location: \"Office Conference Room\",\n        event: \"Team meeting\",\n        sentiment: \"neutral\",\n        contactIds: [\n            2\n        ],\n        createdAt: \"2024-12-12T12:00:00Z\"\n    },\n    {\n        id: 7,\n        text: \"Coffee chat about career development. Sarah shared her interest in moving into product management. Discussed potential opportunities and skills she should develop.\",\n        person: \"Sarah Chen\",\n        time: \"Dec 8, 2024 10:00 AM\",\n        location: \"Office Kitchen\",\n        event: \"Career discussion\",\n        sentiment: \"positive\",\n        contactIds: [\n            2\n        ],\n        createdAt: \"2024-12-08T10:00:00Z\"\n    },\n    {\n        id: 8,\n        text: \"Quick hallway conversation about the new design system. Sarah had some feedback about the color palette and suggested improvements for accessibility.\",\n        person: \"Sarah Chen\",\n        time: \"Dec 3, 2024 2:30 PM\",\n        location: \"Office Hallway\",\n        event: \"Design feedback\",\n        sentiment: \"positive\",\n        contactIds: [\n            2\n        ],\n        createdAt: \"2024-12-03T14:30:00Z\"\n    },\n    {\n        id: 9,\n        text: \"Met at the art gallery opening. Sarah was excited about the new exhibition and we discussed our shared interest in contemporary art. Great cultural experience.\",\n        person: \"Sarah Chen\",\n        time: \"Nov 25, 2024 7:00 PM\",\n        location: \"Modern Art Gallery\",\n        event: \"Gallery opening\",\n        sentiment: \"positive\",\n        contactIds: [\n            2\n        ],\n        createdAt: \"2024-11-25T19:00:00Z\"\n    },\n    {\n        id: 10,\n        text: \"Phone call about project collaboration. Sarah mentioned some challenges with cross-team communication. Offered to help facilitate a meeting between the teams.\",\n        person: \"Sarah Chen\",\n        time: \"Nov 18, 2024 4:00 PM\",\n        location: \"Phone call\",\n        event: \"Project collaboration call\",\n        sentiment: \"neutral\",\n        contactIds: [\n            2\n        ],\n        createdAt: \"2024-11-18T16:00:00Z\"\n    },\n    // Michael Rodriguez (Contact 3) - 5 notes\n    {\n        id: 11,\n        text: \"Client presentation went poorly. Technical difficulties and unprepared responses led to a negative impression. Need to improve preparation for future meetings.\",\n        person: \"Michael Rodriguez\",\n        time: \"Dec 10, 2024 10:00 AM\",\n        location: \"Client Office\",\n        event: \"Client presentation\",\n        sentiment: \"negative\",\n        contactIds: [\n            3\n        ],\n        createdAt: \"2024-12-10T10:00:00Z\"\n    },\n    {\n        id: 12,\n        text: \"Met for lunch to discuss the failed presentation. Michael was clearly frustrated and disappointed. Helped him analyze what went wrong and plan improvements.\",\n        person: \"Michael Rodriguez\",\n        time: \"Dec 11, 2024 1:00 PM\",\n        location: \"Mexican Restaurant\",\n        event: \"Post-presentation debrief\",\n        sentiment: \"negative\",\n        contactIds: [\n            3\n        ],\n        createdAt: \"2024-12-11T13:00:00Z\"\n    },\n    {\n        id: 13,\n        text: \"Quick coffee meeting about upcoming project. Michael seemed more confident this time and had better prepared materials. Good to see the improvement.\",\n        person: \"Michael Rodriguez\",\n        time: \"Dec 5, 2024 9:00 AM\",\n        location: \"Coffee Shop\",\n        event: \"Project planning\",\n        sentiment: \"positive\",\n        contactIds: [\n            3\n        ],\n        createdAt: \"2024-12-05T09:00:00Z\"\n    },\n    {\n        id: 14,\n        text: \"Met at the gym and discussed work stress. Michael mentioned he's been working on presentation skills and taking public speaking classes. Great initiative.\",\n        person: \"Michael Rodriguez\",\n        time: \"Nov 30, 2024 6:00 PM\",\n        location: \"Fitness Center\",\n        event: \"Gym workout\",\n        sentiment: \"positive\",\n        contactIds: [\n            3\n        ],\n        createdAt: \"2024-11-30T18:00:00Z\"\n    },\n    {\n        id: 15,\n        text: \"Phone call about team dynamics. Michael expressed concerns about some team members not pulling their weight. Suggested having a team meeting to address issues.\",\n        person: \"Michael Rodriguez\",\n        time: \"Nov 22, 2024 3:30 PM\",\n        location: \"Phone call\",\n        event: \"Team issues discussion\",\n        sentiment: \"negative\",\n        contactIds: [\n            3\n        ],\n        createdAt: \"2024-11-22T15:30:00Z\"\n    },\n    // Emily Watson (Contact 4) - 5 notes\n    {\n        id: 16,\n        text: \"Successful product launch celebration. Team worked hard and delivered on time. Everyone was excited about the positive feedback from early users.\",\n        person: \"Emily Watson\",\n        time: \"Dec 8, 2024 6:00 PM\",\n        location: \"Company HQ\",\n        event: \"Product launch\",\n        sentiment: \"positive\",\n        contactIds: [\n            4\n        ],\n        createdAt: \"2024-12-08T18:00:00Z\"\n    },\n    {\n        id: 17,\n        text: \"Coffee meeting to discuss next product roadmap. Emily was enthusiastic about new features and shared some innovative ideas. Great strategic thinking.\",\n        person: \"Emily Watson\",\n        time: \"Dec 12, 2024 11:00 AM\",\n        location: \"Office Coffee Bar\",\n        event: \"Product roadmap discussion\",\n        sentiment: \"positive\",\n        contactIds: [\n            4\n        ],\n        createdAt: \"2024-12-12T11:00:00Z\"\n    },\n    {\n        id: 18,\n        text: \"Quick hallway chat about user feedback. Emily mentioned some interesting insights from user interviews. Offered to help analyze the data.\",\n        person: \"Emily Watson\",\n        time: \"Dec 6, 2024 3:00 PM\",\n        location: \"Office Hallway\",\n        event: \"User feedback discussion\",\n        sentiment: \"neutral\",\n        contactIds: [\n            4\n        ],\n        createdAt: \"2024-12-06T15:00:00Z\"\n    },\n    {\n        id: 19,\n        text: \"Met at the design workshop. Emily was leading a session on user experience principles. Great presentation skills and deep knowledge of the subject.\",\n        person: \"Emily Watson\",\n        time: \"Nov 28, 2024 2:00 PM\",\n        location: \"Design Studio\",\n        event: \"UX workshop\",\n        sentiment: \"positive\",\n        contactIds: [\n            4\n        ],\n        createdAt: \"2024-11-28T14:00:00Z\"\n    },\n    {\n        id: 20,\n        text: \"Phone call about team collaboration. Emily mentioned some challenges with cross-functional communication. Suggested implementing regular sync meetings.\",\n        person: \"Emily Watson\",\n        time: \"Nov 20, 2024 4:30 PM\",\n        location: \"Phone call\",\n        event: \"Team collaboration call\",\n        sentiment: \"neutral\",\n        contactIds: [\n            4\n        ],\n        createdAt: \"2024-11-20T16:30:00Z\"\n    },\n    // David Kim (Contact 5) - 5 notes\n    {\n        id: 21,\n        text: \"Quick catch-up call with old colleague. Discussed industry changes and potential job opportunities. Good to reconnect after so long.\",\n        person: \"David Kim\",\n        time: \"Dec 5, 2024 3:30 PM\",\n        location: \"Phone call\",\n        event: \"Catch-up call\",\n        sentiment: \"positive\",\n        contactIds: [\n            5\n        ],\n        createdAt: \"2024-12-05T15:30:00Z\"\n    },\n    {\n        id: 22,\n        text: \"Met for lunch to discuss potential collaboration. David shared some interesting project ideas and we explored ways to work together. Promising opportunities.\",\n        person: \"David Kim\",\n        time: \"Dec 10, 2024 12:30 PM\",\n        location: \"Korean BBQ Restaurant\",\n        event: \"Collaboration discussion\",\n        sentiment: \"positive\",\n        contactIds: [\n            5\n        ],\n        createdAt: \"2024-12-10T12:30:00Z\"\n    },\n    {\n        id: 23,\n        text: \"Quick coffee meeting about industry trends. David had some insightful observations about the market and shared valuable contacts. Great networking.\",\n        person: \"David Kim\",\n        time: \"Dec 2, 2024 10:00 AM\",\n        location: \"Local Coffee Shop\",\n        event: \"Industry trends discussion\",\n        sentiment: \"positive\",\n        contactIds: [\n            5\n        ],\n        createdAt: \"2024-12-02T10:00:00Z\"\n    },\n    {\n        id: 24,\n        text: \"Met at the startup meetup. David was presenting his new venture and looking for feedback. Great pitch and interesting business model.\",\n        person: \"David Kim\",\n        time: \"Nov 25, 2024 7:30 PM\",\n        location: \"Startup Hub\",\n        event: \"Startup meetup\",\n        sentiment: \"positive\",\n        contactIds: [\n            5\n        ],\n        createdAt: \"2024-11-25T19:30:00Z\"\n    },\n    {\n        id: 25,\n        text: \"Phone call about mentorship. David asked for advice on scaling his business and managing a growing team. Shared some lessons learned from experience.\",\n        person: \"David Kim\",\n        time: \"Nov 18, 2024 2:00 PM\",\n        location: \"Phone call\",\n        event: \"Mentorship call\",\n        sentiment: \"positive\",\n        contactIds: [\n            5\n        ],\n        createdAt: \"2024-11-18T14:00:00Z\"\n    },\n    // Lisa Thompson (Contact 6) - 5 notes\n    {\n        id: 26,\n        text: \"Met at the consulting workshop. Lisa was facilitating a session on strategic planning. Great facilitation skills and deep expertise in the subject.\",\n        person: \"Lisa Thompson\",\n        time: \"Dec 3, 2024 1:00 PM\",\n        location: \"Conference Center\",\n        event: \"Strategic planning workshop\",\n        sentiment: \"positive\",\n        contactIds: [\n            6\n        ],\n        createdAt: \"2024-12-03T13:00:00Z\"\n    },\n    {\n        id: 27,\n        text: \"Coffee meeting to discuss potential project collaboration. Lisa shared some interesting case studies and we explored partnership opportunities.\",\n        person: \"Lisa Thompson\",\n        time: \"Dec 8, 2024 9:00 AM\",\n        location: \"Office Coffee Bar\",\n        event: \"Project collaboration discussion\",\n        sentiment: \"neutral\",\n        contactIds: [\n            6\n        ],\n        createdAt: \"2024-12-08T09:00:00Z\"\n    },\n    {\n        id: 28,\n        text: \"Quick hallway conversation about industry insights. Lisa mentioned some interesting trends she's observed in her consulting work. Valuable perspective.\",\n        person: \"Lisa Thompson\",\n        time: \"Dec 1, 2024 4:00 PM\",\n        location: \"Office Hallway\",\n        event: \"Industry insights chat\",\n        sentiment: \"positive\",\n        contactIds: [\n            6\n        ],\n        createdAt: \"2024-12-01T16:00:00Z\"\n    },\n    {\n        id: 29,\n        text: \"Met at the business networking event. Lisa was representing her consulting firm and looking for new clients. Great networking skills.\",\n        person: \"Lisa Thompson\",\n        time: \"Nov 27, 2024 6:00 PM\",\n        location: \"Business Center\",\n        event: \"Networking event\",\n        sentiment: \"positive\",\n        contactIds: [\n            6\n        ],\n        createdAt: \"2024-11-27T18:00:00Z\"\n    },\n    {\n        id: 30,\n        text: \"Phone call about consulting project. Lisa asked for feedback on a proposal she was working on. Provided some suggestions for improvement.\",\n        person: \"Lisa Thompson\",\n        time: \"Nov 20, 2024 3:00 PM\",\n        location: \"Phone call\",\n        event: \"Proposal feedback call\",\n        sentiment: \"neutral\",\n        contactIds: [\n            6\n        ],\n        createdAt: \"2024-11-20T15:00:00Z\"\n    },\n    // James Wilson (Contact 7) - 5 notes\n    {\n        id: 31,\n        text: \"Met at the business conference. James was presenting on digital transformation strategies. Great presentation and valuable insights for our industry.\",\n        person: \"James Wilson\",\n        time: \"Dec 1, 2024 2:00 PM\",\n        location: \"Business Conference Center\",\n        event: \"Digital transformation presentation\",\n        sentiment: \"positive\",\n        contactIds: [\n            7\n        ],\n        createdAt: \"2024-12-01T14:00:00Z\"\n    },\n    {\n        id: 32,\n        text: \"Coffee meeting to discuss industry collaboration. James shared some interesting ideas about cross-industry partnerships and innovation.\",\n        person: \"James Wilson\",\n        time: \"Dec 6, 2024 10:30 AM\",\n        location: \"Local Coffee Shop\",\n        event: \"Industry collaboration discussion\",\n        sentiment: \"neutral\",\n        contactIds: [\n            7\n        ],\n        createdAt: \"2024-12-06T10:30:00Z\"\n    },\n    {\n        id: 33,\n        text: \"Quick lunch meeting about market trends. James had some insightful observations about customer behavior changes and market opportunities.\",\n        person: \"James Wilson\",\n        time: \"Dec 2, 2024 12:00 PM\",\n        location: \"Office Cafeteria\",\n        event: \"Market trends discussion\",\n        sentiment: \"positive\",\n        contactIds: [\n            7\n        ],\n        createdAt: \"2024-12-02T12:00:00Z\"\n    },\n    {\n        id: 34,\n        text: \"Met at the innovation summit. James was moderating a panel on emerging technologies. Great moderation skills and deep knowledge.\",\n        person: \"James Wilson\",\n        time: \"Nov 29, 2024 3:30 PM\",\n        location: \"Innovation Center\",\n        event: \"Technology panel discussion\",\n        sentiment: \"positive\",\n        contactIds: [\n            7\n        ],\n        createdAt: \"2024-11-29T15:30:00Z\"\n    },\n    {\n        id: 35,\n        text: \"Phone call about strategic partnership. James mentioned some challenges with their current partnerships and asked for advice. Shared some best practices.\",\n        person: \"James Wilson\",\n        time: \"Nov 22, 2024 4:00 PM\",\n        location: \"Phone call\",\n        event: \"Partnership strategy call\",\n        sentiment: \"neutral\",\n        contactIds: [\n            7\n        ],\n        createdAt: \"2024-11-22T16:00:00Z\"\n    },\n    // Maria Garcia (Contact 8) - 5 notes\n    {\n        id: 36,\n        text: \"Met at the UX research conference. Maria was presenting her findings on user behavior patterns. Fascinating research and great presentation skills.\",\n        person: \"Maria Garcia\",\n        time: \"Nov 28, 2024 11:00 AM\",\n        location: \"UX Research Center\",\n        event: \"User behavior presentation\",\n        sentiment: \"positive\",\n        contactIds: [\n            8\n        ],\n        createdAt: \"2024-11-28T11:00:00Z\"\n    },\n    {\n        id: 37,\n        text: \"Coffee meeting to discuss research collaboration. Maria shared some interesting methodologies and we explored potential joint research projects.\",\n        person: \"Maria Garcia\",\n        time: \"Dec 4, 2024 2:00 PM\",\n        location: \"University Coffee Shop\",\n        event: \"Research collaboration discussion\",\n        sentiment: \"positive\",\n        contactIds: [\n            8\n        ],\n        createdAt: \"2024-12-04T14:00:00Z\"\n    },\n    {\n        id: 38,\n        text: \"Quick hallway conversation about user testing. Maria mentioned some interesting findings from recent usability studies. Valuable insights for our product.\",\n        person: \"Maria Garcia\",\n        time: \"Nov 30, 2024 3:00 PM\",\n        location: \"University Hallway\",\n        event: \"User testing discussion\",\n        sentiment: \"neutral\",\n        contactIds: [\n            8\n        ],\n        createdAt: \"2024-11-30T15:00:00Z\"\n    },\n    {\n        id: 39,\n        text: \"Met at the academic symposium. Maria was chairing a session on human-computer interaction. Great academic leadership and deep expertise.\",\n        person: \"Maria Garcia\",\n        time: \"Nov 25, 2024 1:30 PM\",\n        location: \"Academic Conference Center\",\n        event: \"HCI symposium\",\n        sentiment: \"positive\",\n        contactIds: [\n            8\n        ],\n        createdAt: \"2024-11-25T13:30:00Z\"\n    },\n    {\n        id: 40,\n        text: \"Phone call about research methodology. Maria asked for feedback on a research proposal she was developing. Provided some suggestions for improvement.\",\n        person: \"Maria Garcia\",\n        time: \"Nov 18, 2024 2:30 PM\",\n        location: \"Phone call\",\n        event: \"Research proposal feedback\",\n        sentiment: \"neutral\",\n        contactIds: [\n            8\n        ],\n        createdAt: \"2024-11-18T14:30:00Z\"\n    },\n    // Robert Taylor (Contact 9) - 5 notes\n    {\n        id: 41,\n        text: \"Met at the sales conference. Robert was presenting on relationship building strategies. Great sales insights and valuable networking tips.\",\n        person: \"Robert Taylor\",\n        time: \"Nov 25, 2024 10:00 AM\",\n        location: \"Sales Conference Center\",\n        event: \"Relationship building presentation\",\n        sentiment: \"positive\",\n        contactIds: [\n            9\n        ],\n        createdAt: \"2024-11-25T10:00:00Z\"\n    },\n    {\n        id: 42,\n        text: \"Coffee meeting to discuss sales strategies. Robert shared some interesting approaches to customer acquisition and retention. Valuable sales techniques.\",\n        person: \"Robert Taylor\",\n        time: \"Dec 2, 2024 3:00 PM\",\n        location: \"Office Coffee Bar\",\n        event: \"Sales strategy discussion\",\n        sentiment: \"positive\",\n        contactIds: [\n            9\n        ],\n        createdAt: \"2024-12-02T15:00:00Z\"\n    },\n    {\n        id: 43,\n        text: \"Quick lunch meeting about market expansion. Robert had some insights about entering new markets and building sales teams. Strategic thinking.\",\n        person: \"Robert Taylor\",\n        time: \"Nov 28, 2024 12:30 PM\",\n        location: \"Business Restaurant\",\n        event: \"Market expansion discussion\",\n        sentiment: \"neutral\",\n        contactIds: [\n            9\n        ],\n        createdAt: \"2024-11-28T12:30:00Z\"\n    },\n    {\n        id: 44,\n        text: \"Met at the business networking event. Robert was representing his company and looking for new business opportunities. Great networking skills.\",\n        person: \"Robert Taylor\",\n        time: \"Nov 22, 2024 6:30 PM\",\n        location: \"Business Center\",\n        event: \"Business networking\",\n        sentiment: \"positive\",\n        contactIds: [\n            9\n        ],\n        createdAt: \"2024-11-22T18:30:00Z\"\n    },\n    {\n        id: 45,\n        text: \"Phone call about sales training. Robert mentioned some challenges with his sales team and asked for advice on training programs. Shared some resources.\",\n        person: \"Robert Taylor\",\n        time: \"Nov 15, 2024 4:30 PM\",\n        location: \"Phone call\",\n        event: \"Sales training discussion\",\n        sentiment: \"neutral\",\n        contactIds: [\n            9\n        ],\n        createdAt: \"2024-11-15T16:30:00Z\"\n    },\n    // Jennifer Lee (Contact 10) - 5 notes\n    {\n        id: 46,\n        text: \"Met at the content strategy workshop. Jennifer was leading a session on storytelling in marketing. Great presentation and valuable content insights.\",\n        person: \"Jennifer Lee\",\n        time: \"Nov 22, 2024 2:00 PM\",\n        location: \"Marketing Center\",\n        event: \"Content strategy workshop\",\n        sentiment: \"positive\",\n        contactIds: [\n            10\n        ],\n        createdAt: \"2024-11-22T14:00:00Z\"\n    },\n    {\n        id: 47,\n        text: \"Coffee meeting to discuss content collaboration. Jennifer shared some interesting content ideas and we explored potential partnership opportunities.\",\n        person: \"Jennifer Lee\",\n        time: \"Nov 29, 2024 11:00 AM\",\n        location: \"Local Coffee Shop\",\n        event: \"Content collaboration discussion\",\n        sentiment: \"positive\",\n        contactIds: [\n            10\n        ],\n        createdAt: \"2024-11-29T11:00:00Z\"\n    },\n    {\n        id: 48,\n        text: \"Quick lunch meeting about marketing trends. Jennifer had some insights about content marketing evolution and audience engagement strategies.\",\n        person: \"Jennifer Lee\",\n        time: \"Nov 26, 2024 1:00 PM\",\n        location: \"Office Cafeteria\",\n        event: \"Marketing trends discussion\",\n        sentiment: \"neutral\",\n        contactIds: [\n            10\n        ],\n        createdAt: \"2024-11-26T13:00:00Z\"\n    },\n    {\n        id: 49,\n        text: \"Met at the digital marketing summit. Jennifer was presenting on social media strategies. Great digital marketing expertise and practical tips.\",\n        person: \"Jennifer Lee\",\n        time: \"Nov 20, 2024 3:00 PM\",\n        location: \"Digital Marketing Center\",\n        event: \"Social media presentation\",\n        sentiment: \"positive\",\n        contactIds: [\n            10\n        ],\n        createdAt: \"2024-11-20T15:00:00Z\"\n    },\n    {\n        id: 50,\n        text: \"Phone call about content strategy. Jennifer asked for feedback on a content calendar she was developing. Provided some suggestions for improvement.\",\n        person: \"Jennifer Lee\",\n        time: \"Nov 15, 2024 2:00 PM\",\n        location: \"Phone call\",\n        event: \"Content calendar feedback\",\n        sentiment: \"neutral\",\n        contactIds: [\n            10\n        ],\n        createdAt: \"2024-11-15T14:00:00Z\"\n    },\n    // Christopher Brown (Contact 11) - 5 notes\n    {\n        id: 51,\n        text: \"Met at the operations conference. Christopher was presenting on process optimization strategies. Great operational insights and practical implementation tips.\",\n        person: \"Christopher Brown\",\n        time: \"Nov 20, 2024 9:00 AM\",\n        location: \"Operations Conference Center\",\n        event: \"Process optimization presentation\",\n        sentiment: \"positive\",\n        contactIds: [\n            11\n        ],\n        createdAt: \"2024-11-20T09:00:00Z\"\n    },\n    {\n        id: 52,\n        text: \"Coffee meeting to discuss operational efficiency. Christopher shared some interesting approaches to streamlining business processes. Valuable insights.\",\n        person: \"Christopher Brown\",\n        time: \"Nov 27, 2024 2:30 PM\",\n        location: \"Office Coffee Bar\",\n        event: \"Operational efficiency discussion\",\n        sentiment: \"positive\",\n        contactIds: [\n            11\n        ],\n        createdAt: \"2024-11-27T14:30:00Z\"\n    },\n    {\n        id: 53,\n        text: \"Quick lunch meeting about team management. Christopher had some insights about building high-performing teams and managing remote workforces.\",\n        person: \"Christopher Brown\",\n        time: \"Nov 24, 2024 12:00 PM\",\n        location: \"Business Restaurant\",\n        event: \"Team management discussion\",\n        sentiment: \"neutral\",\n        contactIds: [\n            11\n        ],\n        createdAt: \"2024-11-24T12:00:00Z\"\n    },\n    {\n        id: 54,\n        text: \"Met at the business process workshop. Christopher was facilitating a session on lean methodology. Great facilitation skills and deep expertise.\",\n        person: \"Christopher Brown\",\n        time: \"Nov 18, 2024 1:00 PM\",\n        location: \"Business Process Center\",\n        event: \"Lean methodology workshop\",\n        sentiment: \"positive\",\n        contactIds: [\n            11\n        ],\n        createdAt: \"2024-11-18T13:00:00Z\"\n    },\n    {\n        id: 55,\n        text: \"Phone call about process improvement. Christopher mentioned some challenges with their current processes and asked for advice. Shared some best practices.\",\n        person: \"Christopher Brown\",\n        time: \"Nov 12, 2024 3:30 PM\",\n        location: \"Phone call\",\n        event: \"Process improvement call\",\n        sentiment: \"neutral\",\n        contactIds: [\n            11\n        ],\n        createdAt: \"2024-11-12T15:30:00Z\"\n    },\n    // Amanda Davis (Contact 12) - 5 notes\n    {\n        id: 56,\n        text: \"Met at the business analysis conference. Amanda was presenting on data-driven decision making. Great analytical insights and practical applications.\",\n        person: \"Amanda Davis\",\n        time: \"Nov 18, 2024 11:00 AM\",\n        location: \"Business Analysis Center\",\n        event: \"Data-driven decision making presentation\",\n        sentiment: \"positive\",\n        contactIds: [\n            12\n        ],\n        createdAt: \"2024-11-18T11:00:00Z\"\n    },\n    {\n        id: 57,\n        text: \"Coffee meeting to discuss analytics collaboration. Amanda shared some interesting data analysis techniques and we explored potential joint projects.\",\n        person: \"Amanda Davis\",\n        time: \"Nov 25, 2024 10:00 AM\",\n        location: \"Local Coffee Shop\",\n        event: \"Analytics collaboration discussion\",\n        sentiment: \"positive\",\n        contactIds: [\n            12\n        ],\n        createdAt: \"2024-11-25T10:00:00Z\"\n    },\n    {\n        id: 58,\n        text: \"Quick lunch meeting about business intelligence. Amanda had some insights about implementing BI tools and building data dashboards.\",\n        person: \"Amanda Davis\",\n        time: \"Nov 22, 2024 12:30 PM\",\n        location: \"Office Cafeteria\",\n        event: \"Business intelligence discussion\",\n        sentiment: \"neutral\",\n        contactIds: [\n            12\n        ],\n        createdAt: \"2024-11-22T12:30:00Z\"\n    },\n    {\n        id: 59,\n        text: \"Met at the data analytics workshop. Amanda was leading a session on predictive modeling. Great analytical skills and practical knowledge.\",\n        person: \"Amanda Davis\",\n        time: \"Nov 16, 2024 2:00 PM\",\n        location: \"Data Analytics Center\",\n        event: \"Predictive modeling workshop\",\n        sentiment: \"positive\",\n        contactIds: [\n            12\n        ],\n        createdAt: \"2024-11-16T14:00:00Z\"\n    },\n    {\n        id: 60,\n        text: \"Phone call about data strategy. Amanda asked for feedback on a data governance framework she was developing. Provided some suggestions for improvement.\",\n        person: \"Amanda Davis\",\n        time: \"Nov 10, 2024 4:00 PM\",\n        location: \"Phone call\",\n        event: \"Data governance feedback\",\n        sentiment: \"neutral\",\n        contactIds: [\n            12\n        ],\n        createdAt: \"2024-11-10T16:00:00Z\"\n    }\n];\nconst sampleContacts = [\n    {\n        id: 1,\n        name: \"Alex Johnson\",\n        occupationId: 1,\n        organizationId: 1,\n        birthDate: \"1990-05-15\",\n        lastInteraction: 1734307200000,\n        subjectIds: [\n            1,\n            2,\n            3,\n            6,\n            9,\n            13,\n            15,\n            22,\n            27,\n            29,\n            32\n        ],\n        relationshipIds: [\n            1,\n            5\n        ],\n        noteIds: [\n            1,\n            2,\n            3,\n            4,\n            5\n        ]\n    },\n    {\n        id: 2,\n        name: \"Sarah Chen\",\n        // Removed occupationId and organizationId to test missing data\n        birthDate: \"1988-09-22\",\n        lastInteraction: 1734048000000,\n        subjectIds: [\n            4,\n            7,\n            10,\n            13,\n            14,\n            19,\n            21,\n            24,\n            26,\n            30\n        ],\n        relationshipIds: [\n            2,\n            4\n        ],\n        noteIds: [\n            6,\n            7,\n            8,\n            9,\n            10\n        ]\n    },\n    {\n        id: 3,\n        name: \"Michael Rodriguez\",\n        occupationId: 3,\n        // Removed organizationId to test missing organization\n        birthDate: \"1992-03-10\",\n        lastInteraction: 1733788800000,\n        subjectIds: [\n            5,\n            8,\n            11,\n            14,\n            17,\n            19,\n            23,\n            28,\n            12,\n            16\n        ],\n        relationshipIds: [\n            1,\n            2\n        ],\n        noteIds: [\n            11,\n            12,\n            13,\n            14,\n            15\n        ]\n    },\n    {\n        id: 4,\n        name: \"Emily Watson\",\n        occupationId: 4,\n        organizationId: 4,\n        // Removed birthDate to test missing birth date\n        lastInteraction: 1733616000000,\n        subjectIds: [\n            2,\n            6,\n            9,\n            13,\n            15,\n            20,\n            22,\n            25,\n            27,\n            29\n        ],\n        relationshipIds: [\n            2,\n            3\n        ],\n        noteIds: [\n            16,\n            17,\n            18,\n            19,\n            20\n        ]\n    },\n    {\n        id: 5,\n        name: \"David Kim\",\n        // Removed occupationId to test missing occupation\n        organizationId: 5,\n        birthDate: \"1991-07-18\",\n        lastInteraction: 1733356800000,\n        subjectIds: [\n            3,\n            7,\n            10,\n            12,\n            14,\n            18,\n            21,\n            24,\n            26,\n            30\n        ],\n        relationshipIds: [\n            1,\n            2\n        ],\n        noteIds: [\n            21,\n            22,\n            23,\n            24,\n            25\n        ]\n    },\n    {\n        id: 6,\n        name: \"Lisa Thompson\",\n        occupationId: 6,\n        organizationId: 6,\n        birthDate: \"1987-12-03\",\n        lastInteraction: 1733184000000,\n        subjectIds: [\n            1,\n            4,\n            8,\n            11,\n            15,\n            17,\n            19,\n            23,\n            28,\n            12\n        ],\n        relationshipIds: [\n            2,\n            6\n        ],\n        noteIds: [\n            26,\n            27,\n            28,\n            29,\n            30\n        ]\n    },\n    {\n        id: 7,\n        name: \"James Wilson\",\n        // Removed all optional fields to test complete missing data\n        lastInteraction: 1733006400000,\n        subjectIds: [\n            2,\n            5,\n            9,\n            12,\n            16,\n            20,\n            23,\n            25,\n            27,\n            29\n        ],\n        relationshipIds: [\n            2,\n            7\n        ],\n        noteIds: [\n            31,\n            32,\n            33,\n            34,\n            35\n        ]\n    },\n    {\n        id: 8,\n        name: \"Maria Garcia\",\n        occupationId: 8,\n        // Removed organizationId and birthDate\n        lastInteraction: 1732752000000,\n        subjectIds: [\n            1,\n            3,\n            6,\n            10,\n            13,\n            17,\n            21,\n            24,\n            26,\n            30\n        ],\n        relationshipIds: [\n            1,\n            3\n        ],\n        noteIds: [\n            36,\n            37,\n            38,\n            39,\n            40\n        ]\n    },\n    {\n        id: 9,\n        name: \"Robert Taylor\",\n        occupationId: 9,\n        organizationId: 9,\n        birthDate: \"1985-01-30\",\n        lastInteraction: 1732579200000,\n        subjectIds: [\n            4,\n            7,\n            11,\n            14,\n            18,\n            19,\n            22,\n            28,\n            12,\n            15\n        ],\n        relationshipIds: [\n            2,\n            5\n        ],\n        noteIds: [\n            41,\n            42,\n            43,\n            44,\n            45\n        ]\n    },\n    {\n        id: 10,\n        name: \"Jennifer Lee\",\n        // Removed occupationId and birthDate\n        organizationId: 10,\n        lastInteraction: 1732406400000,\n        subjectIds: [\n            3,\n            8,\n            10,\n            13,\n            16,\n            20,\n            23,\n            25,\n            27,\n            29\n        ],\n        relationshipIds: [\n            1,\n            6\n        ],\n        noteIds: [\n            46,\n            47,\n            48,\n            49,\n            50\n        ]\n    },\n    {\n        id: 11,\n        name: \"Christopher Brown\",\n        occupationId: 11,\n        organizationId: 11,\n        birthDate: \"1988-12-14\",\n        lastInteraction: 1732233600000,\n        subjectIds: [\n            2,\n            5,\n            9,\n            12,\n            15,\n            17,\n            21,\n            24,\n            26,\n            30\n        ],\n        relationshipIds: [\n            2,\n            4\n        ],\n        noteIds: [\n            51,\n            52,\n            53,\n            54,\n            55\n        ]\n    },\n    {\n        id: 12,\n        name: \"Amanda Davis\",\n        // Removed all optional fields to test complete missing data\n        lastInteraction: 1732060800000,\n        subjectIds: [\n            1,\n            4,\n            7,\n            11,\n            14,\n            18,\n            19,\n            22,\n            28,\n            12\n        ],\n        relationshipIds: [\n            1,\n            2\n        ],\n        noteIds: [\n            56,\n            57,\n            58,\n            59,\n            60\n        ]\n    }\n];\nfunction getSampleData() {\n    return {\n        contacts: sampleContacts,\n        subjects: sampleSubjects,\n        organizations: sampleOrganizations,\n        occupations: sampleOccupations,\n        relationships: sampleRelationships,\n        sentiments: sampleSentiments,\n        notes: sampleNotes\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./data/sampleData.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js ***!
  \****************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/**\n * @license React\n * react-jsx-dev-runtime.development.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\nif (true) {\n  (function() {\n'use strict';\n\nvar React = __webpack_require__(/*! next/dist/compiled/react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n\n// ATTENTION\n// When adding new symbols to this file,\n// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n// The Symbol used to tag the ReactElement-like types.\nvar REACT_ELEMENT_TYPE = Symbol.for('react.element');\nvar REACT_PORTAL_TYPE = Symbol.for('react.portal');\nvar REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');\nvar REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');\nvar REACT_PROFILER_TYPE = Symbol.for('react.profiler');\nvar REACT_PROVIDER_TYPE = Symbol.for('react.provider'); // TODO: Delete with enableRenderableContext\n\nvar REACT_CONSUMER_TYPE = Symbol.for('react.consumer');\nvar REACT_CONTEXT_TYPE = Symbol.for('react.context');\nvar REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');\nvar REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');\nvar REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');\nvar REACT_MEMO_TYPE = Symbol.for('react.memo');\nvar REACT_LAZY_TYPE = Symbol.for('react.lazy');\nvar REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');\nvar REACT_CACHE_TYPE = Symbol.for('react.cache');\nvar MAYBE_ITERATOR_SYMBOL = Symbol.iterator;\nvar FAUX_ITERATOR_SYMBOL = '@@iterator';\nfunction getIteratorFn(maybeIterable) {\n  if (maybeIterable === null || typeof maybeIterable !== 'object') {\n    return null;\n  }\n\n  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n\n  if (typeof maybeIterator === 'function') {\n    return maybeIterator;\n  }\n\n  return null;\n}\n\nvar ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n\nfunction error(format) {\n  {\n    {\n      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n\n      printWarning('error', format, args);\n    }\n  }\n}\n\nfunction printWarning(level, format, args) {\n  // When changing this logic, you might want to also\n  // update consoleWithStackDev.www.js as well.\n  {\n    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n    var stack = ReactDebugCurrentFrame.getStackAddendum();\n\n    if (stack !== '') {\n      format += '%s';\n      args = args.concat([stack]);\n    } // eslint-disable-next-line react-internal/safe-string-coercion\n\n\n    var argsWithFormat = args.map(function (item) {\n      return String(item);\n    }); // Careful: RN currently depends on this prefix\n\n    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it\n    // breaks IE9: https://github.com/facebook/react/issues/13610\n    // eslint-disable-next-line react-internal/no-production-logging\n\n    Function.prototype.apply.call(console[level], console, argsWithFormat);\n  }\n}\n\n// -----------------------------------------------------------------------------\n\nvar enableScopeAPI = false; // Experimental Create Event Handle API.\nvar enableCacheElement = false;\nvar enableTransitionTracing = false; // No known bugs, but needs performance testing\n\nvar enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber\nvar enableRenderableContext = false;\n// stuff. Intended to enable React core members to more easily debug scheduling\n// issues in DEV builds.\n\nvar enableDebugTracing = false;\n\nfunction getWrappedName(outerType, innerType, wrapperName) {\n  var displayName = outerType.displayName;\n\n  if (displayName) {\n    return displayName;\n  }\n\n  var functionName = innerType.displayName || innerType.name || '';\n  return functionName !== '' ? wrapperName + \"(\" + functionName + \")\" : wrapperName;\n} // Keep in sync with react-reconciler/getComponentNameFromFiber\n\n\nfunction getContextName(type) {\n  return type.displayName || 'Context';\n}\n\nvar REACT_CLIENT_REFERENCE$2 = Symbol.for('react.client.reference'); // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.\n\nfunction getComponentNameFromType(type) {\n  if (type == null) {\n    // Host root, text node or just invalid type.\n    return null;\n  }\n\n  if (typeof type === 'function') {\n    if (type.$$typeof === REACT_CLIENT_REFERENCE$2) {\n      // TODO: Create a convention for naming client references with debug info.\n      return null;\n    }\n\n    return type.displayName || type.name || null;\n  }\n\n  if (typeof type === 'string') {\n    return type;\n  }\n\n  switch (type) {\n    case REACT_FRAGMENT_TYPE:\n      return 'Fragment';\n\n    case REACT_PORTAL_TYPE:\n      return 'Portal';\n\n    case REACT_PROFILER_TYPE:\n      return 'Profiler';\n\n    case REACT_STRICT_MODE_TYPE:\n      return 'StrictMode';\n\n    case REACT_SUSPENSE_TYPE:\n      return 'Suspense';\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return 'SuspenseList';\n\n    case REACT_CACHE_TYPE:\n      {\n        return 'Cache';\n      }\n\n  }\n\n  if (typeof type === 'object') {\n    {\n      if (typeof type.tag === 'number') {\n        error('Received an unexpected object in getComponentNameFromType(). ' + 'This is likely a bug in React. Please file an issue.');\n      }\n    }\n\n    switch (type.$$typeof) {\n      case REACT_PROVIDER_TYPE:\n        {\n          var provider = type;\n          return getContextName(provider._context) + '.Provider';\n        }\n\n      case REACT_CONTEXT_TYPE:\n        var context = type;\n\n        {\n          return getContextName(context) + '.Consumer';\n        }\n\n      case REACT_CONSUMER_TYPE:\n        {\n          return null;\n        }\n\n      case REACT_FORWARD_REF_TYPE:\n        return getWrappedName(type, type.render, 'ForwardRef');\n\n      case REACT_MEMO_TYPE:\n        var outerName = type.displayName || null;\n\n        if (outerName !== null) {\n          return outerName;\n        }\n\n        return getComponentNameFromType(type.type) || 'Memo';\n\n      case REACT_LAZY_TYPE:\n        {\n          var lazyComponent = type;\n          var payload = lazyComponent._payload;\n          var init = lazyComponent._init;\n\n          try {\n            return getComponentNameFromType(init(payload));\n          } catch (x) {\n            return null;\n          }\n        }\n    }\n  }\n\n  return null;\n}\n\n// $FlowFixMe[method-unbinding]\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nvar assign = Object.assign;\n\n/*\n * The `'' + value` pattern (used in perf-sensitive code) throws for Symbol\n * and Temporal.* types. See https://github.com/facebook/react/pull/22064.\n *\n * The functions in this module will throw an easier-to-understand,\n * easier-to-debug exception with a clear errors message message explaining the\n * problem. (Instead of a confusing exception thrown inside the implementation\n * of the `value` object).\n */\n// $FlowFixMe[incompatible-return] only called in DEV, so void return is not possible.\nfunction typeName(value) {\n  {\n    // toStringTag is needed for namespaced types like Temporal.Instant\n    var hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;\n    var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object'; // $FlowFixMe[incompatible-return]\n\n    return type;\n  }\n} // $FlowFixMe[incompatible-return] only called in DEV, so void return is not possible.\n\n\nfunction willCoercionThrow(value) {\n  {\n    try {\n      testStringCoercion(value);\n      return false;\n    } catch (e) {\n      return true;\n    }\n  }\n}\n\nfunction testStringCoercion(value) {\n  // If you ended up here by following an exception call stack, here's what's\n  // happened: you supplied an object or symbol value to React (as a prop, key,\n  // DOM attribute, CSS property, string ref, etc.) and when React tried to\n  // coerce it to a string using `'' + value`, an exception was thrown.\n  //\n  // The most common types that will cause this exception are `Symbol` instances\n  // and Temporal objects like `Temporal.Instant`. But any object that has a\n  // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this\n  // exception. (Library authors do this to prevent users from using built-in\n  // numeric operators like `+` or comparison operators like `>=` because custom\n  // methods are needed to perform accurate arithmetic or comparison.)\n  //\n  // To fix the problem, coerce this object or symbol value to a string before\n  // passing it to React. The most reliable way is usually `String(value)`.\n  //\n  // To find which value is throwing, check the browser or debugger console.\n  // Before this exception was thrown, there should be `console.error` output\n  // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the\n  // problem and how that type was used: key, atrribute, input value prop, etc.\n  // In most cases, this console output also shows the component and its\n  // ancestor components where the exception happened.\n  //\n  // eslint-disable-next-line react-internal/safe-string-coercion\n  return '' + value;\n}\nfunction checkKeyStringCoercion(value) {\n  {\n    if (willCoercionThrow(value)) {\n      error('The provided key is an unsupported type %s.' + ' This value must be coerced to a string before using it here.', typeName(value));\n\n      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n    }\n  }\n}\n\nvar REACT_CLIENT_REFERENCE$1 = Symbol.for('react.client.reference');\nfunction isValidElementType(type) {\n  if (typeof type === 'string' || typeof type === 'function') {\n    return true;\n  } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).\n\n\n  if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing  || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden  || type === REACT_OFFSCREEN_TYPE || enableScopeAPI  || enableCacheElement  || enableTransitionTracing ) {\n    return true;\n  }\n\n  if (typeof type === 'object' && type !== null) {\n    if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || enableRenderableContext  || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object\n    // types supported by any Flight configuration anywhere since\n    // we don't know which Flight build this will end up being used\n    // with.\n    type.$$typeof === REACT_CLIENT_REFERENCE$1 || type.getModuleId !== undefined) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nvar isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare\n\nfunction isArray(a) {\n  return isArrayImpl(a);\n}\n\n// Helpers to patch console.logs to avoid logging during side-effect free\n// replaying on render function. This currently only patches the object\n// lazily which won't cover if the log function was extracted eagerly.\n// We could also eagerly patch the method.\nvar disabledDepth = 0;\nvar prevLog;\nvar prevInfo;\nvar prevWarn;\nvar prevError;\nvar prevGroup;\nvar prevGroupCollapsed;\nvar prevGroupEnd;\n\nfunction disabledLog() {}\n\ndisabledLog.__reactDisabledLog = true;\nfunction disableLogs() {\n  {\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      prevLog = console.log;\n      prevInfo = console.info;\n      prevWarn = console.warn;\n      prevError = console.error;\n      prevGroup = console.group;\n      prevGroupCollapsed = console.groupCollapsed;\n      prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099\n\n      var props = {\n        configurable: true,\n        enumerable: true,\n        value: disabledLog,\n        writable: true\n      }; // $FlowFixMe[cannot-write] Flow thinks console is immutable.\n\n      Object.defineProperties(console, {\n        info: props,\n        log: props,\n        warn: props,\n        error: props,\n        group: props,\n        groupCollapsed: props,\n        groupEnd: props\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n\n    disabledDepth++;\n  }\n}\nfunction reenableLogs() {\n  {\n    disabledDepth--;\n\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      var props = {\n        configurable: true,\n        enumerable: true,\n        writable: true\n      }; // $FlowFixMe[cannot-write] Flow thinks console is immutable.\n\n      Object.defineProperties(console, {\n        log: assign({}, props, {\n          value: prevLog\n        }),\n        info: assign({}, props, {\n          value: prevInfo\n        }),\n        warn: assign({}, props, {\n          value: prevWarn\n        }),\n        error: assign({}, props, {\n          value: prevError\n        }),\n        group: assign({}, props, {\n          value: prevGroup\n        }),\n        groupCollapsed: assign({}, props, {\n          value: prevGroupCollapsed\n        }),\n        groupEnd: assign({}, props, {\n          value: prevGroupEnd\n        })\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n\n    if (disabledDepth < 0) {\n      error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');\n    }\n  }\n}\n\nvar ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;\nvar prefix;\nfunction describeBuiltInComponentFrame(name, ownerFn) {\n  {\n    if (prefix === undefined) {\n      // Extract the VM specific prefix used by each line.\n      try {\n        throw Error();\n      } catch (x) {\n        var match = x.stack.trim().match(/\\n( *(at )?)/);\n        prefix = match && match[1] || '';\n      }\n    } // We use the prefix to ensure our stacks line up with native stack frames.\n\n\n    return '\\n' + prefix + name;\n  }\n}\nvar reentry = false;\nvar componentFrameCache;\n\n{\n  var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;\n  componentFrameCache = new PossiblyWeakMap();\n}\n/**\n * Leverages native browser/VM stack frames to get proper details (e.g.\n * filename, line + col number) for a single component in a component stack. We\n * do this by:\n *   (1) throwing and catching an error in the function - this will be our\n *       control error.\n *   (2) calling the component which will eventually throw an error that we'll\n *       catch - this will be our sample error.\n *   (3) diffing the control and sample error stacks to find the stack frame\n *       which represents our component.\n */\n\n\nfunction describeNativeComponentFrame(fn, construct) {\n  // If something asked for a stack inside a fake render, it should get ignored.\n  if (!fn || reentry) {\n    return '';\n  }\n\n  {\n    var frame = componentFrameCache.get(fn);\n\n    if (frame !== undefined) {\n      return frame;\n    }\n  }\n\n  reentry = true;\n  var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe[incompatible-type] It does accept undefined.\n\n  Error.prepareStackTrace = undefined;\n  var previousDispatcher;\n\n  {\n    previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function\n    // for warnings.\n\n    ReactCurrentDispatcher.current = null;\n    disableLogs();\n  }\n  /**\n   * Finding a common stack frame between sample and control errors can be\n   * tricky given the different types and levels of stack trace truncation from\n   * different JS VMs. So instead we'll attempt to control what that common\n   * frame should be through this object method:\n   * Having both the sample and control errors be in the function under the\n   * `DescribeNativeComponentFrameRoot` property, + setting the `name` and\n   * `displayName` properties of the function ensures that a stack\n   * frame exists that has the method name `DescribeNativeComponentFrameRoot` in\n   * it for both control and sample stacks.\n   */\n\n\n  var RunInRootFrame = {\n    DetermineComponentFrameRoot: function () {\n      var control;\n\n      try {\n        // This should throw.\n        if (construct) {\n          // Something should be setting the props in the constructor.\n          var Fake = function () {\n            throw Error();\n          }; // $FlowFixMe[prop-missing]\n\n\n          Object.defineProperty(Fake.prototype, 'props', {\n            set: function () {\n              // We use a throwing setter instead of frozen or non-writable props\n              // because that won't throw in a non-strict mode function.\n              throw Error();\n            }\n          });\n\n          if (typeof Reflect === 'object' && Reflect.construct) {\n            // We construct a different control for this case to include any extra\n            // frames added by the construct call.\n            try {\n              Reflect.construct(Fake, []);\n            } catch (x) {\n              control = x;\n            }\n\n            Reflect.construct(fn, [], Fake);\n          } else {\n            try {\n              Fake.call();\n            } catch (x) {\n              control = x;\n            } // $FlowFixMe[prop-missing] found when upgrading Flow\n\n\n            fn.call(Fake.prototype);\n          }\n        } else {\n          try {\n            throw Error();\n          } catch (x) {\n            control = x;\n          } // TODO(luna): This will currently only throw if the function component\n          // tries to access React/ReactDOM/props. We should probably make this throw\n          // in simple components too\n\n\n          var maybePromise = fn(); // If the function component returns a promise, it's likely an async\n          // component, which we don't yet support. Attach a noop catch handler to\n          // silence the error.\n          // TODO: Implement component stacks for async client components?\n\n          if (maybePromise && typeof maybePromise.catch === 'function') {\n            maybePromise.catch(function () {});\n          }\n        }\n      } catch (sample) {\n        // This is inlined manually because closure doesn't do it for us.\n        if (sample && control && typeof sample.stack === 'string') {\n          return [sample.stack, control.stack];\n        }\n      }\n\n      return [null, null];\n    }\n  }; // $FlowFixMe[prop-missing]\n\n  RunInRootFrame.DetermineComponentFrameRoot.displayName = 'DetermineComponentFrameRoot';\n  var namePropDescriptor = Object.getOwnPropertyDescriptor(RunInRootFrame.DetermineComponentFrameRoot, 'name'); // Before ES6, the `name` property was not configurable.\n\n  if (namePropDescriptor && namePropDescriptor.configurable) {\n    // V8 utilizes a function's `name` property when generating a stack trace.\n    Object.defineProperty(RunInRootFrame.DetermineComponentFrameRoot, // Configurable properties can be updated even if its writable descriptor\n    // is set to `false`.\n    // $FlowFixMe[cannot-write]\n    'name', {\n      value: 'DetermineComponentFrameRoot'\n    });\n  }\n\n  try {\n    var _RunInRootFrame$Deter = RunInRootFrame.DetermineComponentFrameRoot(),\n        sampleStack = _RunInRootFrame$Deter[0],\n        controlStack = _RunInRootFrame$Deter[1];\n\n    if (sampleStack && controlStack) {\n      // This extracts the first frame from the sample that isn't also in the control.\n      // Skipping one frame that we assume is the frame that calls the two.\n      var sampleLines = sampleStack.split('\\n');\n      var controlLines = controlStack.split('\\n');\n      var s = 0;\n      var c = 0;\n\n      while (s < sampleLines.length && !sampleLines[s].includes('DetermineComponentFrameRoot')) {\n        s++;\n      }\n\n      while (c < controlLines.length && !controlLines[c].includes('DetermineComponentFrameRoot')) {\n        c++;\n      } // We couldn't find our intentionally injected common root frame, attempt\n      // to find another common root frame by search from the bottom of the\n      // control stack...\n\n\n      if (s === sampleLines.length || c === controlLines.length) {\n        s = sampleLines.length - 1;\n        c = controlLines.length - 1;\n\n        while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {\n          // We expect at least one stack frame to be shared.\n          // Typically this will be the root most one. However, stack frames may be\n          // cut off due to maximum stack limits. In this case, one maybe cut off\n          // earlier than the other. We assume that the sample is longer or the same\n          // and there for cut off earlier. So we should find the root most frame in\n          // the sample somewhere in the control.\n          c--;\n        }\n      }\n\n      for (; s >= 1 && c >= 0; s--, c--) {\n        // Next we find the first one that isn't the same which should be the\n        // frame that called our sample function and the control.\n        if (sampleLines[s] !== controlLines[c]) {\n          // In V8, the first line is describing the message but other VMs don't.\n          // If we're about to return the first line, and the control is also on the same\n          // line, that's a pretty good indicator that our sample threw at same line as\n          // the control. I.e. before we entered the sample frame. So we ignore this result.\n          // This can happen if you passed a class to function component, or non-function.\n          if (s !== 1 || c !== 1) {\n            do {\n              s--;\n              c--; // We may still have similar intermediate frames from the construct call.\n              // The next one that isn't the same should be our match though.\n\n              if (c < 0 || sampleLines[s] !== controlLines[c]) {\n                // V8 adds a \"new\" prefix for native classes. Let's remove it to make it prettier.\n                var _frame = '\\n' + sampleLines[s].replace(' at new ', ' at '); // If our component frame is labeled \"<anonymous>\"\n                // but we have a user-provided \"displayName\"\n                // splice it in to make the stack more readable.\n\n\n                if (fn.displayName && _frame.includes('<anonymous>')) {\n                  _frame = _frame.replace('<anonymous>', fn.displayName);\n                }\n\n                if (true) {\n                  if (typeof fn === 'function') {\n                    componentFrameCache.set(fn, _frame);\n                  }\n                } // Return the line we found.\n\n\n                return _frame;\n              }\n            } while (s >= 1 && c >= 0);\n          }\n\n          break;\n        }\n      }\n    }\n  } finally {\n    reentry = false;\n\n    {\n      ReactCurrentDispatcher.current = previousDispatcher;\n      reenableLogs();\n    }\n\n    Error.prepareStackTrace = previousPrepareStackTrace;\n  } // Fallback to just using the name if we couldn't make it throw.\n\n\n  var name = fn ? fn.displayName || fn.name : '';\n  var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';\n\n  {\n    if (typeof fn === 'function') {\n      componentFrameCache.set(fn, syntheticFrame);\n    }\n  }\n\n  return syntheticFrame;\n}\nfunction describeFunctionComponentFrame(fn, ownerFn) {\n  {\n    return describeNativeComponentFrame(fn, false);\n  }\n}\n\nfunction shouldConstruct(Component) {\n  var prototype = Component.prototype;\n  return !!(prototype && prototype.isReactComponent);\n}\n\nfunction describeUnknownElementTypeFrameInDEV(type, ownerFn) {\n\n  if (type == null) {\n    return '';\n  }\n\n  if (typeof type === 'function') {\n    {\n      return describeNativeComponentFrame(type, shouldConstruct(type));\n    }\n  }\n\n  if (typeof type === 'string') {\n    return describeBuiltInComponentFrame(type);\n  }\n\n  switch (type) {\n    case REACT_SUSPENSE_TYPE:\n      return describeBuiltInComponentFrame('Suspense');\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return describeBuiltInComponentFrame('SuspenseList');\n  }\n\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_FORWARD_REF_TYPE:\n        return describeFunctionComponentFrame(type.render);\n\n      case REACT_MEMO_TYPE:\n        // Memo may contain any component type so we recursively resolve it.\n        return describeUnknownElementTypeFrameInDEV(type.type, ownerFn);\n\n      case REACT_LAZY_TYPE:\n        {\n          var lazyComponent = type;\n          var payload = lazyComponent._payload;\n          var init = lazyComponent._init;\n\n          try {\n            // Lazy may contain any component type so we recursively resolve it.\n            return describeUnknownElementTypeFrameInDEV(init(payload), ownerFn);\n          } catch (x) {}\n        }\n    }\n  }\n\n  return '';\n}\n\nvar ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\nvar ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\nvar REACT_CLIENT_REFERENCE = Symbol.for('react.client.reference');\nvar specialPropKeyWarningShown;\nvar specialPropRefWarningShown;\nvar didWarnAboutStringRefs;\n\n{\n  didWarnAboutStringRefs = {};\n}\n\nfunction hasValidRef(config) {\n  {\n    if (hasOwnProperty.call(config, 'ref')) {\n      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;\n\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n\n  return config.ref !== undefined;\n}\n\nfunction hasValidKey(config) {\n  {\n    if (hasOwnProperty.call(config, 'key')) {\n      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;\n\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n\n  return config.key !== undefined;\n}\n\nfunction warnIfStringRefCannotBeAutoConverted(config, self) {\n  {\n    if (typeof config.ref === 'string' && ReactCurrentOwner.current && self && ReactCurrentOwner.current.stateNode !== self) {\n      var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);\n\n      if (!didWarnAboutStringRefs[componentName]) {\n        error('Component \"%s\" contains the string ref \"%s\". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config.ref);\n\n        didWarnAboutStringRefs[componentName] = true;\n      }\n    }\n  }\n}\n\nfunction defineKeyPropWarningGetter(props, displayName) {\n  {\n    var warnAboutAccessingKey = function () {\n      if (!specialPropKeyWarningShown) {\n        specialPropKeyWarningShown = true;\n\n        error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\n      }\n    };\n\n    warnAboutAccessingKey.isReactWarning = true;\n    Object.defineProperty(props, 'key', {\n      get: warnAboutAccessingKey,\n      configurable: true\n    });\n  }\n}\n\nfunction defineRefPropWarningGetter(props, displayName) {\n  {\n    {\n      var warnAboutAccessingRef = function () {\n        if (!specialPropRefWarningShown) {\n          specialPropRefWarningShown = true;\n\n          error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\n        }\n      };\n\n      warnAboutAccessingRef.isReactWarning = true;\n      Object.defineProperty(props, 'ref', {\n        get: warnAboutAccessingRef,\n        configurable: true\n      });\n    }\n  }\n}\n/**\n * Factory method to create a new React element. This no longer adheres to\n * the class pattern, so do not use new to call it. Also, instanceof check\n * will not work. Instead test $$typeof field against Symbol.for('react.element') to check\n * if something is a React Element.\n *\n * @param {*} type\n * @param {*} props\n * @param {*} key\n * @param {string|object} ref\n * @param {*} owner\n * @param {*} self A *temporary* helper to detect places where `this` is\n * different from the `owner` when React.createElement is called, so that we\n * can warn. We want to get rid of owner and replace string `ref`s with arrow\n * functions, and as long as `this` and owner are the same, there will be no\n * change in behavior.\n * @param {*} source An annotation object (added by a transpiler or otherwise)\n * indicating filename, line number, and/or other information.\n * @internal\n */\n\n\nfunction ReactElement(type, key, _ref, self, source, owner, props) {\n  var ref;\n\n  {\n    ref = _ref;\n  }\n\n  var element;\n\n  {\n    // In prod, `ref` is a regular property. It will be removed in a\n    // future release.\n    element = {\n      // This tag allows us to uniquely identify this as a React Element\n      $$typeof: REACT_ELEMENT_TYPE,\n      // Built-in properties that belong on the element\n      type: type,\n      key: key,\n      ref: ref,\n      props: props,\n      // Record the component responsible for creating this element.\n      _owner: owner\n    };\n  }\n\n  {\n    // The validation flag is currently mutative. We put it on\n    // an external backing store so that we can freeze the whole object.\n    // This can be replaced with a WeakMap once they are implemented in\n    // commonly used development environments.\n    element._store = {}; // To make comparing ReactElements easier for testing purposes, we make\n    // the validation flag non-enumerable (where possible, which should\n    // include every environment we run tests in), so the test framework\n    // ignores it.\n\n    Object.defineProperty(element._store, 'validated', {\n      configurable: false,\n      enumerable: false,\n      writable: true,\n      value: false\n    }); // debugInfo contains Server Component debug information.\n\n    Object.defineProperty(element, '_debugInfo', {\n      configurable: false,\n      enumerable: false,\n      writable: true,\n      value: null\n    });\n\n    if (Object.freeze) {\n      Object.freeze(element.props);\n      Object.freeze(element);\n    }\n  }\n\n  return element;\n}\nvar didWarnAboutKeySpread = {};\n/**\n * https://github.com/reactjs/rfcs/pull/107\n * @param {*} type\n * @param {object} props\n * @param {string} key\n */\n\nfunction jsxDEV$1(type, config, maybeKey, isStaticChildren, source, self) {\n  {\n    if (!isValidElementType(type)) {\n      // This is an invalid element type.\n      //\n      // We warn in this case but don't throw. We expect the element creation to\n      // succeed and there will likely be errors in render.\n      var info = '';\n\n      if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {\n        info += ' You likely forgot to export your component from the file ' + \"it's defined in, or you might have mixed up default and named imports.\";\n      }\n\n      var typeString;\n\n      if (type === null) {\n        typeString = 'null';\n      } else if (isArray(type)) {\n        typeString = 'array';\n      } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {\n        typeString = \"<\" + (getComponentNameFromType(type.type) || 'Unknown') + \" />\";\n        info = ' Did you accidentally export a JSX literal instead of a component?';\n      } else {\n        typeString = typeof type;\n      }\n\n      error('React.jsx: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);\n    } else {\n      // This is a valid element type.\n      // Skip key warning if the type isn't valid since our key validation logic\n      // doesn't expect a non-string/function type and can throw confusing\n      // errors. We don't want exception behavior to differ between dev and\n      // prod. (Rendering will throw with a helpful message and as soon as the\n      // type is fixed, the key warnings will appear.)\n      var children = config.children;\n\n      if (children !== undefined) {\n        if (isStaticChildren) {\n          if (isArray(children)) {\n            for (var i = 0; i < children.length; i++) {\n              validateChildKeys(children[i], type);\n            }\n\n            if (Object.freeze) {\n              Object.freeze(children);\n            }\n          } else {\n            error('React.jsx: Static children should always be an array. ' + 'You are likely explicitly calling React.jsxs or React.jsxDEV. ' + 'Use the Babel transform instead.');\n          }\n        } else {\n          validateChildKeys(children, type);\n        }\n      }\n    } // Warn about key spread regardless of whether the type is valid.\n\n\n    if (hasOwnProperty.call(config, 'key')) {\n      var componentName = getComponentNameFromType(type);\n      var keys = Object.keys(config).filter(function (k) {\n        return k !== 'key';\n      });\n      var beforeExample = keys.length > 0 ? '{key: someKey, ' + keys.join(': ..., ') + ': ...}' : '{key: someKey}';\n\n      if (!didWarnAboutKeySpread[componentName + beforeExample]) {\n        var afterExample = keys.length > 0 ? '{' + keys.join(': ..., ') + ': ...}' : '{}';\n\n        error('A props object containing a \"key\" prop is being spread into JSX:\\n' + '  let props = %s;\\n' + '  <%s {...props} />\\n' + 'React keys must be passed directly to JSX without using spread:\\n' + '  let props = %s;\\n' + '  <%s key={someKey} {...props} />', beforeExample, componentName, afterExample, componentName);\n\n        didWarnAboutKeySpread[componentName + beforeExample] = true;\n      }\n    }\n\n    var propName; // Reserved names are extracted\n\n    var props = {};\n    var key = null;\n    var ref = null; // Currently, key can be spread in as a prop. This causes a potential\n    // issue if key is also explicitly declared (ie. <div {...props} key=\"Hi\" />\n    // or <div key=\"Hi\" {...props} /> ). We want to deprecate key spread,\n    // but as an intermediary step, we will use jsxDEV for everything except\n    // <div {...props} key=\"Hi\" />, because we aren't currently able to tell if\n    // key is explicitly declared to be undefined or not.\n\n    if (maybeKey !== undefined) {\n      {\n        checkKeyStringCoercion(maybeKey);\n      }\n\n      key = '' + maybeKey;\n    }\n\n    if (hasValidKey(config)) {\n      {\n        checkKeyStringCoercion(config.key);\n      }\n\n      key = '' + config.key;\n    }\n\n    if (hasValidRef(config)) {\n      {\n        ref = config.ref;\n      }\n\n      warnIfStringRefCannotBeAutoConverted(config, self);\n    } // Remaining properties are added to a new props object\n\n\n    for (propName in config) {\n      if (hasOwnProperty.call(config, propName) && // Skip over reserved prop names\n      propName !== 'key' && (propName !== 'ref')) {\n        props[propName] = config[propName];\n      }\n    } // Resolve default props\n\n\n    if (type && type.defaultProps) {\n      var defaultProps = type.defaultProps;\n\n      for (propName in defaultProps) {\n        if (props[propName] === undefined) {\n          props[propName] = defaultProps[propName];\n        }\n      }\n    }\n\n    if (key || ref) {\n      var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;\n\n      if (key) {\n        defineKeyPropWarningGetter(props, displayName);\n      }\n\n      if (ref) {\n        defineRefPropWarningGetter(props, displayName);\n      }\n    }\n\n    var element = ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);\n\n    if (type === REACT_FRAGMENT_TYPE) {\n      validateFragmentProps(element);\n    }\n\n    return element;\n  }\n}\n\nfunction getDeclarationErrorAddendum() {\n  {\n    if (ReactCurrentOwner.current) {\n      var name = getComponentNameFromType(ReactCurrentOwner.current.type);\n\n      if (name) {\n        return '\\n\\nCheck the render method of `' + name + '`.';\n      }\n    }\n\n    return '';\n  }\n}\n/**\n * Ensure that every element either is passed in a static location, in an\n * array with an explicit keys property defined, or in an object literal\n * with valid key property.\n *\n * @internal\n * @param {ReactNode} node Statically passed child of any type.\n * @param {*} parentType node's parent's type.\n */\n\n\nfunction validateChildKeys(node, parentType) {\n  {\n    if (typeof node !== 'object' || !node) {\n      return;\n    }\n\n    if (node.$$typeof === REACT_CLIENT_REFERENCE) ; else if (isArray(node)) {\n      for (var i = 0; i < node.length; i++) {\n        var child = node[i];\n\n        if (isValidElement(child)) {\n          validateExplicitKey(child, parentType);\n        }\n      }\n    } else if (isValidElement(node)) {\n      // This element was passed in a valid location.\n      if (node._store) {\n        node._store.validated = true;\n      }\n    } else {\n      var iteratorFn = getIteratorFn(node);\n\n      if (typeof iteratorFn === 'function') {\n        // Entry iterators used to provide implicit keys,\n        // but now we print a separate warning for them later.\n        if (iteratorFn !== node.entries) {\n          var iterator = iteratorFn.call(node);\n          var step;\n\n          while (!(step = iterator.next()).done) {\n            if (isValidElement(step.value)) {\n              validateExplicitKey(step.value, parentType);\n            }\n          }\n        }\n      }\n    }\n  }\n}\n/**\n * Verifies the object is a ReactElement.\n * See https://reactjs.org/docs/react-api.html#isvalidelement\n * @param {?object} object\n * @return {boolean} True if `object` is a ReactElement.\n * @final\n */\n\n\nfunction isValidElement(object) {\n  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n}\nvar ownerHasKeyUseWarning = {};\n/**\n * Warn if the element doesn't have an explicit key assigned to it.\n * This element is in an array. The array could grow and shrink or be\n * reordered. All children that haven't already been validated are required to\n * have a \"key\" property assigned to it. Error statuses are cached so a warning\n * will only be shown once.\n *\n * @internal\n * @param {ReactElement} element Element that requires a key.\n * @param {*} parentType element's parent's type.\n */\n\nfunction validateExplicitKey(element, parentType) {\n  {\n    if (!element._store || element._store.validated || element.key != null) {\n      return;\n    }\n\n    element._store.validated = true;\n    var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);\n\n    if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {\n      return;\n    }\n\n    ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a\n    // property, it may be the creator of the child that's responsible for\n    // assigning it a key.\n\n    var childOwner = '';\n\n    if (element && element._owner && element._owner !== ReactCurrentOwner.current) {\n      // Give the component that originally created this child.\n      childOwner = \" It was passed a child from \" + getComponentNameFromType(element._owner.type) + \".\";\n    }\n\n    setCurrentlyValidatingElement(element);\n\n    error('Each child in a list should have a unique \"key\" prop.' + '%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);\n\n    setCurrentlyValidatingElement(null);\n  }\n}\n\nfunction setCurrentlyValidatingElement(element) {\n  {\n    if (element) {\n      var owner = element._owner;\n      var stack = describeUnknownElementTypeFrameInDEV(element.type, owner ? owner.type : null);\n      ReactDebugCurrentFrame.setExtraStackFrame(stack);\n    } else {\n      ReactDebugCurrentFrame.setExtraStackFrame(null);\n    }\n  }\n}\n\nfunction getCurrentComponentErrorInfo(parentType) {\n  {\n    var info = getDeclarationErrorAddendum();\n\n    if (!info) {\n      var parentName = getComponentNameFromType(parentType);\n\n      if (parentName) {\n        info = \"\\n\\nCheck the top-level render call using <\" + parentName + \">.\";\n      }\n    }\n\n    return info;\n  }\n}\n/**\n * Given a fragment, validate that it can only be provided with fragment props\n * @param {ReactElement} fragment\n */\n\n\nfunction validateFragmentProps(fragment) {\n  // TODO: Move this to render phase instead of at element creation.\n  {\n    var keys = Object.keys(fragment.props);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n\n      if (key !== 'children' && key !== 'key') {\n        setCurrentlyValidatingElement(fragment);\n\n        error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);\n\n        setCurrentlyValidatingElement(null);\n        break;\n      }\n    }\n\n    if (fragment.ref !== null) {\n      setCurrentlyValidatingElement(fragment);\n\n      error('Invalid attribute `ref` supplied to `React.Fragment`.');\n\n      setCurrentlyValidatingElement(null);\n    }\n  }\n}\n\nvar jsxDEV = jsxDEV$1 ;\n\nexports.Fragment = REACT_FRAGMENT_TYPE;\nexports.jsxDEV = jsxDEV;\n  })();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js":
/*!******************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react/jsx-dev-runtime.js ***!
  \******************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ./cjs/react-jsx-dev-runtime.development.js */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvcmVhY3QvanN4LWRldi1ydW50aW1lLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQUksS0FBcUMsRUFBRSxFQUUxQyxDQUFDO0FBQ0YsRUFBRSw4TEFBc0U7QUFDeEUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jb21waWxlZC9yZWFjdC9qc3gtZGV2LXJ1bnRpbWUuanM/NDFlNiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtanN4LWRldi1ydW50aW1lLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWpzeC1kZXYtcnVudGltZS5kZXZlbG9wbWVudC5qcycpO1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\n"));

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ var __webpack_exec__ = function(moduleId) { return __webpack_require__(__webpack_require__.s = moduleId); }
/******/ __webpack_require__.O(0, ["main-app"], function() { return __webpack_exec__("(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Csilen%5C%5COneDrive%5C%5CDocuments%5C%5CApp%20Development%5C%5CCircle%5C%5Capp%5C%5Cglobals.css%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Csilen%5C%5COneDrive%5C%5CDocuments%5C%5CApp%20Development%5C%5CCircle%5C%5Ccontexts%5C%5CContactContext.tsx%22%2C%22ids%22%3A%5B%22ContactProvider%22%5D%7D&server=false!"); });
/******/ var __webpack_exports__ = __webpack_require__.O();
/******/ _N_E = __webpack_exports__;
/******/ }
]);