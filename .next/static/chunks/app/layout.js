/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["app/layout"],{

/***/ "(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Csilen%5C%5COneDrive%5C%5CDocuments%5C%5CApp%20Development%5C%5CCircle%5C%5Capp%5C%5Cglobals.css%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Csilen%5C%5COneDrive%5C%5CDocuments%5C%5CApp%20Development%5C%5CCircle%5C%5Ccontexts%5C%5CContactContext.tsx%22%2C%22ids%22%3A%5B%22ContactProvider%22%5D%7D&server=false!":
/*!****************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Csilen%5C%5COneDrive%5C%5CDocuments%5C%5CApp%20Development%5C%5CCircle%5C%5Capp%5C%5Cglobals.css%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Csilen%5C%5COneDrive%5C%5CDocuments%5C%5CApp%20Development%5C%5CCircle%5C%5Ccontexts%5C%5CContactContext.tsx%22%2C%22ids%22%3A%5B%22ContactProvider%22%5D%7D&server=false! ***!
  \****************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("Promise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./app/globals.css */ \"(app-pages-browser)/./app/globals.css\"));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./contexts/ContactContext.tsx */ \"(app-pages-browser)/./contexts/ContactContext.tsx\"));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL25leHQtZmxpZ2h0LWNsaWVudC1lbnRyeS1sb2FkZXIuanM/bW9kdWxlcz0lN0IlMjJyZXF1ZXN0JTIyJTNBJTIyQyUzQSU1QyU1Q1VzZXJzJTVDJTVDc2lsZW4lNUMlNUNPbmVEcml2ZSU1QyU1Q0RvY3VtZW50cyU1QyU1Q0FwcCUyMERldmVsb3BtZW50JTVDJTVDQ2lyY2xlJTVDJTVDYXBwJTVDJTVDZ2xvYmFscy5jc3MlMjIlMkMlMjJpZHMlMjIlM0ElNUIlNUQlN0QmbW9kdWxlcz0lN0IlMjJyZXF1ZXN0JTIyJTNBJTIyQyUzQSU1QyU1Q1VzZXJzJTVDJTVDc2lsZW4lNUMlNUNPbmVEcml2ZSU1QyU1Q0RvY3VtZW50cyU1QyU1Q0FwcCUyMERldmVsb3BtZW50JTVDJTVDQ2lyY2xlJTVDJTVDY29udGV4dHMlNUMlNUNDb250YWN0Q29udGV4dC50c3glMjIlMkMlMjJpZHMlMjIlM0ElNUIlMjJDb250YWN0UHJvdmlkZXIlMjIlNUQlN0Qmc2VydmVyPWZhbHNlISIsIm1hcHBpbmdzIjoiQUFBQSw0SkFBcUg7QUFDckg7QUFDQSxvTEFBc0siLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLz9jYzIwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCgvKiB3ZWJwYWNrTW9kZTogXCJlYWdlclwiICovIFwiQzpcXFxcVXNlcnNcXFxcc2lsZW5cXFxcT25lRHJpdmVcXFxcRG9jdW1lbnRzXFxcXEFwcCBEZXZlbG9wbWVudFxcXFxDaXJjbGVcXFxcYXBwXFxcXGdsb2JhbHMuY3NzXCIpO1xuO1xuaW1wb3J0KC8qIHdlYnBhY2tNb2RlOiBcImVhZ2VyXCIsIHdlYnBhY2tFeHBvcnRzOiBbXCJDb250YWN0UHJvdmlkZXJcIl0gKi8gXCJDOlxcXFxVc2Vyc1xcXFxzaWxlblxcXFxPbmVEcml2ZVxcXFxEb2N1bWVudHNcXFxcQXBwIERldmVsb3BtZW50XFxcXENpcmNsZVxcXFxjb250ZXh0c1xcXFxDb250YWN0Q29udGV4dC50c3hcIik7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Csilen%5C%5COneDrive%5C%5CDocuments%5C%5CApp%20Development%5C%5CCircle%5C%5Capp%5C%5Cglobals.css%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Csilen%5C%5COneDrive%5C%5CDocuments%5C%5CApp%20Development%5C%5CCircle%5C%5Ccontexts%5C%5CContactContext.tsx%22%2C%22ids%22%3A%5B%22ContactProvider%22%5D%7D&server=false!\n"));

/***/ }),

/***/ "(app-pages-browser)/./app/globals.css":
/*!*************************!*\
  !*** ./app/globals.css ***!
  \*************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (\"16bd8f34d6c2\");\nif (true) { module.hot.accept() }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2FwcC9nbG9iYWxzLmNzcyIsIm1hcHBpbmdzIjoiO0FBQUEsK0RBQWUsY0FBYztBQUM3QixJQUFJLElBQVUsSUFBSSxpQkFBaUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vYXBwL2dsb2JhbHMuY3NzPzg0ZjAiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgXCIxNmJkOGYzNGQ2YzJcIlxuaWYgKG1vZHVsZS5ob3QpIHsgbW9kdWxlLmhvdC5hY2NlcHQoKSB9XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/globals.css\n"));

/***/ }),

/***/ "(app-pages-browser)/./contexts/ContactContext.tsx":
/*!*************************************!*\
  !*** ./contexts/ContactContext.tsx ***!
  \*************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ContactProvider: function() { return /* binding */ ContactProvider; },\n/* harmony export */   useContacts: function() { return /* binding */ useContacts; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _data_dataService__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../data/dataService */ \"(app-pages-browser)/./data/dataService.ts\");\n/* __next_internal_client_entry_do_not_use__ ContactProvider,useContacts auto */ \nvar _s = $RefreshSig$(), _s1 = $RefreshSig$();\n\n\n// Initial state\nconst initialState = {\n    contacts: [],\n    subjects: [],\n    organizations: [],\n    occupations: [],\n    relationships: [],\n    sentiments: [],\n    notes: [],\n    isLoading: true,\n    error: null\n};\n// Reducer function\nfunction contactReducer(state, action) {\n    switch(action.type){\n        case \"SET_LOADING\":\n            return {\n                ...state,\n                isLoading: action.payload\n            };\n        case \"SET_ERROR\":\n            return {\n                ...state,\n                error: action.payload\n            };\n        case \"SET_DATA\":\n            return {\n                ...state,\n                ...action.payload,\n                isLoading: false,\n                error: null\n            };\n        case \"ADD_CONTACT\":\n            return {\n                ...state,\n                contacts: [\n                    ...state.contacts,\n                    action.payload\n                ]\n            };\n        case \"UPDATE_CONTACT\":\n            return {\n                ...state,\n                contacts: state.contacts.map((contact)=>contact.id === action.payload.id ? action.payload : contact)\n            };\n        case \"DELETE_CONTACT\":\n            return {\n                ...state,\n                contacts: state.contacts.filter((contact)=>contact.id !== action.payload)\n            };\n        case \"ADD_NOTE\":\n            return {\n                ...state,\n                notes: [\n                    ...state.notes,\n                    action.payload\n                ]\n            };\n        case \"UPDATE_NOTE\":\n            return {\n                ...state,\n                notes: state.notes.map((note)=>note.id === action.payload.id ? action.payload : note)\n            };\n        case \"UPDATE_SUBJECT\":\n            return {\n                ...state,\n                subjects: state.subjects.map((subject)=>subject.id === action.payload.id ? action.payload : subject)\n            };\n        case \"ADD_ORGANIZATION\":\n            return {\n                ...state,\n                organizations: [\n                    ...state.organizations,\n                    action.payload\n                ]\n            };\n        case \"ADD_OCCUPATION\":\n            return {\n                ...state,\n                occupations: [\n                    ...state.occupations,\n                    action.payload\n                ]\n            };\n        case \"RESET_TO_SAMPLE\":\n            return {\n                ...initialState,\n                isLoading: true\n            };\n        default:\n            return state;\n    }\n}\n// Create context\nconst ContactContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(undefined);\n// Provider component\nfunction ContactProvider(param) {\n    let { children } = param;\n    _s();\n    const [state, dispatch] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useReducer)(contactReducer, initialState);\n    // Load data on mount\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        loadData();\n    }, []);\n    const loadData = async ()=>{\n        try {\n            dispatch({\n                type: \"SET_LOADING\",\n                payload: true\n            });\n            dispatch({\n                type: \"SET_ERROR\",\n                payload: null\n            });\n            const data = await _data_dataService__WEBPACK_IMPORTED_MODULE_2__.dataService.getAllData();\n            dispatch({\n                type: \"SET_DATA\",\n                payload: data\n            });\n        } catch (error) {\n            console.error(\"Failed to load data:\", error);\n            dispatch({\n                type: \"SET_ERROR\",\n                payload: \"Failed to load data\"\n            });\n            dispatch({\n                type: \"SET_LOADING\",\n                payload: false\n            });\n        }\n    };\n    const addContact = async (contact)=>{\n        try {\n            const newContact = await _data_dataService__WEBPACK_IMPORTED_MODULE_2__.dataService.addContact(contact);\n            dispatch({\n                type: \"ADD_CONTACT\",\n                payload: newContact\n            });\n        } catch (error) {\n            console.error(\"Failed to add contact:\", error);\n            throw error;\n        }\n    };\n    const updateContact = async (id, updates)=>{\n        try {\n            const updatedContact = await _data_dataService__WEBPACK_IMPORTED_MODULE_2__.dataService.updateContact(id, updates);\n            dispatch({\n                type: \"UPDATE_CONTACT\",\n                payload: updatedContact\n            });\n        } catch (error) {\n            console.error(\"Failed to update contact:\", error);\n            throw error;\n        }\n    };\n    const deleteContact = async (id)=>{\n        try {\n            await _data_dataService__WEBPACK_IMPORTED_MODULE_2__.dataService.deleteContact(id);\n            dispatch({\n                type: \"DELETE_CONTACT\",\n                payload: id\n            });\n        } catch (error) {\n            console.error(\"Failed to delete contact:\", error);\n            throw error;\n        }\n    };\n    const addNote = async (note)=>{\n        try {\n            const newNote = await _data_dataService__WEBPACK_IMPORTED_MODULE_2__.dataService.addNote(note);\n            dispatch({\n                type: \"ADD_NOTE\",\n                payload: newNote\n            });\n        } catch (error) {\n            console.error(\"Failed to add note:\", error);\n            throw error;\n        }\n    };\n    const updateNote = async (id, updates)=>{\n        try {\n            const updatedNote = await _data_dataService__WEBPACK_IMPORTED_MODULE_2__.dataService.updateNote(id, updates);\n            dispatch({\n                type: \"UPDATE_NOTE\",\n                payload: updatedNote\n            });\n        } catch (error) {\n            console.error(\"Failed to update note:\", error);\n            throw error;\n        }\n    };\n    const resetToSample = async ()=>{\n        try {\n            dispatch({\n                type: \"RESET_TO_SAMPLE\"\n            });\n            await loadData();\n        } catch (error) {\n            console.error(\"Failed to reset to sample data:\", error);\n            throw error;\n        }\n    };\n    // Legacy synchronous methods\n    const addContactSync = (contact)=>{\n        const newContact = {\n            ...contact,\n            id: Date.now()\n        };\n        dispatch({\n            type: \"ADD_CONTACT\",\n            payload: newContact\n        });\n    };\n    const updateContactSync = (id, updates)=>{\n        dispatch({\n            type: \"UPDATE_CONTACT\",\n            payload: {\n                id,\n                ...updates\n            }\n        });\n    };\n    const deleteContactSync = (id)=>{\n        dispatch({\n            type: \"DELETE_CONTACT\",\n            payload: id\n        });\n    };\n    const addNoteSync = (note)=>{\n        const newNote = {\n            ...note,\n            id: Date.now(),\n            createdAt: new Date().toISOString()\n        };\n        dispatch({\n            type: \"ADD_NOTE\",\n            payload: newNote\n        });\n    };\n    const updateNoteSync = (id, updates)=>{\n        dispatch({\n            type: \"UPDATE_NOTE\",\n            payload: {\n                id,\n                ...updates\n            }\n        });\n    };\n    const resetToSampleSync = ()=>{\n        dispatch({\n            type: \"RESET_TO_SAMPLE\"\n        });\n        loadData();\n    };\n    // Enhanced async methods\n    const updateContactAsync = async (id, updates)=>{\n        try {\n            const updatedContact = await _data_dataService__WEBPACK_IMPORTED_MODULE_2__.dataService.updateContact(id, updates);\n            dispatch({\n                type: \"UPDATE_CONTACT\",\n                payload: updatedContact\n            });\n        } catch (error) {\n            console.error(\"Failed to update contact:\", error);\n            throw error;\n        }\n    };\n    const updateSubjectAsync = async (id, updates)=>{\n        try {\n            // For now, we'll update the subject in the local state\n            // In a real app, you'd call dataService.updateSubject(id, updates)\n            const currentSubject = state.subjects.find((s)=>s.id === id);\n            if (currentSubject) {\n                const updatedSubject = {\n                    ...currentSubject,\n                    ...updates\n                };\n                dispatch({\n                    type: \"UPDATE_SUBJECT\",\n                    payload: updatedSubject\n                });\n            }\n        } catch (error) {\n            console.error(\"Failed to update subject:\", error);\n            throw error;\n        }\n    };\n    const addContactAsync = async (contact)=>{\n        try {\n            const newContact = await _data_dataService__WEBPACK_IMPORTED_MODULE_2__.dataService.addContact(contact);\n            dispatch({\n                type: \"ADD_CONTACT\",\n                payload: newContact\n            });\n        } catch (error) {\n            console.error(\"Failed to add contact:\", error);\n            throw error;\n        }\n    };\n    const deleteContactAsync = async (id)=>{\n        try {\n            await _data_dataService__WEBPACK_IMPORTED_MODULE_2__.dataService.deleteContact(id);\n            dispatch({\n                type: \"DELETE_CONTACT\",\n                payload: id\n            });\n        } catch (error) {\n            console.error(\"Failed to delete contact:\", error);\n            throw error;\n        }\n    };\n    const addSubjectAsync = async (subject)=>{\n        try {\n            const newSubject = await _data_dataService__WEBPACK_IMPORTED_MODULE_2__.dataService.addSubject(subject);\n            // Note: We need to add SUBJECT action type to the reducer\n            // For now, we'll reload all data\n            await loadData();\n        } catch (error) {\n            console.error(\"Failed to add subject:\", error);\n            throw error;\n        }\n    };\n    const addOrganizationAsync = async (organization)=>{\n        try {\n            const newOrganization = await _data_dataService__WEBPACK_IMPORTED_MODULE_2__.dataService.addOrganization(organization);\n            dispatch({\n                type: \"ADD_ORGANIZATION\",\n                payload: newOrganization\n            });\n            return newOrganization;\n        } catch (error) {\n            console.error(\"Failed to add organization:\", error);\n            throw error;\n        }\n    };\n    const addOccupationAsync = async (occupation)=>{\n        try {\n            const newOccupation = await _data_dataService__WEBPACK_IMPORTED_MODULE_2__.dataService.addOccupation(occupation);\n            dispatch({\n                type: \"ADD_OCCUPATION\",\n                payload: newOccupation\n            });\n            return newOccupation;\n        } catch (error) {\n            console.error(\"Failed to add occupation:\", error);\n            throw error;\n        }\n    };\n    const addRelationshipAsync = async (relationship)=>{\n        try {\n            const newRelationship = await _data_dataService__WEBPACK_IMPORTED_MODULE_2__.dataService.addRelationship(relationship);\n            // Note: We need to add RELATIONSHIP action type to the reducer\n            // For now, we'll reload all data\n            await loadData();\n        } catch (error) {\n            console.error(\"Failed to add relationship:\", error);\n            throw error;\n        }\n    };\n    const addSentimentAsync = async (sentiment)=>{\n        try {\n            const newSentiment = await _data_dataService__WEBPACK_IMPORTED_MODULE_2__.dataService.addSentiment(sentiment);\n            // Note: We need to add SENTIMENT action type to the reducer\n            // For now, we'll reload all data\n            await loadData();\n        } catch (error) {\n            console.error(\"Failed to add sentiment:\", error);\n            throw error;\n        }\n    };\n    const addNoteAsync = async (note)=>{\n        try {\n            const newNote = await _data_dataService__WEBPACK_IMPORTED_MODULE_2__.dataService.addNote(note);\n            dispatch({\n                type: \"ADD_NOTE\",\n                payload: newNote\n            });\n        } catch (error) {\n            console.error(\"Failed to add note:\", error);\n            throw error;\n        }\n    };\n    const updateNoteAsync = async (id, updates)=>{\n        try {\n            const updatedNote = await _data_dataService__WEBPACK_IMPORTED_MODULE_2__.dataService.updateNote(id, updates);\n            dispatch({\n                type: \"UPDATE_NOTE\",\n                payload: updatedNote\n            });\n        } catch (error) {\n            console.error(\"Failed to update note:\", error);\n            throw error;\n        }\n    };\n    const value = {\n        state,\n        addContact: addContactSync,\n        updateContact: updateContactSync,\n        deleteContact: deleteContactSync,\n        addNote: addNoteSync,\n        updateNote: updateNoteSync,\n        resetToSample: resetToSampleSync,\n        updateContactAsync,\n        addContactAsync,\n        deleteContactAsync,\n        addSubjectAsync,\n        updateSubjectAsync,\n        addOrganizationAsync,\n        addOccupationAsync,\n        addRelationshipAsync,\n        addSentimentAsync,\n        addNoteAsync,\n        updateNoteAsync\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(ContactContext.Provider, {\n        value: value,\n        children: children\n    }, void 0, false, {\n        fileName: \"C:\\\\Users\\\\silen\\\\OneDrive\\\\Documents\\\\App Development\\\\Circle\\\\contexts\\\\ContactContext.tsx\",\n        lineNumber: 443,\n        columnNumber: 5\n    }, this);\n}\n_s(ContactProvider, \"bgCdjuTOmPdSBRwTap80EFd9Y3U=\");\n_c = ContactProvider;\n// Custom hook to use the context\nfunction useContacts() {\n    _s1();\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(ContactContext);\n    if (context === undefined) {\n        throw new Error(\"useContacts must be used within a ContactProvider\");\n    }\n    return context;\n}\n_s1(useContacts, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"ContactProvider\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./contexts/ContactContext.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./data/dataService.ts":
/*!*****************************!*\
  !*** ./data/dataService.ts ***!
  \*****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MockDataService: function() { return /* binding */ MockDataService; },\n/* harmony export */   dataService: function() { return /* binding */ dataService; }\n/* harmony export */ });\n/* harmony import */ var _sampleData__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sampleData */ \"(app-pages-browser)/./data/sampleData.ts\");\n\n// Helper function to safely access localStorage\nconst getLocalStorage = (key)=>{\n    if ( true && window.localStorage) {\n        return window.localStorage.getItem(key);\n    }\n    return null;\n};\nconst setLocalStorage = (key, value)=>{\n    if ( true && window.localStorage) {\n        window.localStorage.setItem(key, value);\n    }\n};\nconst removeLocalStorage = (key)=>{\n    if ( true && window.localStorage) {\n        window.localStorage.removeItem(key);\n    }\n};\n// Mock implementation that simulates database operations\nclass MockDataService {\n    loadData() {\n        const savedData = getLocalStorage(\"circle-data\");\n        if (savedData) {\n            try {\n                const parsed = JSON.parse(savedData);\n                // Validate data structure\n                if (this.isValidData(parsed)) {\n                    this.data = parsed;\n                } else {\n                    console.warn(\"MockDataService: Invalid data format, using sample data\");\n                    removeLocalStorage(\"circle-data\");\n                }\n            } catch (error) {\n                console.error(\"MockDataService: Failed to parse saved data, using sample data\");\n                removeLocalStorage(\"circle-data\");\n            }\n        }\n    }\n    isValidData(data) {\n        return data.subjects && Array.isArray(data.subjects) && data.relationships && Array.isArray(data.relationships) && data.contacts && Array.isArray(data.contacts) && data.organizations && Array.isArray(data.organizations) && data.occupations && Array.isArray(data.occupations) && data.sentiments && Array.isArray(data.sentiments) && data.notes && Array.isArray(data.notes);\n    }\n    saveData() {\n        setLocalStorage(\"circle-data\", JSON.stringify(this.data));\n    }\n    simulateDelay() {\n        // Simulate network delay (50-200ms)\n        const delay = Math.random() * 150 + 50;\n        return new Promise((resolve)=>setTimeout(resolve, delay));\n    }\n    async updateContact(id, updates) {\n        await this.simulateDelay();\n        const contactIndex = this.data.contacts.findIndex((c)=>c.id === id);\n        if (contactIndex === -1) {\n            throw new Error(\"Contact with id \".concat(id, \" not found\"));\n        }\n        // Update the contact\n        this.data.contacts[contactIndex] = {\n            ...this.data.contacts[contactIndex],\n            ...updates\n        };\n        this.saveData();\n        return this.data.contacts[contactIndex];\n    }\n    async addContact(contact) {\n        await this.simulateDelay();\n        const newContact = {\n            ...contact,\n            id: Date.now() // Simple ID generation for mock\n        };\n        this.data.contacts.push(newContact);\n        this.saveData();\n        return newContact;\n    }\n    async deleteContact(id) {\n        await this.simulateDelay();\n        this.loadData(); // Ensure data is loaded\n        const initialLength = this.data.contacts.length;\n        this.data.contacts = this.data.contacts.filter((c)=>c.id !== id);\n        if (this.data.contacts.length === initialLength) {\n            throw new Error(\"Contact with id \".concat(id, \" not found\"));\n        }\n        this.saveData();\n    }\n    async addSubject(subject) {\n        await this.simulateDelay();\n        const newSubject = {\n            ...subject,\n            id: Date.now()\n        };\n        this.data.subjects.push(newSubject);\n        this.saveData();\n        return newSubject;\n    }\n    async addOrganization(organization) {\n        await this.simulateDelay();\n        const newOrganization = {\n            ...organization,\n            id: Date.now()\n        };\n        this.data.organizations.push(newOrganization);\n        this.saveData();\n        return newOrganization;\n    }\n    async addOccupation(occupation) {\n        await this.simulateDelay();\n        const newOccupation = {\n            ...occupation,\n            id: Date.now()\n        };\n        this.data.occupations.push(newOccupation);\n        this.saveData();\n        return newOccupation;\n    }\n    async addRelationship(relationship) {\n        await this.simulateDelay();\n        const newRelationship = {\n            ...relationship,\n            id: Date.now()\n        };\n        this.data.relationships.push(newRelationship);\n        this.saveData();\n        return newRelationship;\n    }\n    async addSentiment(sentiment) {\n        await this.simulateDelay();\n        const newSentiment = {\n            ...sentiment,\n            id: Date.now()\n        };\n        this.data.sentiments.push(newSentiment);\n        this.saveData();\n        return newSentiment;\n    }\n    async addNote(note) {\n        await this.simulateDelay();\n        const newNote = {\n            ...note,\n            id: Date.now(),\n            createdAt: new Date().toISOString()\n        };\n        this.data.notes.push(newNote);\n        this.saveData();\n        return newNote;\n    }\n    async updateNote(id, updates) {\n        await this.simulateDelay();\n        const noteIndex = this.data.notes.findIndex((n)=>n.id === id);\n        if (noteIndex === -1) {\n            throw new Error(\"Note with id \".concat(id, \" not found\"));\n        }\n        // Update the note\n        this.data.notes[noteIndex] = {\n            ...this.data.notes[noteIndex],\n            ...updates\n        };\n        this.saveData();\n        return this.data.notes[noteIndex];\n    }\n    async getAllData() {\n        var _this_data_contacts_, _this_data_contacts_1;\n        console.log(\"\\uD83D\\uDCE1 MockDataService: getAllData called\");\n        console.log(\"\\uD83D\\uDD0D MockDataService: Current internal data source:\", {\n            isFromLocalStorage: this.data !== (0,_sampleData__WEBPACK_IMPORTED_MODULE_0__.getSampleData)(),\n            contactsCount: this.data.contacts.length,\n            sampleContactName: ((_this_data_contacts_ = this.data.contacts[0]) === null || _this_data_contacts_ === void 0 ? void 0 : _this_data_contacts_.name) || \"none\"\n        });\n        await this.simulateDelay();\n        // Reload from localStorage to get latest data\n        console.log(\"\\uD83D\\uDD04 MockDataService: Reloading from localStorage before returning data\");\n        this.loadData();\n        console.log(\"\\uD83D\\uDCE4 MockDataService: Returning data to caller:\", {\n            contactsCount: this.data.contacts.length,\n            notesCount: this.data.notes.length,\n            sampleContactName: ((_this_data_contacts_1 = this.data.contacts[0]) === null || _this_data_contacts_1 === void 0 ? void 0 : _this_data_contacts_1.name) || \"none\",\n            dataSource: this.data !== (0,_sampleData__WEBPACK_IMPORTED_MODULE_0__.getSampleData)() ? \"localStorage\" : \"sampleData\"\n        });\n        // Return a copy to prevent direct mutations\n        return {\n            contacts: [\n                ...this.data.contacts\n            ],\n            subjects: [\n                ...this.data.subjects\n            ],\n            organizations: [\n                ...this.data.organizations\n            ],\n            occupations: [\n                ...this.data.occupations\n            ],\n            relationships: [\n                ...this.data.relationships\n            ],\n            sentiments: [\n                ...this.data.sentiments\n            ],\n            notes: [\n                ...this.data.notes\n            ]\n        };\n    }\n    constructor(){\n        // Initialize with sample data first, then try to load from localStorage\n        this.data = (0,_sampleData__WEBPACK_IMPORTED_MODULE_0__.getSampleData)();\n        // Load from localStorage only on the client side\n        if (true) {\n            this.loadData();\n        }\n    }\n}\n// Export singleton instance\nconst dataService = new MockDataService();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./data/dataService.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./data/sampleData.ts":
/*!****************************!*\
  !*** ./data/sampleData.ts ***!
  \****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getMutableSampleData: function() { return /* binding */ getMutableSampleData; },\n/* harmony export */   getSampleData: function() { return /* binding */ getSampleData; },\n/* harmony export */   resetMutableSampleData: function() { return /* binding */ resetMutableSampleData; },\n/* harmony export */   sampleContacts: function() { return /* binding */ sampleContacts; },\n/* harmony export */   sampleNotes: function() { return /* binding */ sampleNotes; },\n/* harmony export */   sampleOccupations: function() { return /* binding */ sampleOccupations; },\n/* harmony export */   sampleOrganizations: function() { return /* binding */ sampleOrganizations; },\n/* harmony export */   sampleRelationships: function() { return /* binding */ sampleRelationships; },\n/* harmony export */   sampleSentiments: function() { return /* binding */ sampleSentiments; },\n/* harmony export */   sampleSubjects: function() { return /* binding */ sampleSubjects; },\n/* harmony export */   updateMutableSampleData: function() { return /* binding */ updateMutableSampleData; }\n/* harmony export */ });\nconst sampleOrganizations = [\n    {\n        id: 1,\n        name: \"TechCorp Inc.\"\n    },\n    {\n        id: 2,\n        name: \"Global Marketing Solutions\"\n    },\n    {\n        id: 3,\n        name: \"Creative Studio Pro\"\n    },\n    {\n        id: 4,\n        name: \"InnovateTech\"\n    },\n    {\n        id: 5,\n        name: \"DataFlow Analytics\"\n    },\n    {\n        id: 6,\n        name: \"Strategic Partners LLC\"\n    },\n    {\n        id: 7,\n        name: \"First National Bank\"\n    },\n    {\n        id: 8,\n        name: \"UserFirst Design\"\n    },\n    {\n        id: 9,\n        name: \"SalesForce Pro\"\n    },\n    {\n        id: 10,\n        name: \"Content Creators Co.\"\n    },\n    {\n        id: 11,\n        name: \"Efficient Operations Ltd.\"\n    },\n    {\n        id: 12,\n        name: \"Business Insights Group\"\n    }\n];\nconst sampleOccupations = [\n    {\n        id: 1,\n        title: \"Software Engineer\"\n    },\n    {\n        id: 2,\n        title: \"Marketing Manager\"\n    },\n    {\n        id: 3,\n        title: \"Designer\"\n    },\n    {\n        id: 4,\n        title: \"Product Manager\"\n    },\n    {\n        id: 5,\n        title: \"Data Scientist\"\n    },\n    {\n        id: 6,\n        title: \"Consultant\"\n    },\n    {\n        id: 7,\n        title: \"Financial Analyst\"\n    },\n    {\n        id: 8,\n        title: \"UX Researcher\"\n    },\n    {\n        id: 9,\n        title: \"Sales Director\"\n    },\n    {\n        id: 10,\n        title: \"Content Strategist\"\n    },\n    {\n        id: 11,\n        title: \"Operations Manager\"\n    },\n    {\n        id: 12,\n        title: \"Business Analyst\"\n    }\n];\nconst sampleSubjects = [\n    {\n        id: 1,\n        label: \"coffee\",\n        category: \"activity\"\n    },\n    {\n        id: 2,\n        label: \"tech\",\n        category: \"interest\"\n    },\n    {\n        id: 3,\n        label: \"music\",\n        category: \"hobby\"\n    },\n    {\n        id: 4,\n        label: \"travel\",\n        category: \"hobby\"\n    },\n    {\n        id: 5,\n        label: \"family\",\n        category: \"organization\"\n    },\n    {\n        id: 6,\n        label: \"food\",\n        category: \"interest\"\n    },\n    {\n        id: 7,\n        label: \"art\",\n        category: \"hobby\"\n    },\n    {\n        id: 8,\n        label: \"sports\",\n        category: \"activity\"\n    },\n    {\n        id: 9,\n        label: \"reading\",\n        category: \"hobby\"\n    },\n    {\n        id: 10,\n        label: \"photography\",\n        category: \"hobby\"\n    },\n    {\n        id: 11,\n        label: \"cooking\",\n        category: \"hobby\"\n    },\n    {\n        id: 12,\n        label: \"gaming\",\n        category: \"hobby\"\n    },\n    {\n        id: 13,\n        label: \"yoga\",\n        category: \"activity\"\n    },\n    {\n        id: 14,\n        label: \"dancing\",\n        category: \"activity\"\n    },\n    {\n        id: 15,\n        label: \"hiking\",\n        category: \"activity\"\n    },\n    {\n        id: 16,\n        label: \"swimming\",\n        category: \"activity\"\n    },\n    {\n        id: 17,\n        label: \"cycling\",\n        category: \"activity\"\n    },\n    {\n        id: 18,\n        label: \"running\",\n        category: \"activity\"\n    },\n    {\n        id: 19,\n        label: \"gardening\",\n        category: \"hobby\"\n    },\n    {\n        id: 20,\n        label: \"painting\",\n        category: \"hobby\"\n    },\n    {\n        id: 21,\n        label: \"writing\",\n        category: \"hobby\"\n    },\n    {\n        id: 22,\n        label: \"languages\",\n        category: \"interest\"\n    },\n    {\n        id: 23,\n        label: \"science\",\n        category: \"interest\"\n    },\n    {\n        id: 24,\n        label: \"history\",\n        category: \"interest\"\n    },\n    {\n        id: 25,\n        label: \"politics\",\n        category: \"interest\"\n    },\n    {\n        id: 26,\n        label: \"fashion\",\n        category: \"interest\"\n    },\n    {\n        id: 27,\n        label: \"cars\",\n        category: \"interest\"\n    },\n    {\n        id: 28,\n        label: \"pets\",\n        category: \"interest\"\n    },\n    {\n        id: 29,\n        label: \"volunteering\",\n        category: \"activity\"\n    },\n    {\n        id: 30,\n        label: \"meditation\",\n        category: \"activity\"\n    },\n    {\n        id: 31,\n        label: \"startup\",\n        category: \"organization\"\n    },\n    {\n        id: 32,\n        label: \"corporate\",\n        category: \"organization\"\n    },\n    {\n        id: 33,\n        label: \"nonprofit\",\n        category: \"organization\"\n    },\n    {\n        id: 34,\n        label: \"freelance\",\n        category: \"organization\"\n    },\n    {\n        id: 35,\n        label: \"academia\",\n        category: \"organization\"\n    }\n];\nconst sampleRelationships = [\n    {\n        id: 1,\n        label: \"friend\",\n        category: \"personal\"\n    },\n    {\n        id: 2,\n        label: \"colleague\",\n        category: \"professional\"\n    },\n    {\n        id: 3,\n        label: \"mentor\",\n        category: \"professional\"\n    },\n    {\n        id: 4,\n        label: \"supervisor\",\n        category: \"professional\"\n    },\n    {\n        id: 5,\n        label: \"close friend\",\n        category: \"personal\"\n    },\n    {\n        id: 6,\n        label: \"acquaintance\",\n        category: \"personal\"\n    },\n    {\n        id: 7,\n        label: \"partner\",\n        category: \"romantic\"\n    },\n    {\n        id: 8,\n        label: \"date\",\n        category: \"romantic\"\n    }\n];\nconst sampleSentiments = [\n    {\n        id: 1,\n        label: \"excited\",\n        category: \"positive\"\n    },\n    {\n        id: 2,\n        label: \"happy\",\n        category: \"positive\"\n    },\n    {\n        id: 3,\n        label: \"enthusiastic\",\n        category: \"positive\"\n    },\n    {\n        id: 4,\n        label: \"satisfied\",\n        category: \"positive\"\n    },\n    {\n        id: 5,\n        label: \"optimistic\",\n        category: \"positive\"\n    },\n    {\n        id: 6,\n        label: \"neutral\",\n        category: \"neutral\"\n    },\n    {\n        id: 7,\n        label: \"calm\",\n        category: \"neutral\"\n    },\n    {\n        id: 8,\n        label: \"focused\",\n        category: \"neutral\"\n    },\n    {\n        id: 9,\n        label: \"concerned\",\n        category: \"negative\"\n    },\n    {\n        id: 10,\n        label: \"frustrated\",\n        category: \"negative\"\n    },\n    {\n        id: 11,\n        label: \"worried\",\n        category: \"negative\"\n    },\n    {\n        id: 12,\n        label: \"disappointed\",\n        category: \"negative\"\n    }\n];\nconst sampleNotes = [\n    // Alex Johnson (Contact 1) - 5 notes\n    {\n        id: 1,\n        text: \"Had an amazing coffee meeting with Alex at the new downtown caf\\xe9. We discussed potential collaboration opportunities and shared insights about current market trends. The conversation was incredibly productive and we agreed to follow up next week with a concrete proposal.\",\n        time: \"Dec 15, 2024 2:00 PM\",\n        sentimentIds: [\n            1,\n            3\n        ],\n        contactIds: [\n            1\n        ]\n    },\n    {\n        id: 2,\n        text: \"Met Alex at the tech conference and had an engaging discussion about AI trends. Alex shared fascinating insights about machine learning applications in their current project. This was a great networking opportunity that could lead to future collaborations.\",\n        time: \"Dec 10, 2024 4:30 PM\",\n        sentimentIds: [\n            1\n        ],\n        contactIds: [\n            1\n        ]\n    },\n    {\n        id: 3,\n        text: \"Quick lunch meeting to discuss potential partnership opportunities. Alex mentioned they're actively looking for developers with React experience for their upcoming project. I promised to connect them with our development team.\",\n        time: \"Dec 5, 2024 12:00 PM\",\n        sentimentIds: [\n            6\n        ],\n        contactIds: [\n            1\n        ]\n    },\n    {\n        id: 4,\n        text: \"Phone call about project timeline concerns. Alex expressed some worries about meeting the aggressive deadline for their product launch. I offered to help review their code architecture and provide optimization suggestions.\",\n        time: \"Nov 28, 2024 3:00 PM\",\n        sentimentIds: [\n            9,\n            6\n        ],\n        contactIds: [\n            1\n        ]\n    },\n    {\n        id: 5,\n        text: \"Ran into Alex at the gym and had a candid conversation about work-life balance. Alex mentioned they've been working long hours recently and feeling the stress. I suggested some time management techniques that have worked for me.\",\n        time: \"Nov 20, 2024 6:00 PM\",\n        sentimentIds: [\n            9,\n            7\n        ],\n        contactIds: [\n            1\n        ]\n    },\n    // Sarah Chen (Contact 2) - 5 notes\n    {\n        id: 6,\n        text: \"Team lunch meeting focused on Q1 strategy planning. Sarah led an excellent discussion about upcoming projects and resource allocation. However, some concerns were raised about the feasibility of our ambitious timeline.\",\n        time: \"Dec 12, 2024 12:00 PM\",\n        sentimentIds: [\n            9,\n            8\n        ],\n        contactIds: [\n            2\n        ]\n    },\n    {\n        id: 7,\n        text: \"Had an inspiring coffee chat about Sarah's career development goals. She shared her strong interest in transitioning into product management and asked for advice. We discussed potential opportunities and skills she should develop.\",\n        time: \"Dec 8, 2024 10:00 AM\",\n        sentimentIds: [\n            1,\n            5\n        ],\n        contactIds: [\n            2\n        ]\n    },\n    {\n        id: 8,\n        text: \"Quick hallway conversation about the new design system implementation. Sarah provided valuable feedback about the color palette and suggested important improvements for accessibility compliance. Her attention to detail is impressive.\",\n        time: \"Dec 3, 2024 2:30 PM\",\n        sentimentIds: [\n            8,\n            4\n        ],\n        contactIds: [\n            2\n        ]\n    },\n    {\n        id: 9,\n        text: \"Attended the contemporary art gallery opening together. Sarah was genuinely excited about the new exhibition and we had a wonderful discussion about modern artistic trends. It was a great cultural experience that deepened our friendship.\",\n        time: \"Nov 25, 2024 7:00 PM\",\n        sentimentIds: [\n            1,\n            2\n        ],\n        contactIds: [\n            2\n        ]\n    },\n    {\n        id: 10,\n        text: \"Phone call regarding cross-team project collaboration challenges. Sarah mentioned some communication issues between departments that are affecting project timelines. I offered to help facilitate a meeting between the teams.\",\n        time: \"Nov 18, 2024 4:00 PM\",\n        sentimentIds: [\n            6,\n            9\n        ],\n        contactIds: [\n            2\n        ]\n    },\n    // Michael Rodriguez (Contact 3) - 5 notes\n    {\n        id: 11,\n        text: \"The client presentation went poorly due to unexpected technical difficulties and some unprepared responses to their questions. This created a negative impression that we'll need to work hard to overcome in future meetings.\",\n        time: \"Dec 10, 2024 10:00 AM\",\n        sentimentIds: [\n            10,\n            11,\n            12\n        ],\n        contactIds: [\n            3\n        ]\n    },\n    {\n        id: 12,\n        text: \"Met Michael for lunch to debrief after the failed presentation. He was clearly frustrated and disappointed with how things went. We spent time analyzing what went wrong and developing a comprehensive plan for improvement.\",\n        time: \"Dec 11, 2024 1:00 PM\",\n        sentimentIds: [\n            12,\n            10\n        ],\n        contactIds: [\n            3\n        ]\n    },\n    {\n        id: 13,\n        text: \"Coffee meeting about the upcoming project launch. Michael seemed much more confident this time and had significantly better prepared materials. It's encouraging to see the marked improvement in his preparation and presentation skills.\",\n        time: \"Dec 5, 2024 9:00 AM\",\n        sentimentIds: [\n            5,\n            4\n        ],\n        contactIds: [\n            3\n        ]\n    },\n    {\n        id: 14,\n        text: \"Bumped into Michael at the gym and discussed work-related stress management. He mentioned he's been proactively working on his presentation skills and even enrolled in public speaking classes. Great personal development initiative.\",\n        time: \"Nov 30, 2024 6:00 PM\",\n        sentimentIds: [\n            5,\n            2\n        ],\n        contactIds: [\n            3\n        ]\n    },\n    {\n        id: 15,\n        text: \"Phone call about team dynamics and productivity issues. Michael expressed concerns about some team members not contributing their fair share to project deliverables. I suggested organizing a team meeting to address these issues directly.\",\n        time: \"Nov 22, 2024 3:30 PM\",\n        sentimentIds: [\n            11,\n            9\n        ],\n        contactIds: [\n            3\n        ]\n    },\n    // Emily Watson (Contact 4) - 5 notes\n    {\n        id: 16,\n        text: \"Celebrated our successful product launch with the entire team! Everyone worked incredibly hard and we delivered everything on time. The early user feedback has been overwhelmingly positive, which makes all the effort worthwhile.\",\n        time: \"Dec 8, 2024 6:00 PM\",\n        sentimentIds: [\n            1,\n            2,\n            4\n        ],\n        contactIds: [\n            4\n        ]\n    },\n    {\n        id: 17,\n        text: \"Coffee meeting to discuss the next product roadmap and upcoming features. Emily was incredibly enthusiastic about her innovative ideas for user experience improvements. Her strategic thinking and creative vision continue to impress me.\",\n        time: \"Dec 12, 2024 11:00 AM\",\n        sentimentIds: [\n            3,\n            1\n        ],\n        contactIds: [\n            4\n        ]\n    },\n    {\n        id: 18,\n        text: \"Quick hallway conversation about recent user feedback analysis. Emily shared some fascinating insights from the latest user interviews and usability testing sessions. I offered to help analyze the quantitative data to complement her qualitative findings.\",\n        time: \"Dec 6, 2024 3:00 PM\",\n        sentimentIds: [\n            8,\n            6\n        ],\n        contactIds: [\n            4\n        ]\n    },\n    {\n        id: 19,\n        text: \"Attended Emily's workshop on user experience design principles. She delivered an outstanding presentation with deep knowledge of the subject matter. Her ability to explain complex UX concepts clearly is truly remarkable.\",\n        time: \"Nov 28, 2024 2:00 PM\",\n        sentimentIds: [\n            4,\n            3\n        ],\n        contactIds: [\n            4\n        ]\n    },\n    {\n        id: 20,\n        text: \"Phone call about improving cross-functional team collaboration. Emily mentioned some challenges with communication between different departments that are impacting project efficiency. I suggested implementing regular synchronization meetings.\",\n        time: \"Nov 20, 2024 4:30 PM\",\n        sentimentIds: [\n            9,\n            8\n        ],\n        contactIds: [\n            4\n        ]\n    },\n    // David Kim (Contact 5) - 5 notes\n    {\n        id: 21,\n        text: \"Had a great catch-up call with my former colleague David. We discussed significant industry changes and explored potential job opportunities in the market. It was wonderful to reconnect after such a long time.\",\n        time: \"Dec 5, 2024 3:30 PM\",\n        sentimentIds: [\n            2,\n            6\n        ],\n        contactIds: [\n            5\n        ]\n    },\n    {\n        id: 22,\n        text: \"Met David for lunch to discuss exciting collaboration possibilities. He shared several interesting project ideas and we thoroughly explored various ways we could work together professionally. The opportunities look very promising.\",\n        time: \"Dec 10, 2024 12:30 PM\",\n        sentimentIds: [\n            5,\n            3\n        ],\n        contactIds: [\n            5\n        ]\n    },\n    {\n        id: 23,\n        text: \"Coffee meeting focused on current industry trends and market analysis. David shared some particularly insightful observations about market dynamics and provided valuable professional contacts. Excellent networking opportunity.\",\n        time: \"Dec 2, 2024 10:00 AM\",\n        sentimentIds: [\n            3,\n            4\n        ],\n        contactIds: [\n            5\n        ]\n    },\n    {\n        id: 24,\n        text: \"Attended the startup meetup where David was presenting his innovative new venture. He delivered an impressive pitch with a compelling business model that generated significant interest from potential investors.\",\n        time: \"Nov 25, 2024 7:30 PM\",\n        sentimentIds: [\n            1,\n            3\n        ],\n        contactIds: [\n            5\n        ]\n    },\n    {\n        id: 25,\n        text: \"Phone call about mentorship and business scaling advice. David asked for guidance on managing his rapidly growing team and scaling business operations effectively. I shared lessons learned from my own entrepreneurial experience.\",\n        time: \"Nov 18, 2024 2:00 PM\",\n        sentimentIds: [\n            4,\n            7\n        ],\n        contactIds: [\n            5\n        ]\n    },\n    // Lisa Thompson (Contact 6) - 5 notes\n    {\n        id: 26,\n        text: \"Attended Lisa's strategic planning workshop at the conference center. She demonstrated excellent facilitation skills and shared deep expertise in organizational strategy. The session provided valuable insights for our business planning.\",\n        time: \"Dec 3, 2024 1:00 PM\",\n        sentimentIds: [\n            4,\n            8\n        ],\n        contactIds: [\n            6\n        ]\n    },\n    {\n        id: 27,\n        text: \"Coffee meeting to explore potential project collaboration opportunities. Lisa shared fascinating case studies from her consulting work and we discussed various partnership possibilities that could benefit both our organizations.\",\n        time: \"Dec 8, 2024 9:00 AM\",\n        sentimentIds: [\n            6,\n            5\n        ],\n        contactIds: [\n            6\n        ]\n    },\n    {\n        id: 28,\n        text: \"Brief hallway conversation about valuable industry insights. Lisa mentioned some interesting trends she's observed through her extensive consulting work with various clients. Her perspective is always enlightening and well-informed.\",\n        time: \"Dec 1, 2024 4:00 PM\",\n        sentimentIds: [\n            3,\n            8\n        ],\n        contactIds: [\n            6\n        ]\n    },\n    {\n        id: 29,\n        text: \"Met Lisa at the business networking event downtown. She was effectively representing her consulting firm and actively seeking new client relationships. Her professional networking skills and business acumen are truly impressive.\",\n        time: \"Nov 27, 2024 6:00 PM\",\n        sentimentIds: [\n            2,\n            4\n        ],\n        contactIds: [\n            6\n        ]\n    },\n    {\n        id: 30,\n        text: \"Phone call to provide feedback on Lisa's consulting proposal. She asked for my professional opinion on a comprehensive proposal she was developing for a major client. I provided detailed suggestions for improvement and refinement.\",\n        time: \"Nov 20, 2024 3:00 PM\",\n        sentimentIds: [\n            6,\n            8\n        ],\n        contactIds: [\n            6\n        ]\n    },\n    // James Wilson (Contact 7) - 5 notes\n    {\n        id: 31,\n        text: \"Attended James's presentation on digital transformation strategies at the business conference. He delivered valuable insights that are highly relevant to our industry's current challenges and future opportunities.\",\n        time: \"Dec 1, 2024 2:00 PM\",\n        sentimentIds: [\n            4,\n            8\n        ],\n        contactIds: [\n            7\n        ]\n    },\n    {\n        id: 32,\n        text: \"Coffee meeting to discuss potential cross-industry collaboration initiatives. James shared innovative ideas about partnerships between different sectors and how they can drive innovation and mutual growth.\",\n        time: \"Dec 6, 2024 10:30 AM\",\n        sentimentIds: [\n            6,\n            3\n        ],\n        contactIds: [\n            7\n        ]\n    },\n    {\n        id: 33,\n        text: \"Lunch meeting focused on current market trends and consumer behavior analysis. James provided insightful observations about changing customer preferences and emerging market opportunities that could impact our business strategy.\",\n        time: \"Dec 2, 2024 12:00 PM\",\n        sentimentIds: [\n            8,\n            5\n        ],\n        contactIds: [\n            7\n        ]\n    },\n    {\n        id: 34,\n        text: \"Attended the innovation summit where James moderated a panel on emerging technologies. His excellent moderation skills and comprehensive knowledge of technological trends made for an engaging and informative session.\",\n        time: \"Nov 29, 2024 3:30 PM\",\n        sentimentIds: [\n            4,\n            3\n        ],\n        contactIds: [\n            7\n        ]\n    },\n    {\n        id: 35,\n        text: \"Phone call about strategic partnership challenges and opportunities. James mentioned some difficulties with their current partnerships and asked for advice based on my experience. I shared best practices for partnership management.\",\n        time: \"Nov 22, 2024 4:00 PM\",\n        sentimentIds: [\n            6,\n            9\n        ],\n        contactIds: [\n            7\n        ]\n    },\n    // Maria Garcia (Contact 8) - 5 notes\n    {\n        id: 36,\n        text: \"Attended Maria's presentation at the UX research conference about user behavior patterns. Her research findings were absolutely fascinating and her presentation skills were exceptional. Valuable insights for our product development.\",\n        time: \"Nov 28, 2024 11:00 AM\",\n        sentimentIds: [\n            1,\n            4\n        ],\n        contactIds: [\n            8\n        ]\n    },\n    {\n        id: 37,\n        text: \"Coffee meeting to explore research collaboration opportunities. Maria shared interesting methodologies from her academic work and we discussed potential joint research projects that could benefit both our organizations.\",\n        time: \"Dec 4, 2024 2:00 PM\",\n        sentimentIds: [\n            3,\n            5\n        ],\n        contactIds: [\n            8\n        ]\n    },\n    {\n        id: 38,\n        text: \"Quick hallway conversation about recent user testing results. Maria mentioned some particularly interesting findings from her latest usability studies that could provide valuable insights for our product development roadmap.\",\n        time: \"Nov 30, 2024 3:00 PM\",\n        sentimentIds: [\n            6,\n            8\n        ],\n        contactIds: [\n            8\n        ]\n    },\n    {\n        id: 39,\n        text: \"Attended the academic symposium where Maria chaired a session on human-computer interaction. Her academic leadership and deep expertise in the field were clearly demonstrated through her excellent session management.\",\n        time: \"Nov 25, 2024 1:30 PM\",\n        sentimentIds: [\n            4,\n            3\n        ],\n        contactIds: [\n            8\n        ]\n    },\n    {\n        id: 40,\n        text: \"Phone call to provide feedback on Maria's research proposal. She asked for my input on a comprehensive research proposal she was developing for a major grant application. I provided constructive suggestions for improvement.\",\n        time: \"Nov 18, 2024 2:30 PM\",\n        sentimentIds: [\n            6,\n            8\n        ],\n        contactIds: [\n            8\n        ]\n    },\n    // Robert Taylor (Contact 9) - 5 notes\n    {\n        id: 41,\n        text: \"Attended Robert's presentation at the sales conference on relationship building strategies. He shared excellent sales insights and valuable networking techniques that could be applied across various business contexts.\",\n        time: \"Nov 25, 2024 10:00 AM\",\n        sentimentIds: [\n            4,\n            3\n        ],\n        contactIds: [\n            9\n        ]\n    },\n    {\n        id: 42,\n        text: \"Coffee meeting to discuss effective sales strategies and techniques. Robert shared interesting approaches to customer acquisition and retention that have proven successful in his experience. Very valuable professional insights.\",\n        time: \"Dec 2, 2024 3:00 PM\",\n        sentimentIds: [\n            3,\n            8\n        ],\n        contactIds: [\n            9\n        ]\n    },\n    {\n        id: 43,\n        text: \"Lunch meeting about market expansion opportunities and challenges. Robert provided insights about entering new markets and building effective sales teams in different regions. His strategic thinking is impressive.\",\n        time: \"Nov 28, 2024 12:30 PM\",\n        sentimentIds: [\n            6,\n            5\n        ],\n        contactIds: [\n            9\n        ]\n    },\n    {\n        id: 44,\n        text: \"Met Robert at the business networking event where he was representing his company. He was actively seeking new business opportunities and demonstrated excellent networking skills throughout the evening.\",\n        time: \"Nov 22, 2024 6:30 PM\",\n        sentimentIds: [\n            2,\n            4\n        ],\n        contactIds: [\n            9\n        ]\n    },\n    {\n        id: 45,\n        text: \"Phone call about sales training and team development challenges. Robert mentioned some difficulties with his sales team's performance and asked for advice on training programs. I shared relevant resources and recommendations.\",\n        time: \"Nov 15, 2024 4:30 PM\",\n        sentimentIds: [\n            6,\n            9\n        ],\n        contactIds: [\n            9\n        ]\n    },\n    // Jennifer Lee (Contact 10) - 5 notes\n    {\n        id: 46,\n        text: \"Attended Jennifer's content strategy workshop on storytelling in marketing. She delivered an outstanding presentation with valuable insights about content creation and audience engagement. Excellent professional development opportunity.\",\n        time: \"Nov 22, 2024 2:00 PM\",\n        sentimentIds: [\n            4,\n            3\n        ],\n        contactIds: [\n            10\n        ]\n    },\n    {\n        id: 47,\n        text: \"Coffee meeting to discuss potential content collaboration projects. Jennifer shared creative content ideas and we explored various partnership opportunities that could enhance both our marketing efforts significantly.\",\n        time: \"Nov 29, 2024 11:00 AM\",\n        sentimentIds: [\n            3,\n            5\n        ],\n        contactIds: [\n            10\n        ]\n    },\n    {\n        id: 48,\n        text: \"Lunch meeting about current marketing trends and industry evolution. Jennifer provided insights about content marketing's changing landscape and shared effective audience engagement strategies from her recent campaigns.\",\n        time: \"Nov 26, 2024 1:00 PM\",\n        sentimentIds: [\n            6,\n            8\n        ],\n        contactIds: [\n            10\n        ]\n    },\n    {\n        id: 49,\n        text: \"Attended the digital marketing summit where Jennifer presented on social media strategies. She demonstrated excellent digital marketing expertise and provided practical tips that attendees could implement immediately.\",\n        time: \"Nov 20, 2024 3:00 PM\",\n        sentimentIds: [\n            4,\n            1\n        ],\n        contactIds: [\n            10\n        ]\n    },\n    {\n        id: 50,\n        text: \"Phone call to provide feedback on Jennifer's content calendar proposal. She asked for my professional opinion on a comprehensive content calendar she was developing for a major client campaign. I provided detailed suggestions.\",\n        time: \"Nov 15, 2024 2:00 PM\",\n        sentimentIds: [\n            6,\n            8\n        ],\n        contactIds: [\n            10\n        ]\n    },\n    // Christopher Brown (Contact 11) - 5 notes\n    {\n        id: 51,\n        text: \"Attended Christopher's presentation at the operations conference on process optimization strategies. He shared excellent operational insights and provided practical implementation tips that could significantly improve our efficiency.\",\n        time: \"Nov 20, 2024 9:00 AM\",\n        sentimentIds: [\n            4,\n            3\n        ],\n        contactIds: [\n            11\n        ]\n    },\n    {\n        id: 52,\n        text: \"Coffee meeting to discuss operational efficiency improvements and best practices. Christopher shared innovative approaches to streamlining business processes that have proven effective in his organization. Very valuable insights.\",\n        time: \"Nov 27, 2024 2:30 PM\",\n        sentimentIds: [\n            3,\n            8\n        ],\n        contactIds: [\n            11\n        ]\n    },\n    {\n        id: 53,\n        text: \"Lunch meeting about team management and leadership strategies. Christopher provided insights about building high-performing teams and effectively managing remote workforces in today's business environment.\",\n        time: \"Nov 24, 2024 12:00 PM\",\n        sentimentIds: [\n            6,\n            5\n        ],\n        contactIds: [\n            11\n        ]\n    },\n    {\n        id: 54,\n        text: \"Attended the business process workshop where Christopher facilitated a session on lean methodology implementation. His facilitation skills and deep expertise in process improvement were clearly demonstrated.\",\n        time: \"Nov 18, 2024 1:00 PM\",\n        sentimentIds: [\n            4,\n            8\n        ],\n        contactIds: [\n            11\n        ]\n    },\n    {\n        id: 55,\n        text: \"Phone call about process improvement challenges and solutions. Christopher mentioned some difficulties with their current business processes and asked for advice based on my experience. I shared relevant best practices.\",\n        time: \"Nov 12, 2024 3:30 PM\",\n        sentimentIds: [\n            6,\n            9\n        ],\n        contactIds: [\n            11\n        ]\n    },\n    // Amanda Davis (Contact 12) - 5 notes\n    {\n        id: 56,\n        text: \"Attended Amanda's presentation at the business analysis conference on data-driven decision making. She shared excellent analytical insights and practical applications that could significantly improve our business intelligence.\",\n        time: \"Nov 18, 2024 11:00 AM\",\n        sentimentIds: [\n            4,\n            3\n        ],\n        contactIds: [\n            12\n        ]\n    },\n    {\n        id: 57,\n        text: \"Coffee meeting to discuss analytics collaboration and data science opportunities. Amanda shared interesting data analysis techniques and we explored potential joint projects that could enhance our analytical capabilities.\",\n        time: \"Nov 25, 2024 10:00 AM\",\n        sentimentIds: [\n            3,\n            5\n        ],\n        contactIds: [\n            12\n        ]\n    },\n    {\n        id: 58,\n        text: \"Lunch meeting about business intelligence implementation and dashboard development. Amanda provided insights about implementing BI tools effectively and shared best practices for building comprehensive data dashboards.\",\n        time: \"Nov 22, 2024 12:30 PM\",\n        sentimentIds: [\n            6,\n            8\n        ],\n        contactIds: [\n            12\n        ]\n    },\n    {\n        id: 59,\n        text: \"Attended the data analytics workshop where Amanda led a session on predictive modeling techniques. Her analytical skills and practical knowledge of advanced modeling techniques were truly impressive.\",\n        time: \"Nov 16, 2024 2:00 PM\",\n        sentimentIds: [\n            4,\n            1\n        ],\n        contactIds: [\n            12\n        ]\n    },\n    {\n        id: 60,\n        text: \"Phone call to provide feedback on Amanda's data governance framework proposal. She asked for my input on a comprehensive framework she was developing for organizational data management. I provided constructive suggestions.\",\n        time: \"Nov 10, 2024 4:00 PM\",\n        sentimentIds: [\n            6,\n            8\n        ],\n        contactIds: [\n            12\n        ]\n    }\n];\nconst sampleContacts = [\n    {\n        id: 1,\n        name: \"Alex Johnson\",\n        occupationId: 1,\n        organizationId: 1,\n        birthDate: \"1990-05-15\",\n        lastInteraction: 1734307200000,\n        subjectIds: [\n            1,\n            2,\n            3,\n            6,\n            9,\n            13,\n            15,\n            22,\n            27,\n            29,\n            32\n        ],\n        relationshipIds: [\n            1,\n            5\n        ],\n        noteIds: [\n            1,\n            2,\n            3,\n            4,\n            5\n        ]\n    },\n    {\n        id: 2,\n        name: \"Sarah Chen\",\n        // Removed occupationId and organizationId to test missing data\n        birthDate: \"1988-09-22\",\n        lastInteraction: 1734048000000,\n        subjectIds: [\n            4,\n            7,\n            10,\n            13,\n            14,\n            19,\n            21,\n            24,\n            26,\n            30\n        ],\n        relationshipIds: [\n            2,\n            4\n        ],\n        noteIds: [\n            6,\n            7,\n            8,\n            9,\n            10\n        ]\n    },\n    {\n        id: 3,\n        name: \"Michael Rodriguez\",\n        occupationId: 3,\n        // Removed organizationId to test missing organization\n        birthDate: \"1992-03-10\",\n        lastInteraction: 1733788800000,\n        subjectIds: [\n            5,\n            8,\n            11,\n            14,\n            17,\n            19,\n            23,\n            28,\n            12,\n            16\n        ],\n        relationshipIds: [\n            1,\n            2\n        ],\n        noteIds: [\n            11,\n            12,\n            13,\n            14,\n            15\n        ]\n    },\n    {\n        id: 4,\n        name: \"Emily Watson\",\n        occupationId: 4,\n        organizationId: 4,\n        // Removed birthDate to test missing birth date\n        lastInteraction: 1733616000000,\n        subjectIds: [\n            2,\n            6,\n            9,\n            13,\n            15,\n            20,\n            22,\n            25,\n            27,\n            29\n        ],\n        relationshipIds: [\n            2,\n            3\n        ],\n        noteIds: [\n            16,\n            17,\n            18,\n            19,\n            20\n        ]\n    },\n    {\n        id: 5,\n        name: \"David Kim\",\n        // Removed occupationId to test missing occupation\n        organizationId: 5,\n        birthDate: \"1991-07-18\",\n        lastInteraction: 1733356800000,\n        subjectIds: [\n            3,\n            7,\n            10,\n            12,\n            14,\n            18,\n            21,\n            24,\n            26,\n            30\n        ],\n        relationshipIds: [\n            1,\n            2\n        ],\n        noteIds: [\n            21,\n            22,\n            23,\n            24,\n            25\n        ]\n    },\n    {\n        id: 6,\n        name: \"Lisa Thompson\",\n        occupationId: 6,\n        organizationId: 6,\n        birthDate: \"1987-12-03\",\n        lastInteraction: 1733184000000,\n        subjectIds: [\n            1,\n            4,\n            8,\n            11,\n            15,\n            17,\n            19,\n            23,\n            28,\n            12\n        ],\n        relationshipIds: [\n            2,\n            6\n        ],\n        noteIds: [\n            26,\n            27,\n            28,\n            29,\n            30\n        ]\n    },\n    {\n        id: 7,\n        name: \"James Wilson\",\n        // Removed all optional fields to test complete missing data\n        lastInteraction: 1733006400000,\n        subjectIds: [\n            2,\n            5,\n            9,\n            12,\n            16,\n            20,\n            23,\n            25,\n            27,\n            29\n        ],\n        relationshipIds: [\n            2,\n            7\n        ],\n        noteIds: [\n            31,\n            32,\n            33,\n            34,\n            35\n        ]\n    },\n    {\n        id: 8,\n        name: \"Maria Garcia\",\n        occupationId: 8,\n        // Removed organizationId and birthDate\n        lastInteraction: 1732752000000,\n        subjectIds: [\n            1,\n            3,\n            6,\n            10,\n            13,\n            17,\n            21,\n            24,\n            26,\n            30\n        ],\n        relationshipIds: [\n            1,\n            3\n        ],\n        noteIds: [\n            36,\n            37,\n            38,\n            39,\n            40\n        ]\n    },\n    {\n        id: 9,\n        name: \"Robert Taylor\",\n        occupationId: 9,\n        organizationId: 9,\n        birthDate: \"1985-01-30\",\n        lastInteraction: 1732579200000,\n        subjectIds: [\n            4,\n            7,\n            11,\n            14,\n            18,\n            19,\n            22,\n            28,\n            12,\n            15\n        ],\n        relationshipIds: [\n            2,\n            5\n        ],\n        noteIds: [\n            41,\n            42,\n            43,\n            44,\n            45\n        ]\n    },\n    {\n        id: 10,\n        name: \"Jennifer Lee\",\n        // Removed occupationId and birthDate\n        organizationId: 10,\n        lastInteraction: 1732406400000,\n        subjectIds: [\n            3,\n            8,\n            10,\n            13,\n            16,\n            20,\n            23,\n            25,\n            27,\n            29\n        ],\n        relationshipIds: [\n            1,\n            6\n        ],\n        noteIds: [\n            46,\n            47,\n            48,\n            49,\n            50\n        ]\n    },\n    {\n        id: 11,\n        name: \"Christopher Brown\",\n        occupationId: 11,\n        organizationId: 11,\n        birthDate: \"1988-12-14\",\n        lastInteraction: 1732233600000,\n        subjectIds: [\n            2,\n            5,\n            9,\n            12,\n            15,\n            17,\n            21,\n            24,\n            26,\n            30\n        ],\n        relationshipIds: [\n            2,\n            4\n        ],\n        noteIds: [\n            51,\n            52,\n            53,\n            54,\n            55\n        ]\n    },\n    {\n        id: 12,\n        name: \"Amanda Davis\",\n        // Removed all optional fields to test complete missing data\n        lastInteraction: 1732060800000,\n        subjectIds: [\n            1,\n            4,\n            7,\n            11,\n            14,\n            18,\n            19,\n            22,\n            28,\n            12\n        ],\n        relationshipIds: [\n            1,\n            2\n        ],\n        noteIds: [\n            56,\n            57,\n            58,\n            59,\n            60\n        ]\n    }\n];\nfunction getSampleData() {\n    return {\n        contacts: sampleContacts,\n        subjects: sampleSubjects,\n        organizations: sampleOrganizations,\n        occupations: sampleOccupations,\n        relationships: sampleRelationships,\n        sentiments: sampleSentiments,\n        notes: sampleNotes\n    };\n}\n// Create a mutable copy of sample data that can be updated\nlet mutableSampleData = {\n    contacts: [\n        ...sampleContacts\n    ],\n    subjects: [\n        ...sampleSubjects\n    ],\n    organizations: [\n        ...sampleOrganizations\n    ],\n    occupations: [\n        ...sampleOccupations\n    ],\n    relationships: [\n        ...sampleRelationships\n    ],\n    sentiments: [\n        ...sampleSentiments\n    ],\n    notes: [\n        ...sampleNotes\n    ]\n};\nfunction getMutableSampleData() {\n    return mutableSampleData;\n}\nfunction updateMutableSampleData(newData) {\n    Object.assign(mutableSampleData, newData);\n    return mutableSampleData;\n}\nfunction resetMutableSampleData() {\n    mutableSampleData = {\n        contacts: [\n            ...sampleContacts\n        ],\n        subjects: [\n            ...sampleSubjects\n        ],\n        organizations: [\n            ...sampleOrganizations\n        ],\n        occupations: [\n            ...sampleOccupations\n        ],\n        relationships: [\n            ...sampleRelationships\n        ],\n        sentiments: [\n            ...sampleSentiments\n        ],\n        notes: [\n            ...sampleNotes\n        ]\n    };\n    return mutableSampleData;\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./data/sampleData.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js ***!
  \****************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/**\n * @license React\n * react-jsx-dev-runtime.development.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\nif (true) {\n  (function() {\n'use strict';\n\nvar React = __webpack_require__(/*! next/dist/compiled/react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n\n// ATTENTION\n// When adding new symbols to this file,\n// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n// The Symbol used to tag the ReactElement-like types.\nvar REACT_ELEMENT_TYPE = Symbol.for('react.element');\nvar REACT_PORTAL_TYPE = Symbol.for('react.portal');\nvar REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');\nvar REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');\nvar REACT_PROFILER_TYPE = Symbol.for('react.profiler');\nvar REACT_PROVIDER_TYPE = Symbol.for('react.provider'); // TODO: Delete with enableRenderableContext\n\nvar REACT_CONSUMER_TYPE = Symbol.for('react.consumer');\nvar REACT_CONTEXT_TYPE = Symbol.for('react.context');\nvar REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');\nvar REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');\nvar REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');\nvar REACT_MEMO_TYPE = Symbol.for('react.memo');\nvar REACT_LAZY_TYPE = Symbol.for('react.lazy');\nvar REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');\nvar REACT_CACHE_TYPE = Symbol.for('react.cache');\nvar MAYBE_ITERATOR_SYMBOL = Symbol.iterator;\nvar FAUX_ITERATOR_SYMBOL = '@@iterator';\nfunction getIteratorFn(maybeIterable) {\n  if (maybeIterable === null || typeof maybeIterable !== 'object') {\n    return null;\n  }\n\n  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n\n  if (typeof maybeIterator === 'function') {\n    return maybeIterator;\n  }\n\n  return null;\n}\n\nvar ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n\nfunction error(format) {\n  {\n    {\n      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n\n      printWarning('error', format, args);\n    }\n  }\n}\n\nfunction printWarning(level, format, args) {\n  // When changing this logic, you might want to also\n  // update consoleWithStackDev.www.js as well.\n  {\n    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n    var stack = ReactDebugCurrentFrame.getStackAddendum();\n\n    if (stack !== '') {\n      format += '%s';\n      args = args.concat([stack]);\n    } // eslint-disable-next-line react-internal/safe-string-coercion\n\n\n    var argsWithFormat = args.map(function (item) {\n      return String(item);\n    }); // Careful: RN currently depends on this prefix\n\n    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it\n    // breaks IE9: https://github.com/facebook/react/issues/13610\n    // eslint-disable-next-line react-internal/no-production-logging\n\n    Function.prototype.apply.call(console[level], console, argsWithFormat);\n  }\n}\n\n// -----------------------------------------------------------------------------\n\nvar enableScopeAPI = false; // Experimental Create Event Handle API.\nvar enableCacheElement = false;\nvar enableTransitionTracing = false; // No known bugs, but needs performance testing\n\nvar enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber\nvar enableRenderableContext = false;\n// stuff. Intended to enable React core members to more easily debug scheduling\n// issues in DEV builds.\n\nvar enableDebugTracing = false;\n\nfunction getWrappedName(outerType, innerType, wrapperName) {\n  var displayName = outerType.displayName;\n\n  if (displayName) {\n    return displayName;\n  }\n\n  var functionName = innerType.displayName || innerType.name || '';\n  return functionName !== '' ? wrapperName + \"(\" + functionName + \")\" : wrapperName;\n} // Keep in sync with react-reconciler/getComponentNameFromFiber\n\n\nfunction getContextName(type) {\n  return type.displayName || 'Context';\n}\n\nvar REACT_CLIENT_REFERENCE$2 = Symbol.for('react.client.reference'); // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.\n\nfunction getComponentNameFromType(type) {\n  if (type == null) {\n    // Host root, text node or just invalid type.\n    return null;\n  }\n\n  if (typeof type === 'function') {\n    if (type.$$typeof === REACT_CLIENT_REFERENCE$2) {\n      // TODO: Create a convention for naming client references with debug info.\n      return null;\n    }\n\n    return type.displayName || type.name || null;\n  }\n\n  if (typeof type === 'string') {\n    return type;\n  }\n\n  switch (type) {\n    case REACT_FRAGMENT_TYPE:\n      return 'Fragment';\n\n    case REACT_PORTAL_TYPE:\n      return 'Portal';\n\n    case REACT_PROFILER_TYPE:\n      return 'Profiler';\n\n    case REACT_STRICT_MODE_TYPE:\n      return 'StrictMode';\n\n    case REACT_SUSPENSE_TYPE:\n      return 'Suspense';\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return 'SuspenseList';\n\n    case REACT_CACHE_TYPE:\n      {\n        return 'Cache';\n      }\n\n  }\n\n  if (typeof type === 'object') {\n    {\n      if (typeof type.tag === 'number') {\n        error('Received an unexpected object in getComponentNameFromType(). ' + 'This is likely a bug in React. Please file an issue.');\n      }\n    }\n\n    switch (type.$$typeof) {\n      case REACT_PROVIDER_TYPE:\n        {\n          var provider = type;\n          return getContextName(provider._context) + '.Provider';\n        }\n\n      case REACT_CONTEXT_TYPE:\n        var context = type;\n\n        {\n          return getContextName(context) + '.Consumer';\n        }\n\n      case REACT_CONSUMER_TYPE:\n        {\n          return null;\n        }\n\n      case REACT_FORWARD_REF_TYPE:\n        return getWrappedName(type, type.render, 'ForwardRef');\n\n      case REACT_MEMO_TYPE:\n        var outerName = type.displayName || null;\n\n        if (outerName !== null) {\n          return outerName;\n        }\n\n        return getComponentNameFromType(type.type) || 'Memo';\n\n      case REACT_LAZY_TYPE:\n        {\n          var lazyComponent = type;\n          var payload = lazyComponent._payload;\n          var init = lazyComponent._init;\n\n          try {\n            return getComponentNameFromType(init(payload));\n          } catch (x) {\n            return null;\n          }\n        }\n    }\n  }\n\n  return null;\n}\n\n// $FlowFixMe[method-unbinding]\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nvar assign = Object.assign;\n\n/*\n * The `'' + value` pattern (used in perf-sensitive code) throws for Symbol\n * and Temporal.* types. See https://github.com/facebook/react/pull/22064.\n *\n * The functions in this module will throw an easier-to-understand,\n * easier-to-debug exception with a clear errors message message explaining the\n * problem. (Instead of a confusing exception thrown inside the implementation\n * of the `value` object).\n */\n// $FlowFixMe[incompatible-return] only called in DEV, so void return is not possible.\nfunction typeName(value) {\n  {\n    // toStringTag is needed for namespaced types like Temporal.Instant\n    var hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;\n    var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object'; // $FlowFixMe[incompatible-return]\n\n    return type;\n  }\n} // $FlowFixMe[incompatible-return] only called in DEV, so void return is not possible.\n\n\nfunction willCoercionThrow(value) {\n  {\n    try {\n      testStringCoercion(value);\n      return false;\n    } catch (e) {\n      return true;\n    }\n  }\n}\n\nfunction testStringCoercion(value) {\n  // If you ended up here by following an exception call stack, here's what's\n  // happened: you supplied an object or symbol value to React (as a prop, key,\n  // DOM attribute, CSS property, string ref, etc.) and when React tried to\n  // coerce it to a string using `'' + value`, an exception was thrown.\n  //\n  // The most common types that will cause this exception are `Symbol` instances\n  // and Temporal objects like `Temporal.Instant`. But any object that has a\n  // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this\n  // exception. (Library authors do this to prevent users from using built-in\n  // numeric operators like `+` or comparison operators like `>=` because custom\n  // methods are needed to perform accurate arithmetic or comparison.)\n  //\n  // To fix the problem, coerce this object or symbol value to a string before\n  // passing it to React. The most reliable way is usually `String(value)`.\n  //\n  // To find which value is throwing, check the browser or debugger console.\n  // Before this exception was thrown, there should be `console.error` output\n  // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the\n  // problem and how that type was used: key, atrribute, input value prop, etc.\n  // In most cases, this console output also shows the component and its\n  // ancestor components where the exception happened.\n  //\n  // eslint-disable-next-line react-internal/safe-string-coercion\n  return '' + value;\n}\nfunction checkKeyStringCoercion(value) {\n  {\n    if (willCoercionThrow(value)) {\n      error('The provided key is an unsupported type %s.' + ' This value must be coerced to a string before using it here.', typeName(value));\n\n      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n    }\n  }\n}\n\nvar REACT_CLIENT_REFERENCE$1 = Symbol.for('react.client.reference');\nfunction isValidElementType(type) {\n  if (typeof type === 'string' || typeof type === 'function') {\n    return true;\n  } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).\n\n\n  if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing  || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden  || type === REACT_OFFSCREEN_TYPE || enableScopeAPI  || enableCacheElement  || enableTransitionTracing ) {\n    return true;\n  }\n\n  if (typeof type === 'object' && type !== null) {\n    if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || enableRenderableContext  || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object\n    // types supported by any Flight configuration anywhere since\n    // we don't know which Flight build this will end up being used\n    // with.\n    type.$$typeof === REACT_CLIENT_REFERENCE$1 || type.getModuleId !== undefined) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nvar isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare\n\nfunction isArray(a) {\n  return isArrayImpl(a);\n}\n\n// Helpers to patch console.logs to avoid logging during side-effect free\n// replaying on render function. This currently only patches the object\n// lazily which won't cover if the log function was extracted eagerly.\n// We could also eagerly patch the method.\nvar disabledDepth = 0;\nvar prevLog;\nvar prevInfo;\nvar prevWarn;\nvar prevError;\nvar prevGroup;\nvar prevGroupCollapsed;\nvar prevGroupEnd;\n\nfunction disabledLog() {}\n\ndisabledLog.__reactDisabledLog = true;\nfunction disableLogs() {\n  {\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      prevLog = console.log;\n      prevInfo = console.info;\n      prevWarn = console.warn;\n      prevError = console.error;\n      prevGroup = console.group;\n      prevGroupCollapsed = console.groupCollapsed;\n      prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099\n\n      var props = {\n        configurable: true,\n        enumerable: true,\n        value: disabledLog,\n        writable: true\n      }; // $FlowFixMe[cannot-write] Flow thinks console is immutable.\n\n      Object.defineProperties(console, {\n        info: props,\n        log: props,\n        warn: props,\n        error: props,\n        group: props,\n        groupCollapsed: props,\n        groupEnd: props\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n\n    disabledDepth++;\n  }\n}\nfunction reenableLogs() {\n  {\n    disabledDepth--;\n\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      var props = {\n        configurable: true,\n        enumerable: true,\n        writable: true\n      }; // $FlowFixMe[cannot-write] Flow thinks console is immutable.\n\n      Object.defineProperties(console, {\n        log: assign({}, props, {\n          value: prevLog\n        }),\n        info: assign({}, props, {\n          value: prevInfo\n        }),\n        warn: assign({}, props, {\n          value: prevWarn\n        }),\n        error: assign({}, props, {\n          value: prevError\n        }),\n        group: assign({}, props, {\n          value: prevGroup\n        }),\n        groupCollapsed: assign({}, props, {\n          value: prevGroupCollapsed\n        }),\n        groupEnd: assign({}, props, {\n          value: prevGroupEnd\n        })\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n\n    if (disabledDepth < 0) {\n      error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');\n    }\n  }\n}\n\nvar ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;\nvar prefix;\nfunction describeBuiltInComponentFrame(name, ownerFn) {\n  {\n    if (prefix === undefined) {\n      // Extract the VM specific prefix used by each line.\n      try {\n        throw Error();\n      } catch (x) {\n        var match = x.stack.trim().match(/\\n( *(at )?)/);\n        prefix = match && match[1] || '';\n      }\n    } // We use the prefix to ensure our stacks line up with native stack frames.\n\n\n    return '\\n' + prefix + name;\n  }\n}\nvar reentry = false;\nvar componentFrameCache;\n\n{\n  var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;\n  componentFrameCache = new PossiblyWeakMap();\n}\n/**\n * Leverages native browser/VM stack frames to get proper details (e.g.\n * filename, line + col number) for a single component in a component stack. We\n * do this by:\n *   (1) throwing and catching an error in the function - this will be our\n *       control error.\n *   (2) calling the component which will eventually throw an error that we'll\n *       catch - this will be our sample error.\n *   (3) diffing the control and sample error stacks to find the stack frame\n *       which represents our component.\n */\n\n\nfunction describeNativeComponentFrame(fn, construct) {\n  // If something asked for a stack inside a fake render, it should get ignored.\n  if (!fn || reentry) {\n    return '';\n  }\n\n  {\n    var frame = componentFrameCache.get(fn);\n\n    if (frame !== undefined) {\n      return frame;\n    }\n  }\n\n  reentry = true;\n  var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe[incompatible-type] It does accept undefined.\n\n  Error.prepareStackTrace = undefined;\n  var previousDispatcher;\n\n  {\n    previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function\n    // for warnings.\n\n    ReactCurrentDispatcher.current = null;\n    disableLogs();\n  }\n  /**\n   * Finding a common stack frame between sample and control errors can be\n   * tricky given the different types and levels of stack trace truncation from\n   * different JS VMs. So instead we'll attempt to control what that common\n   * frame should be through this object method:\n   * Having both the sample and control errors be in the function under the\n   * `DescribeNativeComponentFrameRoot` property, + setting the `name` and\n   * `displayName` properties of the function ensures that a stack\n   * frame exists that has the method name `DescribeNativeComponentFrameRoot` in\n   * it for both control and sample stacks.\n   */\n\n\n  var RunInRootFrame = {\n    DetermineComponentFrameRoot: function () {\n      var control;\n\n      try {\n        // This should throw.\n        if (construct) {\n          // Something should be setting the props in the constructor.\n          var Fake = function () {\n            throw Error();\n          }; // $FlowFixMe[prop-missing]\n\n\n          Object.defineProperty(Fake.prototype, 'props', {\n            set: function () {\n              // We use a throwing setter instead of frozen or non-writable props\n              // because that won't throw in a non-strict mode function.\n              throw Error();\n            }\n          });\n\n          if (typeof Reflect === 'object' && Reflect.construct) {\n            // We construct a different control for this case to include any extra\n            // frames added by the construct call.\n            try {\n              Reflect.construct(Fake, []);\n            } catch (x) {\n              control = x;\n            }\n\n            Reflect.construct(fn, [], Fake);\n          } else {\n            try {\n              Fake.call();\n            } catch (x) {\n              control = x;\n            } // $FlowFixMe[prop-missing] found when upgrading Flow\n\n\n            fn.call(Fake.prototype);\n          }\n        } else {\n          try {\n            throw Error();\n          } catch (x) {\n            control = x;\n          } // TODO(luna): This will currently only throw if the function component\n          // tries to access React/ReactDOM/props. We should probably make this throw\n          // in simple components too\n\n\n          var maybePromise = fn(); // If the function component returns a promise, it's likely an async\n          // component, which we don't yet support. Attach a noop catch handler to\n          // silence the error.\n          // TODO: Implement component stacks for async client components?\n\n          if (maybePromise && typeof maybePromise.catch === 'function') {\n            maybePromise.catch(function () {});\n          }\n        }\n      } catch (sample) {\n        // This is inlined manually because closure doesn't do it for us.\n        if (sample && control && typeof sample.stack === 'string') {\n          return [sample.stack, control.stack];\n        }\n      }\n\n      return [null, null];\n    }\n  }; // $FlowFixMe[prop-missing]\n\n  RunInRootFrame.DetermineComponentFrameRoot.displayName = 'DetermineComponentFrameRoot';\n  var namePropDescriptor = Object.getOwnPropertyDescriptor(RunInRootFrame.DetermineComponentFrameRoot, 'name'); // Before ES6, the `name` property was not configurable.\n\n  if (namePropDescriptor && namePropDescriptor.configurable) {\n    // V8 utilizes a function's `name` property when generating a stack trace.\n    Object.defineProperty(RunInRootFrame.DetermineComponentFrameRoot, // Configurable properties can be updated even if its writable descriptor\n    // is set to `false`.\n    // $FlowFixMe[cannot-write]\n    'name', {\n      value: 'DetermineComponentFrameRoot'\n    });\n  }\n\n  try {\n    var _RunInRootFrame$Deter = RunInRootFrame.DetermineComponentFrameRoot(),\n        sampleStack = _RunInRootFrame$Deter[0],\n        controlStack = _RunInRootFrame$Deter[1];\n\n    if (sampleStack && controlStack) {\n      // This extracts the first frame from the sample that isn't also in the control.\n      // Skipping one frame that we assume is the frame that calls the two.\n      var sampleLines = sampleStack.split('\\n');\n      var controlLines = controlStack.split('\\n');\n      var s = 0;\n      var c = 0;\n\n      while (s < sampleLines.length && !sampleLines[s].includes('DetermineComponentFrameRoot')) {\n        s++;\n      }\n\n      while (c < controlLines.length && !controlLines[c].includes('DetermineComponentFrameRoot')) {\n        c++;\n      } // We couldn't find our intentionally injected common root frame, attempt\n      // to find another common root frame by search from the bottom of the\n      // control stack...\n\n\n      if (s === sampleLines.length || c === controlLines.length) {\n        s = sampleLines.length - 1;\n        c = controlLines.length - 1;\n\n        while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {\n          // We expect at least one stack frame to be shared.\n          // Typically this will be the root most one. However, stack frames may be\n          // cut off due to maximum stack limits. In this case, one maybe cut off\n          // earlier than the other. We assume that the sample is longer or the same\n          // and there for cut off earlier. So we should find the root most frame in\n          // the sample somewhere in the control.\n          c--;\n        }\n      }\n\n      for (; s >= 1 && c >= 0; s--, c--) {\n        // Next we find the first one that isn't the same which should be the\n        // frame that called our sample function and the control.\n        if (sampleLines[s] !== controlLines[c]) {\n          // In V8, the first line is describing the message but other VMs don't.\n          // If we're about to return the first line, and the control is also on the same\n          // line, that's a pretty good indicator that our sample threw at same line as\n          // the control. I.e. before we entered the sample frame. So we ignore this result.\n          // This can happen if you passed a class to function component, or non-function.\n          if (s !== 1 || c !== 1) {\n            do {\n              s--;\n              c--; // We may still have similar intermediate frames from the construct call.\n              // The next one that isn't the same should be our match though.\n\n              if (c < 0 || sampleLines[s] !== controlLines[c]) {\n                // V8 adds a \"new\" prefix for native classes. Let's remove it to make it prettier.\n                var _frame = '\\n' + sampleLines[s].replace(' at new ', ' at '); // If our component frame is labeled \"<anonymous>\"\n                // but we have a user-provided \"displayName\"\n                // splice it in to make the stack more readable.\n\n\n                if (fn.displayName && _frame.includes('<anonymous>')) {\n                  _frame = _frame.replace('<anonymous>', fn.displayName);\n                }\n\n                if (true) {\n                  if (typeof fn === 'function') {\n                    componentFrameCache.set(fn, _frame);\n                  }\n                } // Return the line we found.\n\n\n                return _frame;\n              }\n            } while (s >= 1 && c >= 0);\n          }\n\n          break;\n        }\n      }\n    }\n  } finally {\n    reentry = false;\n\n    {\n      ReactCurrentDispatcher.current = previousDispatcher;\n      reenableLogs();\n    }\n\n    Error.prepareStackTrace = previousPrepareStackTrace;\n  } // Fallback to just using the name if we couldn't make it throw.\n\n\n  var name = fn ? fn.displayName || fn.name : '';\n  var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';\n\n  {\n    if (typeof fn === 'function') {\n      componentFrameCache.set(fn, syntheticFrame);\n    }\n  }\n\n  return syntheticFrame;\n}\nfunction describeFunctionComponentFrame(fn, ownerFn) {\n  {\n    return describeNativeComponentFrame(fn, false);\n  }\n}\n\nfunction shouldConstruct(Component) {\n  var prototype = Component.prototype;\n  return !!(prototype && prototype.isReactComponent);\n}\n\nfunction describeUnknownElementTypeFrameInDEV(type, ownerFn) {\n\n  if (type == null) {\n    return '';\n  }\n\n  if (typeof type === 'function') {\n    {\n      return describeNativeComponentFrame(type, shouldConstruct(type));\n    }\n  }\n\n  if (typeof type === 'string') {\n    return describeBuiltInComponentFrame(type);\n  }\n\n  switch (type) {\n    case REACT_SUSPENSE_TYPE:\n      return describeBuiltInComponentFrame('Suspense');\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return describeBuiltInComponentFrame('SuspenseList');\n  }\n\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_FORWARD_REF_TYPE:\n        return describeFunctionComponentFrame(type.render);\n\n      case REACT_MEMO_TYPE:\n        // Memo may contain any component type so we recursively resolve it.\n        return describeUnknownElementTypeFrameInDEV(type.type, ownerFn);\n\n      case REACT_LAZY_TYPE:\n        {\n          var lazyComponent = type;\n          var payload = lazyComponent._payload;\n          var init = lazyComponent._init;\n\n          try {\n            // Lazy may contain any component type so we recursively resolve it.\n            return describeUnknownElementTypeFrameInDEV(init(payload), ownerFn);\n          } catch (x) {}\n        }\n    }\n  }\n\n  return '';\n}\n\nvar ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\nvar ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\nvar REACT_CLIENT_REFERENCE = Symbol.for('react.client.reference');\nvar specialPropKeyWarningShown;\nvar specialPropRefWarningShown;\nvar didWarnAboutStringRefs;\n\n{\n  didWarnAboutStringRefs = {};\n}\n\nfunction hasValidRef(config) {\n  {\n    if (hasOwnProperty.call(config, 'ref')) {\n      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;\n\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n\n  return config.ref !== undefined;\n}\n\nfunction hasValidKey(config) {\n  {\n    if (hasOwnProperty.call(config, 'key')) {\n      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;\n\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n\n  return config.key !== undefined;\n}\n\nfunction warnIfStringRefCannotBeAutoConverted(config, self) {\n  {\n    if (typeof config.ref === 'string' && ReactCurrentOwner.current && self && ReactCurrentOwner.current.stateNode !== self) {\n      var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);\n\n      if (!didWarnAboutStringRefs[componentName]) {\n        error('Component \"%s\" contains the string ref \"%s\". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config.ref);\n\n        didWarnAboutStringRefs[componentName] = true;\n      }\n    }\n  }\n}\n\nfunction defineKeyPropWarningGetter(props, displayName) {\n  {\n    var warnAboutAccessingKey = function () {\n      if (!specialPropKeyWarningShown) {\n        specialPropKeyWarningShown = true;\n\n        error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\n      }\n    };\n\n    warnAboutAccessingKey.isReactWarning = true;\n    Object.defineProperty(props, 'key', {\n      get: warnAboutAccessingKey,\n      configurable: true\n    });\n  }\n}\n\nfunction defineRefPropWarningGetter(props, displayName) {\n  {\n    {\n      var warnAboutAccessingRef = function () {\n        if (!specialPropRefWarningShown) {\n          specialPropRefWarningShown = true;\n\n          error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\n        }\n      };\n\n      warnAboutAccessingRef.isReactWarning = true;\n      Object.defineProperty(props, 'ref', {\n        get: warnAboutAccessingRef,\n        configurable: true\n      });\n    }\n  }\n}\n/**\n * Factory method to create a new React element. This no longer adheres to\n * the class pattern, so do not use new to call it. Also, instanceof check\n * will not work. Instead test $$typeof field against Symbol.for('react.element') to check\n * if something is a React Element.\n *\n * @param {*} type\n * @param {*} props\n * @param {*} key\n * @param {string|object} ref\n * @param {*} owner\n * @param {*} self A *temporary* helper to detect places where `this` is\n * different from the `owner` when React.createElement is called, so that we\n * can warn. We want to get rid of owner and replace string `ref`s with arrow\n * functions, and as long as `this` and owner are the same, there will be no\n * change in behavior.\n * @param {*} source An annotation object (added by a transpiler or otherwise)\n * indicating filename, line number, and/or other information.\n * @internal\n */\n\n\nfunction ReactElement(type, key, _ref, self, source, owner, props) {\n  var ref;\n\n  {\n    ref = _ref;\n  }\n\n  var element;\n\n  {\n    // In prod, `ref` is a regular property. It will be removed in a\n    // future release.\n    element = {\n      // This tag allows us to uniquely identify this as a React Element\n      $$typeof: REACT_ELEMENT_TYPE,\n      // Built-in properties that belong on the element\n      type: type,\n      key: key,\n      ref: ref,\n      props: props,\n      // Record the component responsible for creating this element.\n      _owner: owner\n    };\n  }\n\n  {\n    // The validation flag is currently mutative. We put it on\n    // an external backing store so that we can freeze the whole object.\n    // This can be replaced with a WeakMap once they are implemented in\n    // commonly used development environments.\n    element._store = {}; // To make comparing ReactElements easier for testing purposes, we make\n    // the validation flag non-enumerable (where possible, which should\n    // include every environment we run tests in), so the test framework\n    // ignores it.\n\n    Object.defineProperty(element._store, 'validated', {\n      configurable: false,\n      enumerable: false,\n      writable: true,\n      value: false\n    }); // debugInfo contains Server Component debug information.\n\n    Object.defineProperty(element, '_debugInfo', {\n      configurable: false,\n      enumerable: false,\n      writable: true,\n      value: null\n    });\n\n    if (Object.freeze) {\n      Object.freeze(element.props);\n      Object.freeze(element);\n    }\n  }\n\n  return element;\n}\nvar didWarnAboutKeySpread = {};\n/**\n * https://github.com/reactjs/rfcs/pull/107\n * @param {*} type\n * @param {object} props\n * @param {string} key\n */\n\nfunction jsxDEV$1(type, config, maybeKey, isStaticChildren, source, self) {\n  {\n    if (!isValidElementType(type)) {\n      // This is an invalid element type.\n      //\n      // We warn in this case but don't throw. We expect the element creation to\n      // succeed and there will likely be errors in render.\n      var info = '';\n\n      if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {\n        info += ' You likely forgot to export your component from the file ' + \"it's defined in, or you might have mixed up default and named imports.\";\n      }\n\n      var typeString;\n\n      if (type === null) {\n        typeString = 'null';\n      } else if (isArray(type)) {\n        typeString = 'array';\n      } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {\n        typeString = \"<\" + (getComponentNameFromType(type.type) || 'Unknown') + \" />\";\n        info = ' Did you accidentally export a JSX literal instead of a component?';\n      } else {\n        typeString = typeof type;\n      }\n\n      error('React.jsx: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);\n    } else {\n      // This is a valid element type.\n      // Skip key warning if the type isn't valid since our key validation logic\n      // doesn't expect a non-string/function type and can throw confusing\n      // errors. We don't want exception behavior to differ between dev and\n      // prod. (Rendering will throw with a helpful message and as soon as the\n      // type is fixed, the key warnings will appear.)\n      var children = config.children;\n\n      if (children !== undefined) {\n        if (isStaticChildren) {\n          if (isArray(children)) {\n            for (var i = 0; i < children.length; i++) {\n              validateChildKeys(children[i], type);\n            }\n\n            if (Object.freeze) {\n              Object.freeze(children);\n            }\n          } else {\n            error('React.jsx: Static children should always be an array. ' + 'You are likely explicitly calling React.jsxs or React.jsxDEV. ' + 'Use the Babel transform instead.');\n          }\n        } else {\n          validateChildKeys(children, type);\n        }\n      }\n    } // Warn about key spread regardless of whether the type is valid.\n\n\n    if (hasOwnProperty.call(config, 'key')) {\n      var componentName = getComponentNameFromType(type);\n      var keys = Object.keys(config).filter(function (k) {\n        return k !== 'key';\n      });\n      var beforeExample = keys.length > 0 ? '{key: someKey, ' + keys.join(': ..., ') + ': ...}' : '{key: someKey}';\n\n      if (!didWarnAboutKeySpread[componentName + beforeExample]) {\n        var afterExample = keys.length > 0 ? '{' + keys.join(': ..., ') + ': ...}' : '{}';\n\n        error('A props object containing a \"key\" prop is being spread into JSX:\\n' + '  let props = %s;\\n' + '  <%s {...props} />\\n' + 'React keys must be passed directly to JSX without using spread:\\n' + '  let props = %s;\\n' + '  <%s key={someKey} {...props} />', beforeExample, componentName, afterExample, componentName);\n\n        didWarnAboutKeySpread[componentName + beforeExample] = true;\n      }\n    }\n\n    var propName; // Reserved names are extracted\n\n    var props = {};\n    var key = null;\n    var ref = null; // Currently, key can be spread in as a prop. This causes a potential\n    // issue if key is also explicitly declared (ie. <div {...props} key=\"Hi\" />\n    // or <div key=\"Hi\" {...props} /> ). We want to deprecate key spread,\n    // but as an intermediary step, we will use jsxDEV for everything except\n    // <div {...props} key=\"Hi\" />, because we aren't currently able to tell if\n    // key is explicitly declared to be undefined or not.\n\n    if (maybeKey !== undefined) {\n      {\n        checkKeyStringCoercion(maybeKey);\n      }\n\n      key = '' + maybeKey;\n    }\n\n    if (hasValidKey(config)) {\n      {\n        checkKeyStringCoercion(config.key);\n      }\n\n      key = '' + config.key;\n    }\n\n    if (hasValidRef(config)) {\n      {\n        ref = config.ref;\n      }\n\n      warnIfStringRefCannotBeAutoConverted(config, self);\n    } // Remaining properties are added to a new props object\n\n\n    for (propName in config) {\n      if (hasOwnProperty.call(config, propName) && // Skip over reserved prop names\n      propName !== 'key' && (propName !== 'ref')) {\n        props[propName] = config[propName];\n      }\n    } // Resolve default props\n\n\n    if (type && type.defaultProps) {\n      var defaultProps = type.defaultProps;\n\n      for (propName in defaultProps) {\n        if (props[propName] === undefined) {\n          props[propName] = defaultProps[propName];\n        }\n      }\n    }\n\n    if (key || ref) {\n      var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;\n\n      if (key) {\n        defineKeyPropWarningGetter(props, displayName);\n      }\n\n      if (ref) {\n        defineRefPropWarningGetter(props, displayName);\n      }\n    }\n\n    var element = ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);\n\n    if (type === REACT_FRAGMENT_TYPE) {\n      validateFragmentProps(element);\n    }\n\n    return element;\n  }\n}\n\nfunction getDeclarationErrorAddendum() {\n  {\n    if (ReactCurrentOwner.current) {\n      var name = getComponentNameFromType(ReactCurrentOwner.current.type);\n\n      if (name) {\n        return '\\n\\nCheck the render method of `' + name + '`.';\n      }\n    }\n\n    return '';\n  }\n}\n/**\n * Ensure that every element either is passed in a static location, in an\n * array with an explicit keys property defined, or in an object literal\n * with valid key property.\n *\n * @internal\n * @param {ReactNode} node Statically passed child of any type.\n * @param {*} parentType node's parent's type.\n */\n\n\nfunction validateChildKeys(node, parentType) {\n  {\n    if (typeof node !== 'object' || !node) {\n      return;\n    }\n\n    if (node.$$typeof === REACT_CLIENT_REFERENCE) ; else if (isArray(node)) {\n      for (var i = 0; i < node.length; i++) {\n        var child = node[i];\n\n        if (isValidElement(child)) {\n          validateExplicitKey(child, parentType);\n        }\n      }\n    } else if (isValidElement(node)) {\n      // This element was passed in a valid location.\n      if (node._store) {\n        node._store.validated = true;\n      }\n    } else {\n      var iteratorFn = getIteratorFn(node);\n\n      if (typeof iteratorFn === 'function') {\n        // Entry iterators used to provide implicit keys,\n        // but now we print a separate warning for them later.\n        if (iteratorFn !== node.entries) {\n          var iterator = iteratorFn.call(node);\n          var step;\n\n          while (!(step = iterator.next()).done) {\n            if (isValidElement(step.value)) {\n              validateExplicitKey(step.value, parentType);\n            }\n          }\n        }\n      }\n    }\n  }\n}\n/**\n * Verifies the object is a ReactElement.\n * See https://reactjs.org/docs/react-api.html#isvalidelement\n * @param {?object} object\n * @return {boolean} True if `object` is a ReactElement.\n * @final\n */\n\n\nfunction isValidElement(object) {\n  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n}\nvar ownerHasKeyUseWarning = {};\n/**\n * Warn if the element doesn't have an explicit key assigned to it.\n * This element is in an array. The array could grow and shrink or be\n * reordered. All children that haven't already been validated are required to\n * have a \"key\" property assigned to it. Error statuses are cached so a warning\n * will only be shown once.\n *\n * @internal\n * @param {ReactElement} element Element that requires a key.\n * @param {*} parentType element's parent's type.\n */\n\nfunction validateExplicitKey(element, parentType) {\n  {\n    if (!element._store || element._store.validated || element.key != null) {\n      return;\n    }\n\n    element._store.validated = true;\n    var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);\n\n    if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {\n      return;\n    }\n\n    ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a\n    // property, it may be the creator of the child that's responsible for\n    // assigning it a key.\n\n    var childOwner = '';\n\n    if (element && element._owner && element._owner !== ReactCurrentOwner.current) {\n      // Give the component that originally created this child.\n      childOwner = \" It was passed a child from \" + getComponentNameFromType(element._owner.type) + \".\";\n    }\n\n    setCurrentlyValidatingElement(element);\n\n    error('Each child in a list should have a unique \"key\" prop.' + '%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);\n\n    setCurrentlyValidatingElement(null);\n  }\n}\n\nfunction setCurrentlyValidatingElement(element) {\n  {\n    if (element) {\n      var owner = element._owner;\n      var stack = describeUnknownElementTypeFrameInDEV(element.type, owner ? owner.type : null);\n      ReactDebugCurrentFrame.setExtraStackFrame(stack);\n    } else {\n      ReactDebugCurrentFrame.setExtraStackFrame(null);\n    }\n  }\n}\n\nfunction getCurrentComponentErrorInfo(parentType) {\n  {\n    var info = getDeclarationErrorAddendum();\n\n    if (!info) {\n      var parentName = getComponentNameFromType(parentType);\n\n      if (parentName) {\n        info = \"\\n\\nCheck the top-level render call using <\" + parentName + \">.\";\n      }\n    }\n\n    return info;\n  }\n}\n/**\n * Given a fragment, validate that it can only be provided with fragment props\n * @param {ReactElement} fragment\n */\n\n\nfunction validateFragmentProps(fragment) {\n  // TODO: Move this to render phase instead of at element creation.\n  {\n    var keys = Object.keys(fragment.props);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n\n      if (key !== 'children' && key !== 'key') {\n        setCurrentlyValidatingElement(fragment);\n\n        error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);\n\n        setCurrentlyValidatingElement(null);\n        break;\n      }\n    }\n\n    if (fragment.ref !== null) {\n      setCurrentlyValidatingElement(fragment);\n\n      error('Invalid attribute `ref` supplied to `React.Fragment`.');\n\n      setCurrentlyValidatingElement(null);\n    }\n  }\n}\n\nvar jsxDEV = jsxDEV$1 ;\n\nexports.Fragment = REACT_FRAGMENT_TYPE;\nexports.jsxDEV = jsxDEV;\n  })();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js":
/*!******************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react/jsx-dev-runtime.js ***!
  \******************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ./cjs/react-jsx-dev-runtime.development.js */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvcmVhY3QvanN4LWRldi1ydW50aW1lLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQUksS0FBcUMsRUFBRSxFQUUxQyxDQUFDO0FBQ0YsRUFBRSw4TEFBc0U7QUFDeEUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jb21waWxlZC9yZWFjdC9qc3gtZGV2LXJ1bnRpbWUuanM/NDFlNiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtanN4LWRldi1ydW50aW1lLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWpzeC1kZXYtcnVudGltZS5kZXZlbG9wbWVudC5qcycpO1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\n"));

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ var __webpack_exec__ = function(moduleId) { return __webpack_require__(__webpack_require__.s = moduleId); }
/******/ __webpack_require__.O(0, ["main-app"], function() { return __webpack_exec__("(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Csilen%5C%5COneDrive%5C%5CDocuments%5C%5CApp%20Development%5C%5CCircle%5C%5Capp%5C%5Cglobals.css%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Csilen%5C%5COneDrive%5C%5CDocuments%5C%5CApp%20Development%5C%5CCircle%5C%5Ccontexts%5C%5CContactContext.tsx%22%2C%22ids%22%3A%5B%22ContactProvider%22%5D%7D&server=false!"); });
/******/ var __webpack_exports__ = __webpack_require__.O();
/******/ _N_E = __webpack_exports__;
/******/ }
]);