"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/memo/page",{

/***/ "(app-pages-browser)/./data/supabaseDataService.ts":
/*!*************************************!*\
  !*** ./data/supabaseDataService.ts ***!
  \*************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SupabaseDataService: function() { return /* binding */ SupabaseDataService; }\n/* harmony export */ });\n/* harmony import */ var _lib_supabase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/supabase */ \"(app-pages-browser)/./lib/supabase.ts\");\n// data/supabaseDataService.ts\n\n// Helper functions to convert between app types and database types\nfunction precisionDateToDb(date) {\n    let prefix = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"birth\";\n    if (!date) return {\n        [\"\".concat(prefix, \"_year\")]: null,\n        [\"\".concat(prefix, \"_month\")]: null,\n        [\"\".concat(prefix, \"_day\")]: null\n    };\n    return {\n        [\"\".concat(prefix, \"_year\")]: date.year,\n        [\"\".concat(prefix, \"_month\")]: date.month,\n        [\"\".concat(prefix, \"_day\")]: date.day\n    };\n}\nfunction dbToPrecisionDate(birth_year, birth_month, birth_day) {\n    if (birth_year === null || birth_month === null || birth_day === null) return undefined;\n    return {\n        year: birth_year,\n        month: birth_month,\n        day: birth_day\n    };\n}\nfunction timeValueToDb(time) {\n    if (!time) return {\n        time_hour: null,\n        time_minute: null\n    };\n    return {\n        time_hour: time.hour,\n        time_minute: time.minute\n    };\n}\nfunction dbToTimeValue(time_hour, time_minute) {\n    if (time_hour === null || time_minute === null) return undefined;\n    return {\n        hour: time_hour,\n        minute: time_minute\n    };\n}\nclass SupabaseDataService {\n    async updateContact(id, updates) {\n        const { birth_date, ...otherUpdates } = updates;\n        const dbUpdates = {\n            ...otherUpdates\n        };\n        if (birth_date) {\n            const { birth_year, birth_month, birth_day } = precisionDateToDb(birth_date);\n            dbUpdates.birth_year = birth_year;\n            dbUpdates.birth_month = birth_month;\n            dbUpdates.birth_day = birth_day;\n        }\n        const { data, error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"contacts\").update(dbUpdates).eq(\"id\", id).select(\"\\n        *,\\n        occupation:occupations(*),\\n        organization:organizations(*)\\n      \").single();\n        if (error) throw error;\n        // Get related data\n        const contact = await this.getContactWithRelations(data.id);\n        return contact;\n    }\n    async addContact(contact) {\n        const { birth_date, subject_ids, relationship_ids, note_ids, ...contactData } = contact;\n        const { birth_year, birth_month, birth_day } = precisionDateToDb(birth_date);\n        const { data, error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"contacts\").insert({\n            ...contactData,\n            birth_year,\n            birth_month,\n            birth_day\n        }).select().single();\n        if (error) throw error;\n        // Add relationships\n        if (subject_ids.length > 0) {\n            await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"contact_subjects\").insert(subject_ids.map((subject_id)=>({\n                    contact_id: data.id,\n                    subject_id\n                })));\n        }\n        if (relationship_ids.length > 0) {\n            await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"contact_relationships\").insert(relationship_ids.map((relationship_id)=>({\n                    contact_id: data.id,\n                    relationship_id\n                })));\n        }\n        if (note_ids.length > 0) {\n            await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"contact_notes\").insert(note_ids.map((note_id)=>({\n                    contact_id: data.id,\n                    note_id\n                })));\n        }\n        return this.getContactWithRelations(data.id);\n    }\n    async deleteContact(id) {\n        const { error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"contacts\").delete().eq(\"id\", id);\n        if (error) throw error;\n    }\n    async addSubject(subject) {\n        const { data, error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"subjects\").insert(subject).select().single();\n        if (error) throw error;\n        return data;\n    }\n    async addOrganization(organization) {\n        const { data, error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"organizations\").insert(organization).select().single();\n        if (error) throw error;\n        return data;\n    }\n    async addOccupation(occupation) {\n        const { data, error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"occupations\").insert(occupation).select().single();\n        if (error) throw error;\n        return data;\n    }\n    async addRelationship(relationship) {\n        const { data, error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"relationships\").insert(relationship).select().single();\n        if (error) throw error;\n        return data;\n    }\n    async addSentiment(sentiment) {\n        const { data, error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"sentiments\").insert(sentiment).select().single();\n        if (error) throw error;\n        return data;\n    }\n    async updateSentiment(id, updates) {\n        const { data, error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"sentiments\").update(updates).eq(\"id\", id).select().single();\n        if (error) throw error;\n        return data;\n    }\n    async addNote(note) {\n        const { date, time_value, sentiment_ids, contact_ids, ...noteData } = note;\n        const noteDateFields = precisionDateToDb(date, \"note\");\n        const { time_hour, time_minute } = timeValueToDb(time_value);\n        const { data, error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"notes\").insert({\n            ...noteData,\n            ...noteDateFields,\n            time_hour,\n            time_minute\n        }).select().single();\n        if (error) throw error;\n        // Add relationships\n        if (sentiment_ids.length > 0) {\n            await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"note_sentiments\").insert(sentiment_ids.map((sentiment_id)=>({\n                    note_id: data.id,\n                    sentiment_id\n                })));\n        }\n        if (contact_ids.length > 0) {\n            await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"contact_notes\").insert(contact_ids.map((contact_id)=>({\n                    note_id: data.id,\n                    contact_id\n                })));\n        }\n        return this.getNoteWithRelations(data.id);\n    }\n    async updateNote(id, updates) {\n        console.log(\"SupabaseDataService: updateNote called with id:\", id, \"updates:\", updates);\n        const { date, time_value, sentiment_ids, contact_ids, ...otherUpdates } = updates;\n        const dbUpdates = {\n            ...otherUpdates\n        };\n        if (date) {\n            const noteDateFields = precisionDateToDb(date, \"note\");\n            Object.assign(dbUpdates, noteDateFields);\n        }\n        if (time_value) {\n            const { time_hour, time_minute } = timeValueToDb(time_value);\n            dbUpdates.time_hour = time_hour;\n            dbUpdates.time_minute = time_minute;\n        }\n        console.log(\"SupabaseDataService: dbUpdates to send:\", dbUpdates);\n        // First, let's check if the note exists\n        const { data: existingNote, error: checkError } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"notes\").select(\"id, title\").eq(\"id\", id).single();\n        console.log(\"SupabaseDataService: Note existence check:\", {\n            existingNote,\n            checkError\n        });\n        if (checkError) throw checkError;\n        if (!existingNote) throw new Error(\"Note with id \".concat(id, \" not found\"));\n        // Only update the main notes table if there are actual field updates\n        let data = existingNote;\n        if (Object.keys(dbUpdates).length > 0) {\n            const { data: updateData, error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"notes\").update(dbUpdates).eq(\"id\", id).select().single();\n            console.log(\"SupabaseDataService: Update result:\", {\n                data: updateData,\n                error\n            });\n            if (error) throw error;\n            data = updateData;\n        } else {\n            console.log(\"SupabaseDataService: Skipping main table update - no field updates needed\");\n        }\n        // Update relationships if provided\n        if (sentiment_ids) {\n            await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"note_sentiments\").delete().eq(\"note_id\", id);\n            if (sentiment_ids.length > 0) {\n                await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"note_sentiments\").insert(sentiment_ids.map((sentiment_id)=>({\n                        note_id: id,\n                        sentiment_id\n                    })));\n            }\n        }\n        if (contact_ids) {\n            await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"contact_notes\").delete().eq(\"note_id\", id);\n            if (contact_ids.length > 0) {\n                await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"contact_notes\").insert(contact_ids.map((contact_id)=>({\n                        note_id: id,\n                        contact_id\n                    })));\n            }\n        }\n        return this.getNoteWithRelations(data.id);\n    }\n    async addCommitment(commitment) {\n        const { contact_ids, ...commitmentData } = commitment;\n        const { data, error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"commitments\").insert(commitmentData).select().single();\n        if (error) throw error;\n        // Add relationships\n        if (contact_ids.length > 0) {\n            await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"commitment_contacts\").insert(contact_ids.map((contact_id)=>({\n                    commitment_id: data.id,\n                    contact_id\n                })));\n        }\n        return this.getCommitmentWithRelations(data.id);\n    }\n    async updateCommitment(id, updates) {\n        const { contact_ids, ...otherUpdates } = updates;\n        const { data, error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"commitments\").update(otherUpdates).eq(\"id\", id).select().single();\n        if (error) throw error;\n        // Update relationships if provided\n        if (contact_ids) {\n            await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"commitment_contacts\").delete().eq(\"commitment_id\", id);\n            if (contact_ids.length > 0) {\n                await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"commitment_contacts\").insert(contact_ids.map((contact_id)=>({\n                        commitment_id: id,\n                        contact_id\n                    })));\n            }\n        }\n        return this.getCommitmentWithRelations(data.id);\n    }\n    async getAllData() {\n        var _contactSubjects_data, _contactRelationships_data, _contactNotes_data, _noteSentiments_data, _commitmentContacts_data;\n        // Fetch all data in parallel\n        const [{ data: contacts, error: contactsError }, { data: subjects, error: subjectsError }, { data: organizations, error: organizationsError }, { data: occupations, error: occupationsError }, { data: relationships, error: relationshipsError }, { data: sentiments, error: sentimentsError }, { data: notes, error: notesError }, { data: commitments, error: commitmentsError }, { data: drafts, error: draftsError }] = await Promise.all([\n            _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"contacts\").select(\"\\n        *,\\n        occupation:occupations(*),\\n        organization:organizations(*)\\n      \"),\n            _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"subjects\").select(\"*\"),\n            _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"organizations\").select(\"*\"),\n            _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"occupations\").select(\"*\"),\n            _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"relationships\").select(\"*\"),\n            _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"sentiments\").select(\"*\"),\n            _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"notes\").select(\"*\"),\n            _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"commitments\").select(\"*\"),\n            _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"drafts\").select(\"*\")\n        ]);\n        // Check for errors\n        const errors = [\n            contactsError,\n            subjectsError,\n            organizationsError,\n            occupationsError,\n            relationshipsError,\n            sentimentsError,\n            notesError,\n            commitmentsError,\n            draftsError\n        ];\n        const firstError = errors.find((error)=>error);\n        if (firstError) throw firstError;\n        // Get all relationships\n        const [contactSubjects, contactRelationships, contactNotes, noteSentiments, commitmentContacts] = await Promise.all([\n            _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"contact_subjects\").select(\"*\"),\n            _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"contact_relationships\").select(\"*\"),\n            _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"contact_notes\").select(\"*\"),\n            _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"note_sentiments\").select(\"*\"),\n            _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"commitment_contacts\").select(\"*\")\n        ]);\n        // Build lookup maps\n        const contactSubjectsMap = new Map();\n        (_contactSubjects_data = contactSubjects.data) === null || _contactSubjects_data === void 0 ? void 0 : _contactSubjects_data.forEach((cs)=>{\n            if (!contactSubjectsMap.has(cs.contact_id)) contactSubjectsMap.set(cs.contact_id, []);\n            contactSubjectsMap.get(cs.contact_id).push(cs.subject_id);\n        });\n        const contactRelationshipsMap = new Map();\n        (_contactRelationships_data = contactRelationships.data) === null || _contactRelationships_data === void 0 ? void 0 : _contactRelationships_data.forEach((cr)=>{\n            if (!contactRelationshipsMap.has(cr.contact_id)) contactRelationshipsMap.set(cr.contact_id, []);\n            contactRelationshipsMap.get(cr.contact_id).push(cr.relationship_id);\n        });\n        const contactNotesMap = new Map();\n        (_contactNotes_data = contactNotes.data) === null || _contactNotes_data === void 0 ? void 0 : _contactNotes_data.forEach((cn)=>{\n            if (!contactNotesMap.has(cn.contact_id)) contactNotesMap.set(cn.contact_id, []);\n            contactNotesMap.get(cn.contact_id).push(cn.note_id);\n        });\n        const noteSentimentsMap = new Map();\n        (_noteSentiments_data = noteSentiments.data) === null || _noteSentiments_data === void 0 ? void 0 : _noteSentiments_data.forEach((ns)=>{\n            if (!noteSentimentsMap.has(ns.note_id)) noteSentimentsMap.set(ns.note_id, []);\n            noteSentimentsMap.get(ns.note_id).push(ns.sentiment_id);\n        });\n        const commitmentContactsMap = new Map();\n        (_commitmentContacts_data = commitmentContacts.data) === null || _commitmentContacts_data === void 0 ? void 0 : _commitmentContacts_data.forEach((cc)=>{\n            if (!commitmentContactsMap.has(cc.commitment_id)) commitmentContactsMap.set(cc.commitment_id, []);\n            commitmentContactsMap.get(cc.commitment_id).push(cc.contact_id);\n        });\n        // Convert to app types\n        const convertedContacts = (contacts === null || contacts === void 0 ? void 0 : contacts.map((contact)=>({\n                id: contact.id,\n                name: contact.name,\n                occupation_id: contact.occupation_id || undefined,\n                organization_id: contact.organization_id || undefined,\n                birth_date: dbToPrecisionDate(contact.birth_year, contact.birth_month, contact.birth_day),\n                last_interaction: contact.last_interaction,\n                subject_ids: contactSubjectsMap.get(contact.id) || [],\n                relationship_ids: contactRelationshipsMap.get(contact.id) || [],\n                note_ids: contactNotesMap.get(contact.id) || [],\n                is_trashed: contact.is_trashed\n            }))) || [];\n        const convertedNotes = (notes === null || notes === void 0 ? void 0 : notes.map((note)=>({\n                id: note.id,\n                title: note.title,\n                text: note.text,\n                date: dbToPrecisionDate(note.note_year, note.note_month, note.note_day),\n                time_value: dbToTimeValue(note.time_hour, note.time_minute),\n                sentiment_ids: noteSentimentsMap.get(note.id) || [],\n                contact_ids: contactNotesMap.get(note.id) || [],\n                created_at: note.created_at,\n                is_trashed: note.is_trashed\n            }))) || [];\n        const convertedCommitments = (commitments === null || commitments === void 0 ? void 0 : commitments.map((commitment)=>({\n                id: commitment.id,\n                text: commitment.text,\n                time: commitment.time,\n                contact_ids: commitmentContactsMap.get(commitment.id) || [],\n                is_trashed: commitment.is_trashed\n            }))) || [];\n        const convertedDrafts = (drafts === null || drafts === void 0 ? void 0 : drafts.map((draft)=>({\n                date: {\n                    year: draft.draft_year,\n                    month: draft.draft_month,\n                    day: draft.draft_day\n                },\n                time: {\n                    hour: draft.time_hour,\n                    minute: draft.time_minute\n                },\n                text: draft.text\n            }))) || [];\n        return {\n            contacts: convertedContacts,\n            subjects: (subjects === null || subjects === void 0 ? void 0 : subjects.map((s)=>({\n                    id: s.id,\n                    label: s.label,\n                    category: s.category\n                }))) || [],\n            organizations: (organizations === null || organizations === void 0 ? void 0 : organizations.map((o)=>({\n                    id: o.id,\n                    name: o.name\n                }))) || [],\n            occupations: (occupations === null || occupations === void 0 ? void 0 : occupations.map((o)=>({\n                    id: o.id,\n                    title: o.title\n                }))) || [],\n            relationships: (relationships === null || relationships === void 0 ? void 0 : relationships.map((r)=>({\n                    id: r.id,\n                    label: r.label,\n                    category: r.category\n                }))) || [],\n            sentiments: (sentiments === null || sentiments === void 0 ? void 0 : sentiments.map((s)=>({\n                    id: s.id,\n                    label: s.label,\n                    category: s.category\n                }))) || [],\n            notes: convertedNotes,\n            commitments: convertedCommitments,\n            drafts: convertedDrafts\n        };\n    }\n    async getContactWithRelations(contactId) {\n        // Get contact with related data\n        const { data: contactData, error: contactError } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"contacts\").select(\"\\n        *,\\n        occupation:occupations(*),\\n        organization:organizations(*)\\n      \").eq(\"id\", contactId).single();\n        if (contactError) throw contactError;\n        // Get related subjects\n        const { data: subjectData } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"contact_subjects\").select(\"subject_id\").eq(\"contact_id\", contactId);\n        // Get related relationships\n        const { data: relationshipData } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"contact_relationships\").select(\"relationship_id\").eq(\"contact_id\", contactId);\n        // Get related notes\n        const { data: noteData } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"contact_notes\").select(\"note_id\").eq(\"contact_id\", contactId);\n        // Convert to Contact interface\n        const contact = {\n            id: contactData.id,\n            name: contactData.name,\n            occupation_id: contactData.occupation_id,\n            organization_id: contactData.organization_id,\n            birth_date: dbToPrecisionDate(contactData.birth_year, contactData.birth_month, contactData.birth_day),\n            last_interaction: contactData.last_interaction,\n            is_trashed: contactData.is_trashed || false,\n            subject_ids: (subjectData === null || subjectData === void 0 ? void 0 : subjectData.map((s)=>s.subject_id)) || [],\n            relationship_ids: (relationshipData === null || relationshipData === void 0 ? void 0 : relationshipData.map((r)=>r.relationship_id)) || [],\n            note_ids: (noteData === null || noteData === void 0 ? void 0 : noteData.map((n)=>n.note_id)) || []\n        };\n        return contact;\n    }\n    async getNoteWithRelations(noteId) {\n        // Get note data\n        const { data: noteData, error: noteError } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"notes\").select(\"*\").eq(\"id\", noteId).single();\n        if (noteError) throw noteError;\n        // Get related sentiments\n        const { data: sentimentData } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"note_sentiments\").select(\"sentiment_id\").eq(\"note_id\", noteId);\n        // Get related contacts\n        const { data: contactData } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"contact_notes\").select(\"contact_id\").eq(\"note_id\", noteId);\n        // Convert to Note interface\n        const note = {\n            id: noteData.id,\n            title: noteData.title,\n            text: noteData.text,\n            date: dbToPrecisionDate(noteData.note_year, noteData.note_month, noteData.note_day),\n            time_value: dbToTimeValue(noteData.time_hour, noteData.time_minute),\n            sentiment_ids: (sentimentData === null || sentimentData === void 0 ? void 0 : sentimentData.map((s)=>s.sentiment_id)) || [],\n            contact_ids: (contactData === null || contactData === void 0 ? void 0 : contactData.map((c)=>c.contact_id)) || [],\n            created_at: noteData.created_at,\n            is_trashed: noteData.is_trashed\n        };\n        return note;\n    }\n    async getCommitmentWithRelations(commitmentId) {\n        // Implementation for getting a single commitment with all relations\n        throw new Error(\"Not implemented\");\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./data/supabaseDataService.ts\n"));

/***/ })

});