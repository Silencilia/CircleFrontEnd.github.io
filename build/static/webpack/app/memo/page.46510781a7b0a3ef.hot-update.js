"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/memo/page",{

/***/ "(app-pages-browser)/./data/dataService.ts":
/*!*****************************!*\
  !*** ./data/dataService.ts ***!
  \*****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MockDataService: function() { return /* binding */ MockDataService; },\n/* harmony export */   dataService: function() { return /* binding */ dataService; }\n/* harmony export */ });\n/* harmony import */ var _sampleData__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sampleData */ \"(app-pages-browser)/./data/sampleData.ts\");\n\n// Helper function to safely access localStorage\nconst getLocalStorage = (key)=>{\n    if ( true && window.localStorage) {\n        return window.localStorage.getItem(key);\n    }\n    return null;\n};\nconst setLocalStorage = (key, value)=>{\n    if ( true && window.localStorage) {\n        window.localStorage.setItem(key, value);\n    }\n};\nconst removeLocalStorage = (key)=>{\n    if ( true && window.localStorage) {\n        window.localStorage.removeItem(key);\n    }\n};\n// Mock implementation that simulates database operations\nclass MockDataService {\n    loadData() {\n        const savedData = getLocalStorage(\"circle-data\");\n        if (savedData) {\n            try {\n                const parsed = JSON.parse(savedData);\n                // Validate data structure\n                if (this.isValidData(parsed)) {\n                    this.data = parsed;\n                } else {\n                    console.warn(\"MockDataService: Invalid data format, using sample data\");\n                    removeLocalStorage(\"circle-data\");\n                }\n            } catch (error) {\n                console.error(\"MockDataService: Failed to parse saved data, using sample data\");\n                removeLocalStorage(\"circle-data\");\n            }\n        }\n    }\n    isValidData(data) {\n        return data.subjects && Array.isArray(data.subjects) && data.relationships && Array.isArray(data.relationships) && data.contacts && Array.isArray(data.contacts) && data.organizations && Array.isArray(data.organizations) && data.occupations && Array.isArray(data.occupations) && data.sentiments && Array.isArray(data.sentiments) && data.notes && Array.isArray(data.notes);\n    }\n    saveData() {\n        setLocalStorage(\"circle-data\", JSON.stringify(this.data));\n    }\n    simulateDelay() {\n        // Simulate network delay (50-200ms)\n        const delay = Math.random() * 150 + 50;\n        return new Promise((resolve)=>setTimeout(resolve, delay));\n    }\n    async updateContact(id, updates) {\n        await this.simulateDelay();\n        const contactIndex = this.data.contacts.findIndex((c)=>c.id === id);\n        if (contactIndex === -1) {\n            throw new Error(\"Contact with id \".concat(id, \" not found\"));\n        }\n        // Update the contact\n        this.data.contacts[contactIndex] = {\n            ...this.data.contacts[contactIndex],\n            ...updates\n        };\n        this.saveData();\n        return this.data.contacts[contactIndex];\n    }\n    async addContact(contact) {\n        await this.simulateDelay();\n        const newContact = {\n            ...contact,\n            id: Date.now(),\n            isTrashed: false\n        };\n        this.data.contacts.push(newContact);\n        this.saveData();\n        return newContact;\n    }\n    async deleteContact(id) {\n        await this.simulateDelay();\n        this.loadData(); // Ensure data is loaded\n        const initialLength = this.data.contacts.length;\n        this.data.contacts = this.data.contacts.filter((c)=>c.id !== id);\n        if (this.data.contacts.length === initialLength) {\n            throw new Error(\"Contact with id \".concat(id, \" not found\"));\n        }\n        this.saveData();\n    }\n    async addSubject(subject) {\n        await this.simulateDelay();\n        const newSubject = {\n            ...subject,\n            id: Date.now()\n        };\n        this.data.subjects.push(newSubject);\n        this.saveData();\n        return newSubject;\n    }\n    async addOrganization(organization) {\n        await this.simulateDelay();\n        const newOrganization = {\n            ...organization,\n            id: Date.now()\n        };\n        this.data.organizations.push(newOrganization);\n        this.saveData();\n        return newOrganization;\n    }\n    async addOccupation(occupation) {\n        await this.simulateDelay();\n        const newOccupation = {\n            ...occupation,\n            id: Date.now()\n        };\n        this.data.occupations.push(newOccupation);\n        this.saveData();\n        return newOccupation;\n    }\n    async addRelationship(relationship) {\n        await this.simulateDelay();\n        const newRelationship = {\n            ...relationship,\n            id: Date.now()\n        };\n        this.data.relationships.push(newRelationship);\n        this.saveData();\n        return newRelationship;\n    }\n    async addSentiment(sentiment) {\n        await this.simulateDelay();\n        const newSentiment = {\n            ...sentiment,\n            id: Date.now()\n        };\n        this.data.sentiments.push(newSentiment);\n        this.saveData();\n        return newSentiment;\n    }\n    async addNote(note) {\n        await this.simulateDelay();\n        const newNote = {\n            ...note,\n            id: Date.now(),\n            createdAt: new Date().toISOString(),\n            isTrashed: false\n        };\n        this.data.notes.push(newNote);\n        this.saveData();\n        return newNote;\n    }\n    async updateNote(id, updates) {\n        await this.simulateDelay();\n        const noteIndex = this.data.notes.findIndex((n)=>n.id === id);\n        if (noteIndex === -1) {\n            throw new Error(\"Note with id \".concat(id, \" not found\"));\n        }\n        // Update the note\n        this.data.notes[noteIndex] = {\n            ...this.data.notes[noteIndex],\n            ...updates\n        };\n        this.saveData();\n        return this.data.notes[noteIndex];\n    }\n    async addCommitment(commitment) {\n        await this.simulateDelay();\n        const newCommitment = {\n            ...commitment,\n            id: Date.now()\n        };\n        this.data.commitments.push(newCommitment);\n        this.saveData();\n        return newCommitment;\n    }\n    async updateCommitment(id, updates) {\n        await this.simulateDelay();\n        const idx = this.data.commitments.findIndex((c)=>c.id === id);\n        if (idx === -1) throw new Error(\"Commitment with id \".concat(id, \" not found\"));\n        this.data.commitments[idx] = {\n            ...this.data.commitments[idx],\n            ...updates\n        };\n        this.saveData();\n        return this.data.commitments[idx];\n    }\n    async getAllData() {\n        var _this_data_contacts_, _this_data_contacts_1;\n        console.log(\"\\uD83D\\uDCE1 MockDataService: getAllData called\");\n        console.log(\"\\uD83D\\uDD0D MockDataService: Current internal data source:\", {\n            isFromLocalStorage: this.data !== (0,_sampleData__WEBPACK_IMPORTED_MODULE_0__.getSampleData)(),\n            contactsCount: this.data.contacts.length,\n            sampleContactName: ((_this_data_contacts_ = this.data.contacts[0]) === null || _this_data_contacts_ === void 0 ? void 0 : _this_data_contacts_.name) || \"none\"\n        });\n        await this.simulateDelay();\n        // Reload from localStorage to get latest data\n        console.log(\"\\uD83D\\uDD04 MockDataService: Reloading from localStorage before returning data\");\n        this.loadData();\n        console.log(\"\\uD83D\\uDCE4 MockDataService: Returning data to caller:\", {\n            contactsCount: this.data.contacts.length,\n            notesCount: this.data.notes.length,\n            sampleContactName: ((_this_data_contacts_1 = this.data.contacts[0]) === null || _this_data_contacts_1 === void 0 ? void 0 : _this_data_contacts_1.name) || \"none\",\n            dataSource: this.data !== (0,_sampleData__WEBPACK_IMPORTED_MODULE_0__.getSampleData)() ? \"localStorage\" : \"sampleData\"\n        });\n        // Return a copy to prevent direct mutations\n        return {\n            contacts: [\n                ...this.data.contacts\n            ],\n            subjects: [\n                ...this.data.subjects\n            ],\n            organizations: [\n                ...this.data.organizations\n            ],\n            occupations: [\n                ...this.data.occupations\n            ],\n            relationships: [\n                ...this.data.relationships\n            ],\n            sentiments: [\n                ...this.data.sentiments\n            ],\n            notes: [\n                ...this.data.notes\n            ],\n            commitments: [\n                ...this.data.commitments\n            ]\n        };\n    }\n    constructor(){\n        // Initialize with sample data first, then try to load from localStorage\n        this.data = (0,_sampleData__WEBPACK_IMPORTED_MODULE_0__.getSampleData)();\n        // Load from localStorage only on the client side\n        if (true) {\n            this.loadData();\n        }\n    }\n}\n// Export singleton instance\nconst dataService = new MockDataService();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./data/dataService.ts\n"));

/***/ })

});