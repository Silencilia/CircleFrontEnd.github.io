"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/layout",{

/***/ "(app-pages-browser)/./data/dataService.ts":
/*!*****************************!*\
  !*** ./data/dataService.ts ***!
  \*****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MockDataService: function() { return /* binding */ MockDataService; },\n/* harmony export */   dataService: function() { return /* binding */ dataService; }\n/* harmony export */ });\n/* harmony import */ var _sampleData__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sampleData */ \"(app-pages-browser)/./data/sampleData.ts\");\n/* harmony import */ var _strings__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./strings */ \"(app-pages-browser)/./data/strings.ts\");\n\n\n// Helper function to safely access localStorage\nconst getLocalStorage = (key)=>{\n    if ( true && window.localStorage) {\n        return window.localStorage.getItem(key);\n    }\n    return null;\n};\nconst setLocalStorage = (key, value)=>{\n    if ( true && window.localStorage) {\n        window.localStorage.setItem(key, value);\n    }\n};\nconst removeLocalStorage = (key)=>{\n    if ( true && window.localStorage) {\n        window.localStorage.removeItem(key);\n    }\n};\n// Mock implementation that simulates database operations\nclass MockDataService {\n    loadData() {\n        const savedData = getLocalStorage(\"circle-data\");\n        if (savedData) {\n            try {\n                const parsed = JSON.parse(savedData);\n                // Validate data structure\n                if (this.isValidData(parsed)) {\n                    this.data = parsed;\n                } else {\n                    console.warn(\"MockDataService: Invalid data format, using sample data\");\n                    removeLocalStorage(\"circle-data\");\n                }\n            } catch (error) {\n                console.error(\"MockDataService: Failed to parse saved data, using sample data\");\n                removeLocalStorage(\"circle-data\");\n            }\n        }\n    }\n    isValidData(data) {\n        return data.subjects && Array.isArray(data.subjects) && data.relationships && Array.isArray(data.relationships) && data.contacts && Array.isArray(data.contacts) && data.organizations && Array.isArray(data.organizations) && data.occupations && Array.isArray(data.occupations) && data.sentiments && Array.isArray(data.sentiments) && data.notes && Array.isArray(data.notes);\n    }\n    saveData() {\n        setLocalStorage(\"circle-data\", JSON.stringify(this.data));\n    }\n    simulateDelay() {\n        // Simulate network delay (50-200ms)\n        const delay = Math.random() * 150 + 50;\n        return new Promise((resolve)=>setTimeout(resolve, delay));\n    }\n    async updateContact(id, updates) {\n        await this.simulateDelay();\n        const contactIndex = this.data.contacts.findIndex((c)=>c.id === id);\n        if (contactIndex === -1) {\n            throw new Error(\"Contact with id \".concat(id, \" not found\"));\n        }\n        // Update the contact\n        this.data.contacts[contactIndex] = {\n            ...this.data.contacts[contactIndex],\n            ...updates\n        };\n        this.saveData();\n        return this.data.contacts[contactIndex];\n    }\n    async addContact(contact) {\n        await this.simulateDelay();\n        const newContact = {\n            ...contact,\n            id: Date.now(),\n            isTrashed: false\n        };\n        this.data.contacts.push(newContact);\n        this.saveData();\n        return newContact;\n    }\n    async deleteContact(id) {\n        await this.simulateDelay();\n        this.loadData(); // Ensure data is loaded\n        const initialLength = this.data.contacts.length;\n        this.data.contacts = this.data.contacts.filter((c)=>c.id !== id);\n        if (this.data.contacts.length === initialLength) {\n            throw new Error(\"Contact with id \".concat(id, \" not found\"));\n        }\n        this.saveData();\n    }\n    async addSubject(subject) {\n        await this.simulateDelay();\n        const newSubject = {\n            ...subject,\n            id: Date.now()\n        };\n        this.data.subjects.push(newSubject);\n        this.saveData();\n        return newSubject;\n    }\n    async addOrganization(organization) {\n        await this.simulateDelay();\n        const newOrganization = {\n            ...organization,\n            id: Date.now()\n        };\n        this.data.organizations.push(newOrganization);\n        this.saveData();\n        return newOrganization;\n    }\n    async addOccupation(occupation) {\n        await this.simulateDelay();\n        const newOccupation = {\n            ...occupation,\n            id: Date.now()\n        };\n        this.data.occupations.push(newOccupation);\n        this.saveData();\n        return newOccupation;\n    }\n    async addRelationship(relationship) {\n        await this.simulateDelay();\n        const newRelationship = {\n            ...relationship,\n            id: Date.now()\n        };\n        this.data.relationships.push(newRelationship);\n        this.saveData();\n        return newRelationship;\n    }\n    async addSentiment(sentiment) {\n        await this.simulateDelay();\n        const newSentiment = {\n            ...sentiment,\n            id: Date.now()\n        };\n        this.data.sentiments.push(newSentiment);\n        this.saveData();\n        return newSentiment;\n    }\n    async addNote(note) {\n        await this.simulateDelay();\n        // Resolve any {{contact:ID}} tokens in text to the latest contact name\n        const resolvedText = (0,_strings__WEBPACK_IMPORTED_MODULE_1__.resolveContactTokens)(note.text, this.data.contacts);\n        const newNote = {\n            ...note,\n            text: resolvedText,\n            id: Date.now(),\n            createdAt: new Date().toISOString(),\n            isTrashed: false\n        };\n        this.data.notes.push(newNote);\n        this.saveData();\n        return newNote;\n    }\n    async updateNote(id, updates) {\n        await this.simulateDelay();\n        const noteIndex = this.data.notes.findIndex((n)=>n.id === id);\n        if (noteIndex === -1) {\n            throw new Error(\"Note with id \".concat(id, \" not found\"));\n        }\n        // Update the note\n        this.data.notes[noteIndex] = {\n            ...this.data.notes[noteIndex],\n            ...updates\n        };\n        this.saveData();\n        return this.data.notes[noteIndex];\n    }\n    async addCommitment(commitment) {\n        await this.simulateDelay();\n        const newCommitment = {\n            ...commitment,\n            id: Date.now()\n        };\n        this.data.commitments.push(newCommitment);\n        this.saveData();\n        return newCommitment;\n    }\n    async updateCommitment(id, updates) {\n        await this.simulateDelay();\n        const idx = this.data.commitments.findIndex((c)=>c.id === id);\n        if (idx === -1) throw new Error(\"Commitment with id \".concat(id, \" not found\"));\n        this.data.commitments[idx] = {\n            ...this.data.commitments[idx],\n            ...updates\n        };\n        this.saveData();\n        return this.data.commitments[idx];\n    }\n    async getAllData() {\n        var _this_data_contacts_, _this_data_contacts_1;\n        console.log(\"\\uD83D\\uDCE1 MockDataService: getAllData called\");\n        console.log(\"\\uD83D\\uDD0D MockDataService: Current internal data source:\", {\n            isFromLocalStorage: this.data !== (0,_sampleData__WEBPACK_IMPORTED_MODULE_0__.getSampleData)(),\n            contactsCount: this.data.contacts.length,\n            sampleContactName: ((_this_data_contacts_ = this.data.contacts[0]) === null || _this_data_contacts_ === void 0 ? void 0 : _this_data_contacts_.name) || \"none\"\n        });\n        await this.simulateDelay();\n        // Reload from localStorage to get latest data\n        console.log(\"\\uD83D\\uDD04 MockDataService: Reloading from localStorage before returning data\");\n        this.loadData();\n        console.log(\"\\uD83D\\uDCE4 MockDataService: Returning data to caller:\", {\n            contactsCount: this.data.contacts.length,\n            notesCount: this.data.notes.length,\n            sampleContactName: ((_this_data_contacts_1 = this.data.contacts[0]) === null || _this_data_contacts_1 === void 0 ? void 0 : _this_data_contacts_1.name) || \"none\",\n            dataSource: this.data !== (0,_sampleData__WEBPACK_IMPORTED_MODULE_0__.getSampleData)() ? \"localStorage\" : \"sampleData\"\n        });\n        // Return a copy to prevent direct mutations\n        return {\n            contacts: [\n                ...this.data.contacts\n            ],\n            subjects: [\n                ...this.data.subjects\n            ],\n            organizations: [\n                ...this.data.organizations\n            ],\n            occupations: [\n                ...this.data.occupations\n            ],\n            relationships: [\n                ...this.data.relationships\n            ],\n            sentiments: [\n                ...this.data.sentiments\n            ],\n            notes: [\n                ...this.data.notes\n            ],\n            commitments: [\n                ...this.data.commitments\n            ]\n        };\n    }\n    constructor(){\n        // Initialize with sample data first, then try to load from localStorage\n        this.data = (0,_sampleData__WEBPACK_IMPORTED_MODULE_0__.getSampleData)();\n        // Load from localStorage only on the client side\n        if (true) {\n            this.loadData();\n        }\n    }\n}\n// Export singleton instance\nconst dataService = new MockDataService();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./data/dataService.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./data/strings.ts":
/*!*************************!*\
  !*** ./data/strings.ts ***!
  \*************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CONTACT_STRINGS: function() { return /* binding */ CONTACT_STRINGS; },\n/* harmony export */   ERROR_STRINGS: function() { return /* binding */ ERROR_STRINGS; },\n/* harmony export */   GREETINGS: function() { return /* binding */ GREETINGS; },\n/* harmony export */   LOADING_STRINGS: function() { return /* binding */ LOADING_STRINGS; },\n/* harmony export */   MONTH_NAMES: function() { return /* binding */ MONTH_NAMES; },\n/* harmony export */   NAV_STRINGS: function() { return /* binding */ NAV_STRINGS; },\n/* harmony export */   STRINGS: function() { return /* binding */ STRINGS; },\n/* harmony export */   UI_STRINGS: function() { return /* binding */ UI_STRINGS; },\n/* harmony export */   formatYyyyMmDdToLong: function() { return /* binding */ formatYyyyMmDdToLong; },\n/* harmony export */   resolveContactTokens: function() { return /* binding */ resolveContactTokens; }\n/* harmony export */ });\n// Common text strings used throughout the Circle app\nconst STRINGS = {\n    // Navigation\n    NAV: {\n        CIRCLE: \"Circle\",\n        MEMO: \"Memo\",\n        CONTACTS: \"Contacts\",\n        USER: \"User\",\n        DEV: \"Dev\"\n    },\n    // Contact-related\n    CONTACT: {\n        NO_OCCUPATION: \"No occupation\",\n        NO_SUBJECTS: \"No subjects assigned\",\n        NOTES_COUNT: (count)=>\"\".concat(count, \" notes\"),\n        OVERFLOW_INDICATOR: (count)=>\"+\".concat(count),\n        NO_BIRTH_DATE: \"\",\n        NO_ORGANIZATION: \"\"\n    },\n    // Loading states\n    LOADING: {\n        CONTACTS: \"Loading contacts...\"\n    },\n    // Placeholder text\n    PLACEHOLDERS: {\n        SEARCH: \"Search contacts...\",\n        NO_RESULTS: \"No contacts found\",\n        NO_DATA: \"No data available\"\n    },\n    // Error messages\n    ERRORS: {\n        LOAD_FAILED: \"Failed to load contacts\",\n        SAVE_FAILED: \"Failed to save contact\",\n        PARSE_FAILED: \"Failed to parse saved data\"\n    },\n    // UI Elements\n    UI: {\n        EDIT: \"Edit\",\n        DELETE: \"Delete\",\n        ADD: \"Add\",\n        SAVE: \"Save\",\n        CANCEL: \"Cancel\",\n        CLOSE: \"Close\",\n        MENU: \"Menu\"\n    },\n    // Relationship categories\n    RELATIONSHIPS: {\n        PERSONAL: \"personal\",\n        PROFESSIONAL: \"professional\",\n        ROMANTIC: \"romantic\"\n    },\n    // Subject categories\n    SUBJECTS: {\n        ACTIVITY: \"activity\",\n        INTEREST: \"interest\",\n        HOBBY: \"hobby\",\n        ORGANIZATION: \"organization\"\n    }\n};\n// Greeting messages for the Circle app\nconst GREETINGS = [\n    \"Any news from your friends?\",\n    \"Who did you meet today?\",\n    \"How can I help with your relationships?\",\n    \"What's new with your contacts?\",\n    \"Ready to strengthen your social connections?\"\n];\n// Export individual categories for easier imports\nconst NAV_STRINGS = STRINGS.NAV;\nconst CONTACT_STRINGS = STRINGS.CONTACT;\nconst LOADING_STRINGS = STRINGS.LOADING;\nconst ERROR_STRINGS = STRINGS.ERRORS;\nconst UI_STRINGS = STRINGS.UI;\n// Date formatting utilities that avoid timezone conversions\nconst MONTH_NAMES = [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\"\n];\nfunction formatYyyyMmDdToLong(dateStr) {\n    // Expecting 'YYYY-MM-DD'; parse without using Date to avoid TZ shifts\n    const m = /^\\s*(\\d{4})-(\\d{2})-(\\d{2})\\s*$/.exec(dateStr);\n    if (!m) return dateStr;\n    const y = parseInt(m[1], 10);\n    const mo = parseInt(m[2], 10);\n    const d = parseInt(m[3], 10);\n    if (!y || mo < 1 || mo > 12 || d < 1 || d > 31) return dateStr;\n    const monthName = MONTH_NAMES[mo - 1];\n    return \"\".concat(monthName, \" \").concat(d, \", \").concat(y);\n}\nfunction resolveContactTokens(text, contacts) {\n    if (!text) return text;\n    const re = /\\{\\{\\s*contact\\s*:\\s*(\\d+)\\s*\\}\\}/g;\n    return text.replace(re, (_match, idStr)=>{\n        const id = Number(idStr);\n        const contact = contacts === null || contacts === void 0 ? void 0 : contacts.find((c)=>c.id === id);\n        var _contact_name;\n        return (_contact_name = contact === null || contact === void 0 ? void 0 : contact.name) !== null && _contact_name !== void 0 ? _contact_name : _match;\n    });\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUEsOEJBQUFBLFFBQVNHLElBQUksY0FBYkgsMkJBQUFBLGdCQUFpQko7SUFDMUI7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9kYXRhL3N0cmluZ3MudHM/M2IwNSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb21tb24gdGV4dCBzdHJpbmdzIHVzZWQgdGhyb3VnaG91dCB0aGUgQ2lyY2xlIGFwcFxuZXhwb3J0IGNvbnN0IFNUUklOR1MgPSB7XG4gIC8vIE5hdmlnYXRpb25cbiAgTkFWOiB7XG4gICAgQ0lSQ0xFOiAnQ2lyY2xlJyxcbiAgICBNRU1POiAnTWVtbycsXG4gICAgQ09OVEFDVFM6ICdDb250YWN0cycsXG4gICAgVVNFUjogJ1VzZXInLFxuICAgIERFVjogJ0RldicsXG4gIH0sXG4gIFxuICAvLyBDb250YWN0LXJlbGF0ZWRcbiAgQ09OVEFDVDoge1xuICAgIE5PX09DQ1VQQVRJT046ICdObyBvY2N1cGF0aW9uJyxcbiAgICBOT19TVUJKRUNUUzogJ05vIHN1YmplY3RzIGFzc2lnbmVkJyxcbiAgICBOT1RFU19DT1VOVDogKGNvdW50OiBudW1iZXIpID0+IGAke2NvdW50fSBub3Rlc2AsXG4gICAgT1ZFUkZMT1dfSU5ESUNBVE9SOiAoY291bnQ6IG51bWJlcikgPT4gYCske2NvdW50fWAsXG4gICAgTk9fQklSVEhfREFURTogJycsXG4gICAgTk9fT1JHQU5JWkFUSU9OOiAnJyxcbiAgfSxcbiAgXG4gIC8vIExvYWRpbmcgc3RhdGVzXG4gIExPQURJTkc6IHtcbiAgICBDT05UQUNUUzogJ0xvYWRpbmcgY29udGFjdHMuLi4nLFxuICB9LFxuICBcbiAgLy8gUGxhY2Vob2xkZXIgdGV4dFxuICBQTEFDRUhPTERFUlM6IHtcbiAgICBTRUFSQ0g6ICdTZWFyY2ggY29udGFjdHMuLi4nLFxuICAgIE5PX1JFU1VMVFM6ICdObyBjb250YWN0cyBmb3VuZCcsXG4gICAgTk9fREFUQTogJ05vIGRhdGEgYXZhaWxhYmxlJyxcbiAgfSxcbiAgXG4gIC8vIEVycm9yIG1lc3NhZ2VzXG4gIEVSUk9SUzoge1xuICAgIExPQURfRkFJTEVEOiAnRmFpbGVkIHRvIGxvYWQgY29udGFjdHMnLFxuICAgIFNBVkVfRkFJTEVEOiAnRmFpbGVkIHRvIHNhdmUgY29udGFjdCcsXG4gICAgUEFSU0VfRkFJTEVEOiAnRmFpbGVkIHRvIHBhcnNlIHNhdmVkIGRhdGEnLFxuICB9LFxuICBcbiAgLy8gVUkgRWxlbWVudHNcbiAgVUk6IHtcbiAgICBFRElUOiAnRWRpdCcsXG4gICAgREVMRVRFOiAnRGVsZXRlJyxcbiAgICBBREQ6ICdBZGQnLFxuICAgIFNBVkU6ICdTYXZlJyxcbiAgICBDQU5DRUw6ICdDYW5jZWwnLFxuICAgIENMT1NFOiAnQ2xvc2UnLFxuICAgIE1FTlU6ICdNZW51JyxcbiAgfSxcbiAgXG4gIC8vIFJlbGF0aW9uc2hpcCBjYXRlZ29yaWVzXG4gIFJFTEFUSU9OU0hJUFM6IHtcbiAgICBQRVJTT05BTDogJ3BlcnNvbmFsJyxcbiAgICBQUk9GRVNTSU9OQUw6ICdwcm9mZXNzaW9uYWwnLFxuICAgIFJPTUFOVElDOiAncm9tYW50aWMnLFxuICB9LFxuICBcbiAgLy8gU3ViamVjdCBjYXRlZ29yaWVzXG4gIFNVQkpFQ1RTOiB7XG4gICAgQUNUSVZJVFk6ICdhY3Rpdml0eScsXG4gICAgSU5URVJFU1Q6ICdpbnRlcmVzdCcsXG4gICAgSE9CQlk6ICdob2JieScsXG4gICAgT1JHQU5JWkFUSU9OOiAnb3JnYW5pemF0aW9uJyxcbiAgfSxcbn0gYXMgY29uc3Q7XG5cbi8vIEdyZWV0aW5nIG1lc3NhZ2VzIGZvciB0aGUgQ2lyY2xlIGFwcFxuZXhwb3J0IGNvbnN0IEdSRUVUSU5HUyA9IFtcbiAgXCJBbnkgbmV3cyBmcm9tIHlvdXIgZnJpZW5kcz9cIixcbiAgXCJXaG8gZGlkIHlvdSBtZWV0IHRvZGF5P1wiLFxuICBcIkhvdyBjYW4gSSBoZWxwIHdpdGggeW91ciByZWxhdGlvbnNoaXBzP1wiLFxuICBcIldoYXQncyBuZXcgd2l0aCB5b3VyIGNvbnRhY3RzP1wiLFxuICBcIlJlYWR5IHRvIHN0cmVuZ3RoZW4geW91ciBzb2NpYWwgY29ubmVjdGlvbnM/XCIsXG5dIGFzIGNvbnN0O1xuXG5cblxuLy8gRXhwb3J0IGluZGl2aWR1YWwgY2F0ZWdvcmllcyBmb3IgZWFzaWVyIGltcG9ydHNcbmV4cG9ydCBjb25zdCBOQVZfU1RSSU5HUyA9IFNUUklOR1MuTkFWO1xuZXhwb3J0IGNvbnN0IENPTlRBQ1RfU1RSSU5HUyA9IFNUUklOR1MuQ09OVEFDVDtcbmV4cG9ydCBjb25zdCBMT0FESU5HX1NUUklOR1MgPSBTVFJJTkdTLkxPQURJTkc7XG5leHBvcnQgY29uc3QgRVJST1JfU1RSSU5HUyA9IFNUUklOR1MuRVJST1JTO1xuZXhwb3J0IGNvbnN0IFVJX1NUUklOR1MgPSBTVFJJTkdTLlVJO1xuXG4vLyBEYXRlIGZvcm1hdHRpbmcgdXRpbGl0aWVzIHRoYXQgYXZvaWQgdGltZXpvbmUgY29udmVyc2lvbnNcbmV4cG9ydCBjb25zdCBNT05USF9OQU1FUyA9IFtcbiAgJ0phbnVhcnknLCAnRmVicnVhcnknLCAnTWFyY2gnLCAnQXByaWwnLCAnTWF5JywgJ0p1bmUnLFxuICAnSnVseScsICdBdWd1c3QnLCAnU2VwdGVtYmVyJywgJ09jdG9iZXInLCAnTm92ZW1iZXInLCAnRGVjZW1iZXInXG5dIGFzIGNvbnN0O1xuXG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0WXl5eU1tRGRUb0xvbmcoZGF0ZVN0cjogc3RyaW5nKTogc3RyaW5nIHtcbiAgLy8gRXhwZWN0aW5nICdZWVlZLU1NLUREJzsgcGFyc2Ugd2l0aG91dCB1c2luZyBEYXRlIHRvIGF2b2lkIFRaIHNoaWZ0c1xuICBjb25zdCBtID0gL15cXHMqKFxcZHs0fSktKFxcZHsyfSktKFxcZHsyfSlcXHMqJC8uZXhlYyhkYXRlU3RyKTtcbiAgaWYgKCFtKSByZXR1cm4gZGF0ZVN0cjtcbiAgY29uc3QgeSA9IHBhcnNlSW50KG1bMV0sIDEwKTtcbiAgY29uc3QgbW8gPSBwYXJzZUludChtWzJdLCAxMCk7XG4gIGNvbnN0IGQgPSBwYXJzZUludChtWzNdLCAxMCk7XG4gIGlmICgheSB8fCBtbyA8IDEgfHwgbW8gPiAxMiB8fCBkIDwgMSB8fCBkID4gMzEpIHJldHVybiBkYXRlU3RyO1xuICBjb25zdCBtb250aE5hbWUgPSBNT05USF9OQU1FU1ttbyAtIDFdO1xuICByZXR1cm4gYCR7bW9udGhOYW1lfSAke2R9LCAke3l9YDtcbn1cblxuLy8gUmVwbGFjZSB0ZW1wbGF0ZSB0b2tlbnMgbGlrZSB7e2NvbnRhY3Q6SUR9fSB3aXRoIHRoZSBjb250YWN0J3MgY3VycmVudCBuYW1lXG5pbXBvcnQgeyBDb250YWN0IH0gZnJvbSAnLi4vY29udGV4dHMvQ29udGFjdENvbnRleHQnO1xuZXhwb3J0IGZ1bmN0aW9uIHJlc29sdmVDb250YWN0VG9rZW5zKHRleHQ6IHN0cmluZywgY29udGFjdHM6IENvbnRhY3RbXSk6IHN0cmluZyB7XG4gIGlmICghdGV4dCkgcmV0dXJuIHRleHQ7XG4gIGNvbnN0IHJlID0gL1xce1xce1xccypjb250YWN0XFxzKjpcXHMqKFxcZCspXFxzKlxcfVxcfS9nO1xuICByZXR1cm4gdGV4dC5yZXBsYWNlKHJlLCAoX21hdGNoLCBpZFN0cikgPT4ge1xuICAgIGNvbnN0IGlkID0gTnVtYmVyKGlkU3RyKTtcbiAgICBjb25zdCBjb250YWN0ID0gY29udGFjdHM/LmZpbmQoYyA9PiBjLmlkID09PSBpZCk7XG4gICAgcmV0dXJuIGNvbnRhY3Q/Lm5hbWUgPz8gX21hdGNoO1xuICB9KTtcbn1cbiJdLCJuYW1lcyI6WyJTVFJJTkdTIiwiTkFWIiwiQ0lSQ0xFIiwiTUVNTyIsIkNPTlRBQ1RTIiwiVVNFUiIsIkRFViIsIkNPTlRBQ1QiLCJOT19PQ0NVUEFUSU9OIiwiTk9fU1VCSkVDVFMiLCJOT1RFU19DT1VOVCIsImNvdW50IiwiT1ZFUkZMT1dfSU5ESUNBVE9SIiwiTk9fQklSVEhfREFURSIsIk5PX09SR0FOSVpBVElPTiIsIkxPQURJTkciLCJQTEFDRUhPTERFUlMiLCJTRUFSQ0giLCJOT19SRVNVTFRTIiwiTk9fREFUQSIsIkVSUk9SUyIsIkxPQURfRkFJTEVEIiwiU0FWRV9GQUlMRUQiLCJQQVJTRV9GQUlMRUQiLCJVSSIsIkVESVQiLCJERUxFVEUiLCJBREQiLCJTQVZFIiwiQ0FOQ0VMIiwiQ0xPU0UiLCJNRU5VIiwiUkVMQVRJT05TSElQUyIsIlBFUlNPTkFMIiwiUFJPRkVTU0lPTkFMIiwiUk9NQU5USUMiLCJTVUJKRUNUUyIsIkFDVElWSVRZIiwiSU5URVJFU1QiLCJIT0JCWSIsIk9SR0FOSVpBVElPTiIsIkdSRUVUSU5HUyIsIk5BVl9TVFJJTkdTIiwiQ09OVEFDVF9TVFJJTkdTIiwiTE9BRElOR19TVFJJTkdTIiwiRVJST1JfU1RSSU5HUyIsIlVJX1NUUklOR1MiLCJNT05USF9OQU1FUyIsImZvcm1hdFl5eXlNbURkVG9Mb25nIiwiZGF0ZVN0ciIsIm0iLCJleGVjIiwieSIsInBhcnNlSW50IiwibW8iLCJkIiwibW9udGhOYW1lIiwicmVzb2x2ZUNvbnRhY3RUb2tlbnMiLCJ0ZXh0IiwiY29udGFjdHMiLCJyZSIsInJlcGxhY2UiLCJfbWF0Y2giLCJpZFN0ciIsImlkIiwiTnVtYmVyIiwiY29udGFjdCIsImZpbmQiLCJjIiwibmFtZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./data/strings.ts\n"));

/***/ })

});